
VehicleJoystick_stm32_HAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003fa4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b4  080040b0  080040b0  000140b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004364  08004364  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004364  08004364  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004364  08004364  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004364  08004364  00014364  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004368  08004368  00014368  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800436c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000280  20000070  080043dc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f0  080043dc  000202f0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b199  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002412  00000000  00000000  0002b232  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000940  00000000  00000000  0002d648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000838  00000000  00000000  0002df88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000181e5  00000000  00000000  0002e7c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000badf  00000000  00000000  000469a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086286  00000000  00000000  00052484  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d870a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026a4  00000000  00000000  000d8760  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08004098 	.word	0x08004098

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08004098 	.word	0x08004098

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <HC05_DisplayTerminal>:
 * @param[*Msg] - string to send to display terminal
 *
 * @return - void
 */
static void HC05_DisplayTerminal(char *Msg)
{
 8000160:	b480      	push	{r7}
 8000162:	b083      	sub	sp, #12
 8000164:	af00      	add	r7, sp, #0
 8000166:	6078      	str	r0, [r7, #4]
}
 8000168:	bf00      	nop
 800016a:	370c      	adds	r7, #12
 800016c:	46bd      	mov	sp, r7
 800016e:	bc80      	pop	{r7}
 8000170:	4770      	bx	lr
	...

08000174 <HC05_GPIO_Init>:
 * @param[*hc05] - pointer to struct for HC05 bluetooth module
 * @param[Command] - predefined command to send
 * @return - void
 */
static void HC05_GPIO_Init(void)
{
 8000174:	b580      	push	{r7, lr}
 8000176:	b086      	sub	sp, #24
 8000178:	af00      	add	r7, sp, #0
	HC05_EN_CLK_ENABLE();
 800017a:	4b21      	ldr	r3, [pc, #132]	; (8000200 <HC05_GPIO_Init+0x8c>)
 800017c:	699b      	ldr	r3, [r3, #24]
 800017e:	4a20      	ldr	r2, [pc, #128]	; (8000200 <HC05_GPIO_Init+0x8c>)
 8000180:	f043 0310 	orr.w	r3, r3, #16
 8000184:	6193      	str	r3, [r2, #24]
 8000186:	4b1e      	ldr	r3, [pc, #120]	; (8000200 <HC05_GPIO_Init+0x8c>)
 8000188:	699b      	ldr	r3, [r3, #24]
 800018a:	f003 0310 	and.w	r3, r3, #16
 800018e:	607b      	str	r3, [r7, #4]
 8000190:	687b      	ldr	r3, [r7, #4]
	HC05_STATE_CLK_ENABLE();
 8000192:	4b1b      	ldr	r3, [pc, #108]	; (8000200 <HC05_GPIO_Init+0x8c>)
 8000194:	699b      	ldr	r3, [r3, #24]
 8000196:	4a1a      	ldr	r2, [pc, #104]	; (8000200 <HC05_GPIO_Init+0x8c>)
 8000198:	f043 0304 	orr.w	r3, r3, #4
 800019c:	6193      	str	r3, [r2, #24]
 800019e:	4b18      	ldr	r3, [pc, #96]	; (8000200 <HC05_GPIO_Init+0x8c>)
 80001a0:	699b      	ldr	r3, [r3, #24]
 80001a2:	f003 0304 	and.w	r3, r3, #4
 80001a6:	603b      	str	r3, [r7, #0]
 80001a8:	683b      	ldr	r3, [r7, #0]

	GPIO_InitTypeDef gpio =
 80001aa:	f107 0308 	add.w	r3, r7, #8
 80001ae:	2200      	movs	r2, #0
 80001b0:	601a      	str	r2, [r3, #0]
 80001b2:	605a      	str	r2, [r3, #4]
 80001b4:	609a      	str	r2, [r3, #8]
 80001b6:	60da      	str	r2, [r3, #12]
	{ 0 };
	gpio.Mode = GPIO_MODE_OUTPUT_PP; // OD = open drain
 80001b8:	2301      	movs	r3, #1
 80001ba:	60fb      	str	r3, [r7, #12]
	gpio.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80001bc:	2301      	movs	r3, #1
 80001be:	617b      	str	r3, [r7, #20]
	gpio.Pin = (HC05_PWR_PIN);
 80001c0:	2308      	movs	r3, #8
 80001c2:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(HC05_EN_PORT, &gpio);
 80001c4:	f107 0308 	add.w	r3, r7, #8
 80001c8:	4619      	mov	r1, r3
 80001ca:	480e      	ldr	r0, [pc, #56]	; (8000204 <HC05_GPIO_Init+0x90>)
 80001cc:	f001 fe18 	bl	8001e00 <HAL_GPIO_Init>

	gpio.Pin = (HC05_EN_PIN);
 80001d0:	2301      	movs	r3, #1
 80001d2:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(HC05_EN_PORT, &gpio);
 80001d4:	f107 0308 	add.w	r3, r7, #8
 80001d8:	4619      	mov	r1, r3
 80001da:	480a      	ldr	r0, [pc, #40]	; (8000204 <HC05_GPIO_Init+0x90>)
 80001dc:	f001 fe10 	bl	8001e00 <HAL_GPIO_Init>

	gpio.Pin = HC05_STATE_PIN;
 80001e0:	2380      	movs	r3, #128	; 0x80
 80001e2:	60bb      	str	r3, [r7, #8]
	gpio.Mode = GPIO_MODE_INPUT;
 80001e4:	2300      	movs	r3, #0
 80001e6:	60fb      	str	r3, [r7, #12]
	gpio.Pull = GPIO_NOPULL;
 80001e8:	2300      	movs	r3, #0
 80001ea:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(HC05_STATE_PORT, &gpio);
 80001ec:	f107 0308 	add.w	r3, r7, #8
 80001f0:	4619      	mov	r1, r3
 80001f2:	4805      	ldr	r0, [pc, #20]	; (8000208 <HC05_GPIO_Init+0x94>)
 80001f4:	f001 fe04 	bl	8001e00 <HAL_GPIO_Init>

}
 80001f8:	bf00      	nop
 80001fa:	3718      	adds	r7, #24
 80001fc:	46bd      	mov	sp, r7
 80001fe:	bd80      	pop	{r7, pc}
 8000200:	40021000 	.word	0x40021000
 8000204:	40011000 	.word	0x40011000
 8000208:	40010800 	.word	0x40010800

0800020c <HC05_Init>:
 * @param[huart] - handler to uart that HC05 is connected to
 *
 * @return - void
 */
void HC05_Init(HC05_t *hc05, UART_HandleTypeDef *huart)
{
 800020c:	b580      	push	{r7, lr}
 800020e:	b082      	sub	sp, #8
 8000210:	af00      	add	r7, sp, #0
 8000212:	6078      	str	r0, [r7, #4]
 8000214:	6039      	str	r1, [r7, #0]

	HC05_GPIO_Init();
 8000216:	f7ff ffad 	bl	8000174 <HC05_GPIO_Init>

	// init msg
	HC05_DisplayTerminal("HC-05 Initializing... \n\r");
 800021a:	4814      	ldr	r0, [pc, #80]	; (800026c <HC05_Init+0x60>)
 800021c:	f7ff ffa0 	bl	8000160 <HC05_DisplayTerminal>

	// reset the ring buffer
	RB_Flush(&(hc05->RingBuffer));
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	3346      	adds	r3, #70	; 0x46
 8000224:	4618      	mov	r0, r3
 8000226:	f000 fc4d 	bl	8000ac4 <RB_Flush>

	// Assign uart
	hc05->huart = huart;
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	683a      	ldr	r2, [r7, #0]
 800022e:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_IT(hc05->huart, &(hc05->RecieveBufferIT), 1);
#endif

	// if dma mode is used for receive
#if (HC05_UART_RX_DMA == 1)
	HAL_UARTEx_ReceiveToIdle_DMA(hc05->huart, hc05->RecieveBufferDMA,
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	6818      	ldr	r0, [r3, #0]
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	3304      	adds	r3, #4
 8000238:	2240      	movs	r2, #64	; 0x40
 800023a:	4619      	mov	r1, r3
 800023c:	f002 fd51 	bl	8002ce2 <HAL_UARTEx_ReceiveToIdle_DMA>
	HC05_RECIEVEBUFFERSIZE);
	// to avoid callback from half message this has be disabled
	__HAL_DMA_DISABLE_IT(hc05->huart->hdmarx, DMA_IT_HT);
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	681a      	ldr	r2, [r3, #0]
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	f022 0204 	bic.w	r2, r2, #4
 8000256:	601a      	str	r2, [r3, #0]
	// Pair + bind + link to target device
	HC05_TryAddress(hc05, 832, 70, 8);
	// exit AT mode
#endif

	HC05_PWR_HIGH;
 8000258:	2201      	movs	r2, #1
 800025a:	2108      	movs	r1, #8
 800025c:	4804      	ldr	r0, [pc, #16]	; (8000270 <HC05_Init+0x64>)
 800025e:	f001 ff60 	bl	8002122 <HAL_GPIO_WritePin>

}
 8000262:	bf00      	nop
 8000264:	3708      	adds	r7, #8
 8000266:	46bd      	mov	sp, r7
 8000268:	bd80      	pop	{r7, pc}
 800026a:	bf00      	nop
 800026c:	080042d0 	.word	0x080042d0
 8000270:	40011000 	.word	0x40011000

08000274 <HC05_ClearMsgPendingFlag>:
 *
 * @param[*hc05] - pointer to struct for HC05 bluetooth module
 * @return - void
 */
void HC05_ClearMsgPendingFlag(HC05_t *hc05)
{
 8000274:	b480      	push	{r7}
 8000276:	b083      	sub	sp, #12
 8000278:	af00      	add	r7, sp, #0
 800027a:	6078      	str	r0, [r7, #4]
	hc05->MessagePending = 0;
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	2200      	movs	r2, #0
 8000280:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
}
 8000284:	bf00      	nop
 8000286:	370c      	adds	r7, #12
 8000288:	46bd      	mov	sp, r7
 800028a:	bc80      	pop	{r7}
 800028c:	4770      	bx	lr

0800028e <HC05_CheckPendingMessages>:
 * @param[*hc05] - pointer to struct for HC05 bluetooth module
 * @param[*MsgBuffer] - pointer to buffer where message has to be written
 * @return - status : massage pending 1/0
 */
uint8_t HC05_CheckPendingMessages(HC05_t *hc05, uint8_t *MsgBuffer)
{
 800028e:	b580      	push	{r7, lr}
 8000290:	b084      	sub	sp, #16
 8000292:	af00      	add	r7, sp, #0
 8000294:	6078      	str	r0, [r7, #4]
 8000296:	6039      	str	r1, [r7, #0]

	// Check if there is message finished
	if (hc05->LinesRecieved > 0)
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	f893 30ca 	ldrb.w	r3, [r3, #202]	; 0xca
 800029e:	b2db      	uxtb	r3, r3
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d032      	beq.n	800030a <HC05_CheckPendingMessages+0x7c>
	{

		uint8_t i = 0;
 80002a4:	2300      	movs	r3, #0
 80002a6:	73fb      	strb	r3, [r7, #15]
		uint8_t temp = 0;
 80002a8:	2300      	movs	r3, #0
 80002aa:	73bb      	strb	r3, [r7, #14]
		do
		{
			// Move a sign to ring buffer
			RB_Read(&(hc05->RingBuffer), &temp);
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	3346      	adds	r3, #70	; 0x46
 80002b0:	f107 020e 	add.w	r2, r7, #14
 80002b4:	4611      	mov	r1, r2
 80002b6:	4618      	mov	r0, r3
 80002b8:	f000 fbad 	bl	8000a16 <RB_Read>
			if (temp == HC05_LASTCHARACTER)
 80002bc:	7bbb      	ldrb	r3, [r7, #14]
 80002be:	2b0a      	cmp	r3, #10
 80002c0:	d10b      	bne.n	80002da <HC05_CheckPendingMessages+0x4c>
			{
				MsgBuffer[i] = HC05_LASTCHARACTER;
 80002c2:	7bfb      	ldrb	r3, [r7, #15]
 80002c4:	683a      	ldr	r2, [r7, #0]
 80002c6:	4413      	add	r3, r2
 80002c8:	220a      	movs	r2, #10
 80002ca:	701a      	strb	r2, [r3, #0]
				MsgBuffer[i + 1] = 0;
 80002cc:	7bfb      	ldrb	r3, [r7, #15]
 80002ce:	3301      	adds	r3, #1
 80002d0:	683a      	ldr	r2, [r7, #0]
 80002d2:	4413      	add	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	701a      	strb	r2, [r3, #0]
 80002d8:	e004      	b.n	80002e4 <HC05_CheckPendingMessages+0x56>
			}
			else
			{
				MsgBuffer[i] = temp;
 80002da:	7bfb      	ldrb	r3, [r7, #15]
 80002dc:	683a      	ldr	r2, [r7, #0]
 80002de:	4413      	add	r3, r2
 80002e0:	7bba      	ldrb	r2, [r7, #14]
 80002e2:	701a      	strb	r2, [r3, #0]
			}
			i++;
 80002e4:	7bfb      	ldrb	r3, [r7, #15]
 80002e6:	3301      	adds	r3, #1
 80002e8:	73fb      	strb	r3, [r7, #15]
			//rewrite signs until last character defined by user
		} while (temp != HC05_LASTCHARACTER);
 80002ea:	7bbb      	ldrb	r3, [r7, #14]
 80002ec:	2b0a      	cmp	r3, #10
 80002ee:	d1dd      	bne.n	80002ac <HC05_CheckPendingMessages+0x1e>
		//decrement LinesRecieved
		hc05->LinesRecieved--;
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	f893 30ca 	ldrb.w	r3, [r3, #202]	; 0xca
 80002f6:	b2db      	uxtb	r3, r3
 80002f8:	3b01      	subs	r3, #1
 80002fa:	b2da      	uxtb	r2, r3
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
		//set up flag that message is ready to parse
		hc05->MessagePending = HC05_MESSAGEPENDING;
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	2201      	movs	r2, #1
 8000306:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
	}

	// return if flag status
	return hc05->MessagePending;
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	f893 30cb 	ldrb.w	r3, [r3, #203]	; 0xcb
}
 8000310:	4618      	mov	r0, r3
 8000312:	3710      	adds	r7, #16
 8000314:	46bd      	mov	sp, r7
 8000316:	bd80      	pop	{r7, pc}

08000318 <HC05_RxCpltCallbackDMA>:
 * @return - void
 */
#if (HC05_UART_RX_DMA == 1)
void HC05_RxCpltCallbackDMA(HC05_t *hc05, UART_HandleTypeDef *huart,
		uint16_t size)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b086      	sub	sp, #24
 800031c:	af00      	add	r7, sp, #0
 800031e:	60f8      	str	r0, [r7, #12]
 8000320:	60b9      	str	r1, [r7, #8]
 8000322:	4613      	mov	r3, r2
 8000324:	80fb      	strh	r3, [r7, #6]

	//check if IRQ is coming from correct uart
	if (hc05->huart->Instance == huart->Instance)
 8000326:	68fb      	ldr	r3, [r7, #12]
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	681a      	ldr	r2, [r3, #0]
 800032c:	68bb      	ldr	r3, [r7, #8]
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	429a      	cmp	r2, r3
 8000332:	d13f      	bne.n	80003b4 <HC05_RxCpltCallbackDMA+0x9c>
	{

		uint8_t i;
		uint8_t newlines = 0;
 8000334:	2300      	movs	r3, #0
 8000336:	75bb      	strb	r3, [r7, #22]
		//write message to ring buffer
		for (i = 0; i < size; i++)
 8000338:	2300      	movs	r3, #0
 800033a:	75fb      	strb	r3, [r7, #23]
 800033c:	e015      	b.n	800036a <HC05_RxCpltCallbackDMA+0x52>
		{
			RB_Write((&(hc05->RingBuffer)), hc05->RecieveBufferDMA[i]);
 800033e:	68fb      	ldr	r3, [r7, #12]
 8000340:	f103 0046 	add.w	r0, r3, #70	; 0x46
 8000344:	7dfb      	ldrb	r3, [r7, #23]
 8000346:	68fa      	ldr	r2, [r7, #12]
 8000348:	4413      	add	r3, r2
 800034a:	791b      	ldrb	r3, [r3, #4]
 800034c:	4619      	mov	r1, r3
 800034e:	f000 fb8e 	bl	8000a6e <RB_Write>

			// when line is complete -> add 1 to received lines
			// only when last char is \n
			if (hc05->RecieveBufferDMA[i] == HC05_LASTCHARACTER)
 8000352:	7dfb      	ldrb	r3, [r7, #23]
 8000354:	68fa      	ldr	r2, [r7, #12]
 8000356:	4413      	add	r3, r2
 8000358:	791b      	ldrb	r3, [r3, #4]
 800035a:	2b0a      	cmp	r3, #10
 800035c:	d102      	bne.n	8000364 <HC05_RxCpltCallbackDMA+0x4c>
			{
				newlines++;
 800035e:	7dbb      	ldrb	r3, [r7, #22]
 8000360:	3301      	adds	r3, #1
 8000362:	75bb      	strb	r3, [r7, #22]
		for (i = 0; i < size; i++)
 8000364:	7dfb      	ldrb	r3, [r7, #23]
 8000366:	3301      	adds	r3, #1
 8000368:	75fb      	strb	r3, [r7, #23]
 800036a:	7dfb      	ldrb	r3, [r7, #23]
 800036c:	b29b      	uxth	r3, r3
 800036e:	88fa      	ldrh	r2, [r7, #6]
 8000370:	429a      	cmp	r2, r3
 8000372:	d8e4      	bhi.n	800033e <HC05_RxCpltCallbackDMA+0x26>
			}
		}

		if (newlines == 0)
 8000374:	7dbb      	ldrb	r3, [r7, #22]
 8000376:	2b00      	cmp	r3, #0
 8000378:	d104      	bne.n	8000384 <HC05_RxCpltCallbackDMA+0x6c>
		{
			// if formt of data is not correct print msg

			//flush ringbuffer to not send later trash data
			RB_Flush(&(hc05->RingBuffer));
 800037a:	68fb      	ldr	r3, [r7, #12]
 800037c:	3346      	adds	r3, #70	; 0x46
 800037e:	4618      	mov	r0, r3
 8000380:	f000 fba0 	bl	8000ac4 <RB_Flush>
		}

		// add new lines
		hc05->LinesRecieved = +newlines;
 8000384:	68fb      	ldr	r3, [r7, #12]
 8000386:	7dba      	ldrb	r2, [r7, #22]
 8000388:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca

		// start another IRQ for single sign
		HAL_UARTEx_ReceiveToIdle_DMA(hc05->huart, hc05->RecieveBufferDMA,
 800038c:	68fb      	ldr	r3, [r7, #12]
 800038e:	6818      	ldr	r0, [r3, #0]
 8000390:	68fb      	ldr	r3, [r7, #12]
 8000392:	3304      	adds	r3, #4
 8000394:	2240      	movs	r2, #64	; 0x40
 8000396:	4619      	mov	r1, r3
 8000398:	f002 fca3 	bl	8002ce2 <HAL_UARTEx_ReceiveToIdle_DMA>
		HC05_RECIEVEBUFFERSIZE);
		// to avoid callback from half message this has be disabled
		__HAL_DMA_DISABLE_IT(hc05->huart->hdmarx, DMA_IT_HT);
 800039c:	68fb      	ldr	r3, [r7, #12]
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	681a      	ldr	r2, [r3, #0]
 80003a6:	68fb      	ldr	r3, [r7, #12]
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	f022 0204 	bic.w	r2, r2, #4
 80003b2:	601a      	str	r2, [r3, #0]
	}
}
 80003b4:	bf00      	nop
 80003b6:	3718      	adds	r7, #24
 80003b8:	46bd      	mov	sp, r7
 80003ba:	bd80      	pop	{r7, pc}

080003bc <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b084      	sub	sp, #16
 80003c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80003c2:	1d3b      	adds	r3, r7, #4
 80003c4:	2200      	movs	r2, #0
 80003c6:	601a      	str	r2, [r3, #0]
 80003c8:	605a      	str	r2, [r3, #4]
 80003ca:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80003cc:	4b20      	ldr	r3, [pc, #128]	; (8000450 <MX_ADC1_Init+0x94>)
 80003ce:	4a21      	ldr	r2, [pc, #132]	; (8000454 <MX_ADC1_Init+0x98>)
 80003d0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80003d2:	4b1f      	ldr	r3, [pc, #124]	; (8000450 <MX_ADC1_Init+0x94>)
 80003d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80003d8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80003da:	4b1d      	ldr	r3, [pc, #116]	; (8000450 <MX_ADC1_Init+0x94>)
 80003dc:	2201      	movs	r2, #1
 80003de:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80003e0:	4b1b      	ldr	r3, [pc, #108]	; (8000450 <MX_ADC1_Init+0x94>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003e6:	4b1a      	ldr	r3, [pc, #104]	; (8000450 <MX_ADC1_Init+0x94>)
 80003e8:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80003ec:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80003ee:	4b18      	ldr	r3, [pc, #96]	; (8000450 <MX_ADC1_Init+0x94>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 80003f4:	4b16      	ldr	r3, [pc, #88]	; (8000450 <MX_ADC1_Init+0x94>)
 80003f6:	2202      	movs	r2, #2
 80003f8:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80003fa:	4815      	ldr	r0, [pc, #84]	; (8000450 <MX_ADC1_Init+0x94>)
 80003fc:	f000 fd88 	bl	8000f10 <HAL_ADC_Init>
 8000400:	4603      	mov	r3, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d001      	beq.n	800040a <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000406:	f000 fb01 	bl	8000a0c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800040a:	2300      	movs	r3, #0
 800040c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800040e:	2301      	movs	r3, #1
 8000410:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000412:	2307      	movs	r3, #7
 8000414:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000416:	1d3b      	adds	r3, r7, #4
 8000418:	4619      	mov	r1, r3
 800041a:	480d      	ldr	r0, [pc, #52]	; (8000450 <MX_ADC1_Init+0x94>)
 800041c:	f000 ff4a 	bl	80012b4 <HAL_ADC_ConfigChannel>
 8000420:	4603      	mov	r3, r0
 8000422:	2b00      	cmp	r3, #0
 8000424:	d001      	beq.n	800042a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000426:	f000 faf1 	bl	8000a0c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800042a:	2301      	movs	r3, #1
 800042c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800042e:	2302      	movs	r3, #2
 8000430:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000432:	1d3b      	adds	r3, r7, #4
 8000434:	4619      	mov	r1, r3
 8000436:	4806      	ldr	r0, [pc, #24]	; (8000450 <MX_ADC1_Init+0x94>)
 8000438:	f000 ff3c 	bl	80012b4 <HAL_ADC_ConfigChannel>
 800043c:	4603      	mov	r3, r0
 800043e:	2b00      	cmp	r3, #0
 8000440:	d001      	beq.n	8000446 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000442:	f000 fae3 	bl	8000a0c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000446:	bf00      	nop
 8000448:	3710      	adds	r7, #16
 800044a:	46bd      	mov	sp, r7
 800044c:	bd80      	pop	{r7, pc}
 800044e:	bf00      	nop
 8000450:	2000009c 	.word	0x2000009c
 8000454:	40012400 	.word	0x40012400

08000458 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b088      	sub	sp, #32
 800045c:	af00      	add	r7, sp, #0
 800045e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000460:	f107 0310 	add.w	r3, r7, #16
 8000464:	2200      	movs	r2, #0
 8000466:	601a      	str	r2, [r3, #0]
 8000468:	605a      	str	r2, [r3, #4]
 800046a:	609a      	str	r2, [r3, #8]
 800046c:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	4a28      	ldr	r2, [pc, #160]	; (8000514 <HAL_ADC_MspInit+0xbc>)
 8000474:	4293      	cmp	r3, r2
 8000476:	d149      	bne.n	800050c <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000478:	4b27      	ldr	r3, [pc, #156]	; (8000518 <HAL_ADC_MspInit+0xc0>)
 800047a:	699b      	ldr	r3, [r3, #24]
 800047c:	4a26      	ldr	r2, [pc, #152]	; (8000518 <HAL_ADC_MspInit+0xc0>)
 800047e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000482:	6193      	str	r3, [r2, #24]
 8000484:	4b24      	ldr	r3, [pc, #144]	; (8000518 <HAL_ADC_MspInit+0xc0>)
 8000486:	699b      	ldr	r3, [r3, #24]
 8000488:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800048c:	60fb      	str	r3, [r7, #12]
 800048e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000490:	4b21      	ldr	r3, [pc, #132]	; (8000518 <HAL_ADC_MspInit+0xc0>)
 8000492:	699b      	ldr	r3, [r3, #24]
 8000494:	4a20      	ldr	r2, [pc, #128]	; (8000518 <HAL_ADC_MspInit+0xc0>)
 8000496:	f043 0304 	orr.w	r3, r3, #4
 800049a:	6193      	str	r3, [r2, #24]
 800049c:	4b1e      	ldr	r3, [pc, #120]	; (8000518 <HAL_ADC_MspInit+0xc0>)
 800049e:	699b      	ldr	r3, [r3, #24]
 80004a0:	f003 0304 	and.w	r3, r3, #4
 80004a4:	60bb      	str	r3, [r7, #8]
 80004a6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = AXIS_Y_Pin|AXIS_X_Pin;
 80004a8:	2303      	movs	r3, #3
 80004aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004ac:	2303      	movs	r3, #3
 80004ae:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004b0:	f107 0310 	add.w	r3, r7, #16
 80004b4:	4619      	mov	r1, r3
 80004b6:	4819      	ldr	r0, [pc, #100]	; (800051c <HAL_ADC_MspInit+0xc4>)
 80004b8:	f001 fca2 	bl	8001e00 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80004bc:	4b18      	ldr	r3, [pc, #96]	; (8000520 <HAL_ADC_MspInit+0xc8>)
 80004be:	4a19      	ldr	r2, [pc, #100]	; (8000524 <HAL_ADC_MspInit+0xcc>)
 80004c0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80004c2:	4b17      	ldr	r3, [pc, #92]	; (8000520 <HAL_ADC_MspInit+0xc8>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80004c8:	4b15      	ldr	r3, [pc, #84]	; (8000520 <HAL_ADC_MspInit+0xc8>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80004ce:	4b14      	ldr	r3, [pc, #80]	; (8000520 <HAL_ADC_MspInit+0xc8>)
 80004d0:	2280      	movs	r2, #128	; 0x80
 80004d2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80004d4:	4b12      	ldr	r3, [pc, #72]	; (8000520 <HAL_ADC_MspInit+0xc8>)
 80004d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80004da:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80004dc:	4b10      	ldr	r3, [pc, #64]	; (8000520 <HAL_ADC_MspInit+0xc8>)
 80004de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80004e2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80004e4:	4b0e      	ldr	r3, [pc, #56]	; (8000520 <HAL_ADC_MspInit+0xc8>)
 80004e6:	2220      	movs	r2, #32
 80004e8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80004ea:	4b0d      	ldr	r3, [pc, #52]	; (8000520 <HAL_ADC_MspInit+0xc8>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80004f0:	480b      	ldr	r0, [pc, #44]	; (8000520 <HAL_ADC_MspInit+0xc8>)
 80004f2:	f001 f9e7 	bl	80018c4 <HAL_DMA_Init>
 80004f6:	4603      	mov	r3, r0
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d001      	beq.n	8000500 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 80004fc:	f000 fa86 	bl	8000a0c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	4a07      	ldr	r2, [pc, #28]	; (8000520 <HAL_ADC_MspInit+0xc8>)
 8000504:	621a      	str	r2, [r3, #32]
 8000506:	4a06      	ldr	r2, [pc, #24]	; (8000520 <HAL_ADC_MspInit+0xc8>)
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800050c:	bf00      	nop
 800050e:	3720      	adds	r7, #32
 8000510:	46bd      	mov	sp, r7
 8000512:	bd80      	pop	{r7, pc}
 8000514:	40012400 	.word	0x40012400
 8000518:	40021000 	.word	0x40021000
 800051c:	40010800 	.word	0x40010800
 8000520:	200000cc 	.word	0x200000cc
 8000524:	40020008 	.word	0x40020008

08000528 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000528:	b480      	push	{r7}
 800052a:	b083      	sub	sp, #12
 800052c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800052e:	4b08      	ldr	r3, [pc, #32]	; (8000550 <MX_DMA_Init+0x28>)
 8000530:	695b      	ldr	r3, [r3, #20]
 8000532:	4a07      	ldr	r2, [pc, #28]	; (8000550 <MX_DMA_Init+0x28>)
 8000534:	f043 0301 	orr.w	r3, r3, #1
 8000538:	6153      	str	r3, [r2, #20]
 800053a:	4b05      	ldr	r3, [pc, #20]	; (8000550 <MX_DMA_Init+0x28>)
 800053c:	695b      	ldr	r3, [r3, #20]
 800053e:	f003 0301 	and.w	r3, r3, #1
 8000542:	607b      	str	r3, [r7, #4]
 8000544:	687b      	ldr	r3, [r7, #4]

}
 8000546:	bf00      	nop
 8000548:	370c      	adds	r7, #12
 800054a:	46bd      	mov	sp, r7
 800054c:	bc80      	pop	{r7}
 800054e:	4770      	bx	lr
 8000550:	40021000 	.word	0x40021000

08000554 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b086      	sub	sp, #24
 8000558:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800055a:	f107 0308 	add.w	r3, r7, #8
 800055e:	2200      	movs	r2, #0
 8000560:	601a      	str	r2, [r3, #0]
 8000562:	605a      	str	r2, [r3, #4]
 8000564:	609a      	str	r2, [r3, #8]
 8000566:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000568:	4b29      	ldr	r3, [pc, #164]	; (8000610 <MX_GPIO_Init+0xbc>)
 800056a:	699b      	ldr	r3, [r3, #24]
 800056c:	4a28      	ldr	r2, [pc, #160]	; (8000610 <MX_GPIO_Init+0xbc>)
 800056e:	f043 0304 	orr.w	r3, r3, #4
 8000572:	6193      	str	r3, [r2, #24]
 8000574:	4b26      	ldr	r3, [pc, #152]	; (8000610 <MX_GPIO_Init+0xbc>)
 8000576:	699b      	ldr	r3, [r3, #24]
 8000578:	f003 0304 	and.w	r3, r3, #4
 800057c:	607b      	str	r3, [r7, #4]
 800057e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000580:	4b23      	ldr	r3, [pc, #140]	; (8000610 <MX_GPIO_Init+0xbc>)
 8000582:	699b      	ldr	r3, [r3, #24]
 8000584:	4a22      	ldr	r2, [pc, #136]	; (8000610 <MX_GPIO_Init+0xbc>)
 8000586:	f043 0308 	orr.w	r3, r3, #8
 800058a:	6193      	str	r3, [r2, #24]
 800058c:	4b20      	ldr	r3, [pc, #128]	; (8000610 <MX_GPIO_Init+0xbc>)
 800058e:	699b      	ldr	r3, [r3, #24]
 8000590:	f003 0308 	and.w	r3, r3, #8
 8000594:	603b      	str	r3, [r7, #0]
 8000596:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_COM_GPIO_Port, LED_COM_Pin, GPIO_PIN_RESET);
 8000598:	2200      	movs	r2, #0
 800059a:	2120      	movs	r1, #32
 800059c:	481d      	ldr	r0, [pc, #116]	; (8000614 <MX_GPIO_Init+0xc0>)
 800059e:	f001 fdc0 	bl	8002122 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_LIGHTS_Pin;
 80005a2:	2304      	movs	r3, #4
 80005a4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005a6:	4b1c      	ldr	r3, [pc, #112]	; (8000618 <MX_GPIO_Init+0xc4>)
 80005a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005aa:	2300      	movs	r3, #0
 80005ac:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(BUTTON_LIGHTS_GPIO_Port, &GPIO_InitStruct);
 80005ae:	f107 0308 	add.w	r3, r7, #8
 80005b2:	4619      	mov	r1, r3
 80005b4:	4819      	ldr	r0, [pc, #100]	; (800061c <MX_GPIO_Init+0xc8>)
 80005b6:	f001 fc23 	bl	8001e00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_RESET_Pin;
 80005ba:	2301      	movs	r3, #1
 80005bc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005be:	4b16      	ldr	r3, [pc, #88]	; (8000618 <MX_GPIO_Init+0xc4>)
 80005c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c2:	2300      	movs	r3, #0
 80005c4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(BUTTON_RESET_GPIO_Port, &GPIO_InitStruct);
 80005c6:	f107 0308 	add.w	r3, r7, #8
 80005ca:	4619      	mov	r1, r3
 80005cc:	4811      	ldr	r0, [pc, #68]	; (8000614 <MX_GPIO_Init+0xc0>)
 80005ce:	f001 fc17 	bl	8001e00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_ENGINE_Pin;
 80005d2:	2302      	movs	r3, #2
 80005d4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80005d6:	4b12      	ldr	r3, [pc, #72]	; (8000620 <MX_GPIO_Init+0xcc>)
 80005d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005da:	2300      	movs	r3, #0
 80005dc:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(BUTTON_ENGINE_GPIO_Port, &GPIO_InitStruct);
 80005de:	f107 0308 	add.w	r3, r7, #8
 80005e2:	4619      	mov	r1, r3
 80005e4:	480b      	ldr	r0, [pc, #44]	; (8000614 <MX_GPIO_Init+0xc0>)
 80005e6:	f001 fc0b 	bl	8001e00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_COM_Pin;
 80005ea:	2320      	movs	r3, #32
 80005ec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ee:	2301      	movs	r3, #1
 80005f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f2:	2300      	movs	r3, #0
 80005f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005f6:	2302      	movs	r3, #2
 80005f8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LED_COM_GPIO_Port, &GPIO_InitStruct);
 80005fa:	f107 0308 	add.w	r3, r7, #8
 80005fe:	4619      	mov	r1, r3
 8000600:	4804      	ldr	r0, [pc, #16]	; (8000614 <MX_GPIO_Init+0xc0>)
 8000602:	f001 fbfd 	bl	8001e00 <HAL_GPIO_Init>

}
 8000606:	bf00      	nop
 8000608:	3718      	adds	r7, #24
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	40021000 	.word	0x40021000
 8000614:	40010c00 	.word	0x40010c00
 8000618:	10110000 	.word	0x10110000
 800061c:	40010800 	.word	0x40010800
 8000620:	10310000 	.word	0x10310000

08000624 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b084      	sub	sp, #16
 8000628:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800062a:	f000 fbeb 	bl	8000e04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800062e:	f000 f8fd 	bl	800082c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000632:	f7ff ff8f 	bl	8000554 <MX_GPIO_Init>
  MX_DMA_Init();
 8000636:	f7ff ff77 	bl	8000528 <MX_DMA_Init>
  MX_ADC1_Init();
 800063a:	f7ff febf 	bl	80003bc <MX_ADC1_Init>
  MX_USART1_UART_Init();
 800063e:	f000 fb1b 	bl	8000c78 <MX_USART1_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000642:	f000 f943 	bl	80008cc <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
	HC05_Init(&HC05_1, &huart1);
 8000646:	4965      	ldr	r1, [pc, #404]	; (80007dc <main+0x1b8>)
 8000648:	4865      	ldr	r0, [pc, #404]	; (80007e0 <main+0x1bc>)
 800064a:	f7ff fddf 	bl	800020c <HC05_Init>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADCValue, 2 * 10);
 800064e:	2214      	movs	r2, #20
 8000650:	4964      	ldr	r1, [pc, #400]	; (80007e4 <main+0x1c0>)
 8000652:	4865      	ldr	r0, [pc, #404]	; (80007e8 <main+0x1c4>)
 8000654:	f000 fd34 	bl	80010c0 <HAL_ADC_Start_DMA>
	ReadyToSend = 1;
 8000658:	4b64      	ldr	r3, [pc, #400]	; (80007ec <main+0x1c8>)
 800065a:	2201      	movs	r2, #1
 800065c:	701a      	strb	r2, [r3, #0]
	LightsOn = 0;
 800065e:	4b64      	ldr	r3, [pc, #400]	; (80007f0 <main+0x1cc>)
 8000660:	2200      	movs	r2, #0
 8000662:	701a      	strb	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		// check if there is a acknowledge message from vehicle
		if (HC05_CheckPendingMessages(&HC05_1, MsgBuffer) == HC05_MESSAGEPENDING)
 8000664:	4963      	ldr	r1, [pc, #396]	; (80007f4 <main+0x1d0>)
 8000666:	485e      	ldr	r0, [pc, #376]	; (80007e0 <main+0x1bc>)
 8000668:	f7ff fe11 	bl	800028e <HC05_CheckPendingMessages>
 800066c:	4603      	mov	r3, r0
 800066e:	2b01      	cmp	r3, #1
 8000670:	d116      	bne.n	80006a0 <main+0x7c>
		{
			// clear flag that message is recieved
			HC05_ClearMsgPendingFlag(&HC05_1);
 8000672:	485b      	ldr	r0, [pc, #364]	; (80007e0 <main+0x1bc>)
 8000674:	f7ff fdfe 	bl	8000274 <HC05_ClearMsgPendingFlag>

			// check if message is acknowledge OKAY from vehicle
			if (strcmp((char*) MsgBuffer, "OKAY\n") == 0)
 8000678:	495f      	ldr	r1, [pc, #380]	; (80007f8 <main+0x1d4>)
 800067a:	485e      	ldr	r0, [pc, #376]	; (80007f4 <main+0x1d0>)
 800067c:	f7ff fd66 	bl	800014c <strcmp>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d10c      	bne.n	80006a0 <main+0x7c>
			{
				LastMsgTimer = HAL_GetTick();
 8000686:	f000 fc15 	bl	8000eb4 <HAL_GetTick>
 800068a:	4603      	mov	r3, r0
 800068c:	4a5b      	ldr	r2, [pc, #364]	; (80007fc <main+0x1d8>)
 800068e:	6013      	str	r3, [r2, #0]
				// set flag that will trigger another bluetooth transfer
				ReadyToSend = 1;
 8000690:	4b56      	ldr	r3, [pc, #344]	; (80007ec <main+0x1c8>)
 8000692:	2201      	movs	r2, #1
 8000694:	701a      	strb	r2, [r3, #0]
				// light up LED to see that communication is working
				HAL_GPIO_WritePin(LED_COM_GPIO_Port, LED_COM_Pin,
 8000696:	2201      	movs	r2, #1
 8000698:	2120      	movs	r1, #32
 800069a:	4859      	ldr	r0, [pc, #356]	; (8000800 <main+0x1dc>)
 800069c:	f001 fd41 	bl	8002122 <HAL_GPIO_WritePin>
						GPIO_PIN_SET);
			}
		}

		// reset temporary buffer
		tempADCValueX = 0;
 80006a0:	4b58      	ldr	r3, [pc, #352]	; (8000804 <main+0x1e0>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	801a      	strh	r2, [r3, #0]
		tempADCValueY = 0;
 80006a6:	4b58      	ldr	r3, [pc, #352]	; (8000808 <main+0x1e4>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	801a      	strh	r2, [r3, #0]

		// sum 10 adc samples and put the value into temporary register
		for (uint8_t i = 0; i < 10; i++)
 80006ac:	2300      	movs	r3, #0
 80006ae:	71fb      	strb	r3, [r7, #7]
 80006b0:	e017      	b.n	80006e2 <main+0xbe>
		{
			tempADCValueY += ADCValue[i][0];
 80006b2:	79fb      	ldrb	r3, [r7, #7]
 80006b4:	4a4b      	ldr	r2, [pc, #300]	; (80007e4 <main+0x1c0>)
 80006b6:	f832 2023 	ldrh.w	r2, [r2, r3, lsl #2]
 80006ba:	4b53      	ldr	r3, [pc, #332]	; (8000808 <main+0x1e4>)
 80006bc:	881b      	ldrh	r3, [r3, #0]
 80006be:	4413      	add	r3, r2
 80006c0:	b29a      	uxth	r2, r3
 80006c2:	4b51      	ldr	r3, [pc, #324]	; (8000808 <main+0x1e4>)
 80006c4:	801a      	strh	r2, [r3, #0]
			tempADCValueX += ADCValue[i][1];
 80006c6:	79fb      	ldrb	r3, [r7, #7]
 80006c8:	4a46      	ldr	r2, [pc, #280]	; (80007e4 <main+0x1c0>)
 80006ca:	009b      	lsls	r3, r3, #2
 80006cc:	4413      	add	r3, r2
 80006ce:	885a      	ldrh	r2, [r3, #2]
 80006d0:	4b4c      	ldr	r3, [pc, #304]	; (8000804 <main+0x1e0>)
 80006d2:	881b      	ldrh	r3, [r3, #0]
 80006d4:	4413      	add	r3, r2
 80006d6:	b29a      	uxth	r2, r3
 80006d8:	4b4a      	ldr	r3, [pc, #296]	; (8000804 <main+0x1e0>)
 80006da:	801a      	strh	r2, [r3, #0]
		for (uint8_t i = 0; i < 10; i++)
 80006dc:	79fb      	ldrb	r3, [r7, #7]
 80006de:	3301      	adds	r3, #1
 80006e0:	71fb      	strb	r3, [r7, #7]
 80006e2:	79fb      	ldrb	r3, [r7, #7]
 80006e4:	2b09      	cmp	r3, #9
 80006e6:	d9e4      	bls.n	80006b2 <main+0x8e>
		}

		// if there was acknowledge or it is first transfer then trigger transfer routine
		if (ReadyToSend == 1)
 80006e8:	4b40      	ldr	r3, [pc, #256]	; (80007ec <main+0x1c8>)
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	b2db      	uxtb	r3, r3
 80006ee:	2b01      	cmp	r3, #1
 80006f0:	d157      	bne.n	80007a2 <main+0x17e>
		{
			// reset flag
			ReadyToSend = 0;
 80006f2:	4b3e      	ldr	r3, [pc, #248]	; (80007ec <main+0x1c8>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	701a      	strb	r2, [r3, #0]
			// calculate average value x and y from ADC
			ADCValueAvgX = tempADCValueX / 10;
 80006f8:	4b42      	ldr	r3, [pc, #264]	; (8000804 <main+0x1e0>)
 80006fa:	881b      	ldrh	r3, [r3, #0]
 80006fc:	4a43      	ldr	r2, [pc, #268]	; (800080c <main+0x1e8>)
 80006fe:	fba2 2303 	umull	r2, r3, r2, r3
 8000702:	08db      	lsrs	r3, r3, #3
 8000704:	b29a      	uxth	r2, r3
 8000706:	4b42      	ldr	r3, [pc, #264]	; (8000810 <main+0x1ec>)
 8000708:	801a      	strh	r2, [r3, #0]
			ADCValueAvgY = tempADCValueY / 10;
 800070a:	4b3f      	ldr	r3, [pc, #252]	; (8000808 <main+0x1e4>)
 800070c:	881b      	ldrh	r3, [r3, #0]
 800070e:	4a3f      	ldr	r2, [pc, #252]	; (800080c <main+0x1e8>)
 8000710:	fba2 2303 	umull	r2, r3, r2, r3
 8000714:	08db      	lsrs	r3, r3, #3
 8000716:	b29a      	uxth	r2, r3
 8000718:	4b3e      	ldr	r3, [pc, #248]	; (8000814 <main+0x1f0>)
 800071a:	801a      	strh	r2, [r3, #0]

			// map ADC X value 0-4095 to servo PWM value 2333-3666 (60-120) degrees
			ServoPositionX = map(ADCValueAvgX, 0, 4095, SERVO_LOW_LIMIT,
 800071c:	4b3c      	ldr	r3, [pc, #240]	; (8000810 <main+0x1ec>)
 800071e:	8818      	ldrh	r0, [r3, #0]
 8000720:	f640 6338 	movw	r3, #3640	; 0xe38
 8000724:	9300      	str	r3, [sp, #0]
 8000726:	f44f 6311 	mov.w	r3, #2320	; 0x910
 800072a:	f640 72ff 	movw	r2, #4095	; 0xfff
 800072e:	2100      	movs	r1, #0
 8000730:	f000 f900 	bl	8000934 <map>
 8000734:	4603      	mov	r3, r0
 8000736:	461a      	mov	r2, r3
 8000738:	4b37      	ldr	r3, [pc, #220]	; (8000818 <main+0x1f4>)
 800073a:	801a      	strh	r2, [r3, #0]
			SERVO_HIGH_LIMIT);

			// map ADC Y value 0-4095 to servo PWM value 0-40000
			MotorSpeedY = map(ADCValueAvgY, 0, 4095, MOTOR_LOW_LIMIT,
 800073c:	4b35      	ldr	r3, [pc, #212]	; (8000814 <main+0x1f0>)
 800073e:	8818      	ldrh	r0, [r3, #0]
 8000740:	f649 4340 	movw	r3, #40000	; 0x9c40
 8000744:	9300      	str	r3, [sp, #0]
 8000746:	2300      	movs	r3, #0
 8000748:	f640 72ff 	movw	r2, #4095	; 0xfff
 800074c:	2100      	movs	r1, #0
 800074e:	f000 f8f1 	bl	8000934 <map>
 8000752:	4603      	mov	r3, r0
 8000754:	461a      	mov	r2, r3
 8000756:	4b31      	ldr	r3, [pc, #196]	; (800081c <main+0x1f8>)
 8000758:	801a      	strh	r2, [r3, #0]
			MOTOR_HIGH_LIMIT);

			// variable to save lenght of message
			uint8_t len = 0;
 800075a:	2300      	movs	r3, #0
 800075c:	71bb      	strb	r3, [r7, #6]
			// prepare command ACK;<ServoPosition>;<MotorSpeed>;<FrontLEDsON>;<MotorONOff>;
			len = sprintf((char*) MsgBuffer, "ACK;%d;%d;%d;%d;\n",
 800075e:	4b2e      	ldr	r3, [pc, #184]	; (8000818 <main+0x1f4>)
 8000760:	881b      	ldrh	r3, [r3, #0]
 8000762:	4619      	mov	r1, r3
 8000764:	4b2d      	ldr	r3, [pc, #180]	; (800081c <main+0x1f8>)
 8000766:	881b      	ldrh	r3, [r3, #0]
 8000768:	4618      	mov	r0, r3
 800076a:	4b21      	ldr	r3, [pc, #132]	; (80007f0 <main+0x1cc>)
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	b2db      	uxtb	r3, r3
 8000770:	461a      	mov	r2, r3
 8000772:	4b2b      	ldr	r3, [pc, #172]	; (8000820 <main+0x1fc>)
 8000774:	781b      	ldrb	r3, [r3, #0]
 8000776:	b2db      	uxtb	r3, r3
 8000778:	9301      	str	r3, [sp, #4]
 800077a:	9200      	str	r2, [sp, #0]
 800077c:	4603      	mov	r3, r0
 800077e:	460a      	mov	r2, r1
 8000780:	4928      	ldr	r1, [pc, #160]	; (8000824 <main+0x200>)
 8000782:	481c      	ldr	r0, [pc, #112]	; (80007f4 <main+0x1d0>)
 8000784:	f003 f84e 	bl	8003824 <siprintf>
 8000788:	4603      	mov	r3, r0
 800078a:	71bb      	strb	r3, [r7, #6]
					ServoPositionX, MotorSpeedY, LightsOn, MotorOn);
			// send command to vehicle
			HAL_UART_Transmit(&huart1, MsgBuffer, len, 1000);
 800078c:	79bb      	ldrb	r3, [r7, #6]
 800078e:	b29a      	uxth	r2, r3
 8000790:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000794:	4917      	ldr	r1, [pc, #92]	; (80007f4 <main+0x1d0>)
 8000796:	4811      	ldr	r0, [pc, #68]	; (80007dc <main+0x1b8>)
 8000798:	f002 fa11 	bl	8002bbe <HAL_UART_Transmit>
			// wait 80 ms before next transfer
			HAL_Delay(80);
 800079c:	2050      	movs	r0, #80	; 0x50
 800079e:	f000 fb93 	bl	8000ec8 <HAL_Delay>
		}

		// if there was no communication for 3s
		if ((HAL_GetTick() - LastMsgTimer) > 3000)
 80007a2:	f000 fb87 	bl	8000eb4 <HAL_GetTick>
 80007a6:	4602      	mov	r2, r0
 80007a8:	4b14      	ldr	r3, [pc, #80]	; (80007fc <main+0x1d8>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	1ad3      	subs	r3, r2, r3
 80007ae:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80007b2:	4293      	cmp	r3, r2
 80007b4:	f67f af56 	bls.w	8000664 <main+0x40>
		{
			//reset LED
			HAL_GPIO_WritePin(LED_COM_GPIO_Port, LED_COM_Pin, GPIO_PIN_RESET);
 80007b8:	2200      	movs	r2, #0
 80007ba:	2120      	movs	r1, #32
 80007bc:	4810      	ldr	r0, [pc, #64]	; (8000800 <main+0x1dc>)
 80007be:	f001 fcb0 	bl	8002122 <HAL_GPIO_WritePin>

			//flush ring buffer
			RB_Flush(&(HC05_1.RingBuffer));
 80007c2:	4819      	ldr	r0, [pc, #100]	; (8000828 <main+0x204>)
 80007c4:	f000 f97e 	bl	8000ac4 <RB_Flush>
			//send new message command
			ReadyToSend = 1;
 80007c8:	4b08      	ldr	r3, [pc, #32]	; (80007ec <main+0x1c8>)
 80007ca:	2201      	movs	r2, #1
 80007cc:	701a      	strb	r2, [r3, #0]
			//feed timer
			LastMsgTimer = HAL_GetTick();
 80007ce:	f000 fb71 	bl	8000eb4 <HAL_GetTick>
 80007d2:	4603      	mov	r3, r0
 80007d4:	4a09      	ldr	r2, [pc, #36]	; (80007fc <main+0x1d8>)
 80007d6:	6013      	str	r3, [r2, #0]
		if (HC05_CheckPendingMessages(&HC05_1, MsgBuffer) == HC05_MESSAGEPENDING)
 80007d8:	e744      	b.n	8000664 <main+0x40>
 80007da:	bf00      	nop
 80007dc:	20000298 	.word	0x20000298
 80007e0:	2000015c 	.word	0x2000015c
 80007e4:	20000228 	.word	0x20000228
 80007e8:	2000009c 	.word	0x2000009c
 80007ec:	20000111 	.word	0x20000111
 80007f0:	20000110 	.word	0x20000110
 80007f4:	2000011c 	.word	0x2000011c
 80007f8:	080042ec 	.word	0x080042ec
 80007fc:	2000008c 	.word	0x2000008c
 8000800:	40010c00 	.word	0x40010c00
 8000804:	2000011a 	.word	0x2000011a
 8000808:	20000116 	.word	0x20000116
 800080c:	cccccccd 	.word	0xcccccccd
 8000810:	20000112 	.word	0x20000112
 8000814:	20000250 	.word	0x20000250
 8000818:	20000252 	.word	0x20000252
 800081c:	20000114 	.word	0x20000114
 8000820:	20000118 	.word	0x20000118
 8000824:	080042f4 	.word	0x080042f4
 8000828:	200001a2 	.word	0x200001a2

0800082c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b094      	sub	sp, #80	; 0x50
 8000830:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000832:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000836:	2228      	movs	r2, #40	; 0x28
 8000838:	2100      	movs	r1, #0
 800083a:	4618      	mov	r0, r3
 800083c:	f002 ffea 	bl	8003814 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000840:	f107 0314 	add.w	r3, r7, #20
 8000844:	2200      	movs	r2, #0
 8000846:	601a      	str	r2, [r3, #0]
 8000848:	605a      	str	r2, [r3, #4]
 800084a:	609a      	str	r2, [r3, #8]
 800084c:	60da      	str	r2, [r3, #12]
 800084e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000850:	1d3b      	adds	r3, r7, #4
 8000852:	2200      	movs	r2, #0
 8000854:	601a      	str	r2, [r3, #0]
 8000856:	605a      	str	r2, [r3, #4]
 8000858:	609a      	str	r2, [r3, #8]
 800085a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800085c:	2302      	movs	r3, #2
 800085e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000860:	2301      	movs	r3, #1
 8000862:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000864:	2310      	movs	r3, #16
 8000866:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000868:	2300      	movs	r3, #0
 800086a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800086c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000870:	4618      	mov	r0, r3
 8000872:	f001 fc87 	bl	8002184 <HAL_RCC_OscConfig>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <SystemClock_Config+0x54>
  {
    Error_Handler();
 800087c:	f000 f8c6 	bl	8000a0c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000880:	230f      	movs	r3, #15
 8000882:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000884:	2300      	movs	r3, #0
 8000886:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000888:	2300      	movs	r3, #0
 800088a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800088c:	2300      	movs	r3, #0
 800088e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000890:	2300      	movs	r3, #0
 8000892:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000894:	f107 0314 	add.w	r3, r7, #20
 8000898:	2100      	movs	r1, #0
 800089a:	4618      	mov	r0, r3
 800089c:	f001 fef2 	bl	8002684 <HAL_RCC_ClockConfig>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80008a6:	f000 f8b1 	bl	8000a0c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80008aa:	2302      	movs	r3, #2
 80008ac:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80008ae:	2300      	movs	r3, #0
 80008b0:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008b2:	1d3b      	adds	r3, r7, #4
 80008b4:	4618      	mov	r0, r3
 80008b6:	f002 f87f 	bl	80029b8 <HAL_RCCEx_PeriphCLKConfig>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80008c0:	f000 f8a4 	bl	8000a0c <Error_Handler>
  }
}
 80008c4:	bf00      	nop
 80008c6:	3750      	adds	r7, #80	; 0x50
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}

080008cc <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80008d0:	2200      	movs	r2, #0
 80008d2:	2100      	movs	r1, #0
 80008d4:	2025      	movs	r0, #37	; 0x25
 80008d6:	f000 ffbe 	bl	8001856 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 80008da:	2025      	movs	r0, #37	; 0x25
 80008dc:	f000 ffd7 	bl	800188e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80008e0:	2200      	movs	r2, #0
 80008e2:	2100      	movs	r1, #0
 80008e4:	200f      	movs	r0, #15
 80008e6:	f000 ffb6 	bl	8001856 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80008ea:	200f      	movs	r0, #15
 80008ec:	f000 ffcf 	bl	800188e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80008f0:	2200      	movs	r2, #0
 80008f2:	2100      	movs	r1, #0
 80008f4:	200b      	movs	r0, #11
 80008f6:	f000 ffae 	bl	8001856 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80008fa:	200b      	movs	r0, #11
 80008fc:	f000 ffc7 	bl	800188e <HAL_NVIC_EnableIRQ>
  /* EXTI2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000900:	2200      	movs	r2, #0
 8000902:	2100      	movs	r1, #0
 8000904:	2008      	movs	r0, #8
 8000906:	f000 ffa6 	bl	8001856 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800090a:	2008      	movs	r0, #8
 800090c:	f000 ffbf 	bl	800188e <HAL_NVIC_EnableIRQ>
  /* EXTI1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000910:	2200      	movs	r2, #0
 8000912:	2100      	movs	r1, #0
 8000914:	2007      	movs	r0, #7
 8000916:	f000 ff9e 	bl	8001856 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800091a:	2007      	movs	r0, #7
 800091c:	f000 ffb7 	bl	800188e <HAL_NVIC_EnableIRQ>
  /* EXTI0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000920:	2200      	movs	r2, #0
 8000922:	2100      	movs	r1, #0
 8000924:	2006      	movs	r0, #6
 8000926:	f000 ff96 	bl	8001856 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800092a:	2006      	movs	r0, #6
 800092c:	f000 ffaf 	bl	800188e <HAL_NVIC_EnableIRQ>
}
 8000930:	bf00      	nop
 8000932:	bd80      	pop	{r7, pc}

08000934 <map>:

/* USER CODE BEGIN 4 */
uint16_t map(uint16_t x, uint16_t in_min, uint16_t in_max, uint16_t out_min,
		uint16_t out_max)
{
 8000934:	b490      	push	{r4, r7}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
 800093a:	4604      	mov	r4, r0
 800093c:	4608      	mov	r0, r1
 800093e:	4611      	mov	r1, r2
 8000940:	461a      	mov	r2, r3
 8000942:	4623      	mov	r3, r4
 8000944:	80fb      	strh	r3, [r7, #6]
 8000946:	4603      	mov	r3, r0
 8000948:	80bb      	strh	r3, [r7, #4]
 800094a:	460b      	mov	r3, r1
 800094c:	807b      	strh	r3, [r7, #2]
 800094e:	4613      	mov	r3, r2
 8000950:	803b      	strh	r3, [r7, #0]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8000952:	88fa      	ldrh	r2, [r7, #6]
 8000954:	88bb      	ldrh	r3, [r7, #4]
 8000956:	1ad3      	subs	r3, r2, r3
 8000958:	8a39      	ldrh	r1, [r7, #16]
 800095a:	883a      	ldrh	r2, [r7, #0]
 800095c:	1a8a      	subs	r2, r1, r2
 800095e:	fb02 f203 	mul.w	r2, r2, r3
 8000962:	8879      	ldrh	r1, [r7, #2]
 8000964:	88bb      	ldrh	r3, [r7, #4]
 8000966:	1acb      	subs	r3, r1, r3
 8000968:	fb92 f3f3 	sdiv	r3, r2, r3
 800096c:	b29a      	uxth	r2, r3
 800096e:	883b      	ldrh	r3, [r7, #0]
 8000970:	4413      	add	r3, r2
 8000972:	b29b      	uxth	r3, r3
}
 8000974:	4618      	mov	r0, r3
 8000976:	3708      	adds	r7, #8
 8000978:	46bd      	mov	sp, r7
 800097a:	bc90      	pop	{r4, r7}
 800097c:	4770      	bx	lr
	...

08000980 <HAL_UARTEx_RxEventCallback>:

#if (HC05_UART_RX_DMA == 1)
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
 8000988:	460b      	mov	r3, r1
 800098a:	807b      	strh	r3, [r7, #2]
	// Callback from BT module
	HC05_RxCpltCallbackDMA(&HC05_1, huart, Size);
 800098c:	887b      	ldrh	r3, [r7, #2]
 800098e:	461a      	mov	r2, r3
 8000990:	6879      	ldr	r1, [r7, #4]
 8000992:	4803      	ldr	r0, [pc, #12]	; (80009a0 <HAL_UARTEx_RxEventCallback+0x20>)
 8000994:	f7ff fcc0 	bl	8000318 <HC05_RxCpltCallbackDMA>

}
 8000998:	bf00      	nop
 800099a:	3708      	adds	r7, #8
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	2000015c 	.word	0x2000015c

080009a4 <HAL_GPIO_EXTI_Callback>:
#endif

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	4603      	mov	r3, r0
 80009ac:	80fb      	strh	r3, [r7, #6]
	// if button is clicked then set flag (restart transfer)
	if (GPIO_Pin == GPIO_PIN_0)
 80009ae:	88fb      	ldrh	r3, [r7, #6]
 80009b0:	2b01      	cmp	r3, #1
 80009b2:	d102      	bne.n	80009ba <HAL_GPIO_EXTI_Callback+0x16>
	{
		ReadyToSend = 1;
 80009b4:	4b11      	ldr	r3, [pc, #68]	; (80009fc <HAL_GPIO_EXTI_Callback+0x58>)
 80009b6:	2201      	movs	r2, #1
 80009b8:	701a      	strb	r2, [r3, #0]
	}

	// if lights button is pressed
	if (GPIO_Pin == GPIO_PIN_2)
 80009ba:	88fb      	ldrh	r3, [r7, #6]
 80009bc:	2b04      	cmp	r3, #4
 80009be:	d107      	bne.n	80009d0 <HAL_GPIO_EXTI_Callback+0x2c>
	{
		// toggle lights
		LightsOn ^= 0x01;
 80009c0:	4b0f      	ldr	r3, [pc, #60]	; (8000a00 <HAL_GPIO_EXTI_Callback+0x5c>)
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	b2db      	uxtb	r3, r3
 80009c6:	f083 0301 	eor.w	r3, r3, #1
 80009ca:	b2da      	uxtb	r2, r3
 80009cc:	4b0c      	ldr	r3, [pc, #48]	; (8000a00 <HAL_GPIO_EXTI_Callback+0x5c>)
 80009ce:	701a      	strb	r2, [r3, #0]

	}

	// if motor button is pressed
	if (GPIO_Pin == GPIO_PIN_1)
 80009d0:	88fb      	ldrh	r3, [r7, #6]
 80009d2:	2b02      	cmp	r3, #2
 80009d4:	d10d      	bne.n	80009f2 <HAL_GPIO_EXTI_Callback+0x4e>
	{
		// when not pressed (its pulled up) turn off motor
		if (HAL_GPIO_ReadPin(BUTTON_ENGINE_GPIO_Port, BUTTON_ENGINE_Pin)
 80009d6:	2102      	movs	r1, #2
 80009d8:	480a      	ldr	r0, [pc, #40]	; (8000a04 <HAL_GPIO_EXTI_Callback+0x60>)
 80009da:	f001 fb8b 	bl	80020f4 <HAL_GPIO_ReadPin>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b01      	cmp	r3, #1
 80009e2:	d103      	bne.n	80009ec <HAL_GPIO_EXTI_Callback+0x48>
				== GPIO_PIN_SET)
		{
			MotorOn = 0;
 80009e4:	4b08      	ldr	r3, [pc, #32]	; (8000a08 <HAL_GPIO_EXTI_Callback+0x64>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	701a      	strb	r2, [r3, #0]
		else
		{
			MotorOn = 1;
		}
	}
}
 80009ea:	e002      	b.n	80009f2 <HAL_GPIO_EXTI_Callback+0x4e>
			MotorOn = 1;
 80009ec:	4b06      	ldr	r3, [pc, #24]	; (8000a08 <HAL_GPIO_EXTI_Callback+0x64>)
 80009ee:	2201      	movs	r2, #1
 80009f0:	701a      	strb	r2, [r3, #0]
}
 80009f2:	bf00      	nop
 80009f4:	3708      	adds	r7, #8
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	20000111 	.word	0x20000111
 8000a00:	20000110 	.word	0x20000110
 8000a04:	40010c00 	.word	0x40010c00
 8000a08:	20000118 	.word	0x20000118

08000a0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a10:	b672      	cpsid	i
}
 8000a12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a14:	e7fe      	b.n	8000a14 <Error_Handler+0x8>

08000a16 <RB_Read>:
 */

#include "ringbuffer.h"

RB_Status RB_Read(Ringbuffer_t *buffer, uint8_t *value)
{
 8000a16:	b480      	push	{r7}
 8000a18:	b083      	sub	sp, #12
 8000a1a:	af00      	add	r7, sp, #0
 8000a1c:	6078      	str	r0, [r7, #4]
 8000a1e:	6039      	str	r1, [r7, #0]
	if(buffer->Head == buffer->Tail)
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	f8b3 2080 	ldrh.w	r2, [r3, #128]	; 0x80
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8000a2c:	429a      	cmp	r2, r3
 8000a2e:	d101      	bne.n	8000a34 <RB_Read+0x1e>
	{
		return RB_ERROR;
 8000a30:	2301      	movs	r3, #1
 8000a32:	e017      	b.n	8000a64 <RB_Read+0x4e>
	}

	*value = buffer->buffer[buffer->Tail];
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8000a3a:	461a      	mov	r2, r3
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	5c9a      	ldrb	r2, [r3, r2]
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	701a      	strb	r2, [r3, #0]

	buffer->Tail = (buffer->Tail + 1) % RING_BUFFER_SIZE;
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8000a4a:	3301      	adds	r3, #1
 8000a4c:	425a      	negs	r2, r3
 8000a4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000a52:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000a56:	bf58      	it	pl
 8000a58:	4253      	negpl	r3, r2
 8000a5a:	b29a      	uxth	r2, r3
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82

	return RB_OK;
 8000a62:	2300      	movs	r3, #0
}
 8000a64:	4618      	mov	r0, r3
 8000a66:	370c      	adds	r7, #12
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bc80      	pop	{r7}
 8000a6c:	4770      	bx	lr

08000a6e <RB_Write>:

RB_Status RB_Write(Ringbuffer_t *buffer, uint8_t value)
{
 8000a6e:	b480      	push	{r7}
 8000a70:	b085      	sub	sp, #20
 8000a72:	af00      	add	r7, sp, #0
 8000a74:	6078      	str	r0, [r7, #4]
 8000a76:	460b      	mov	r3, r1
 8000a78:	70fb      	strb	r3, [r7, #3]

	uint16_t HeadTmp;
	HeadTmp = (buffer->Head + 1) % RING_BUFFER_SIZE;
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8000a80:	3301      	adds	r3, #1
 8000a82:	425a      	negs	r2, r3
 8000a84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000a88:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000a8c:	bf58      	it	pl
 8000a8e:	4253      	negpl	r3, r2
 8000a90:	81fb      	strh	r3, [r7, #14]

	if (HeadTmp == buffer->Tail)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8000a98:	89fa      	ldrh	r2, [r7, #14]
 8000a9a:	429a      	cmp	r2, r3
 8000a9c:	d101      	bne.n	8000aa2 <RB_Write+0x34>
	{
		return RB_ERROR;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	e00b      	b.n	8000aba <RB_Write+0x4c>
	}

	buffer->buffer[buffer->Head] = value;
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	78fa      	ldrb	r2, [r7, #3]
 8000aae:	545a      	strb	r2, [r3, r1]
	buffer->Head = HeadTmp;
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	89fa      	ldrh	r2, [r7, #14]
 8000ab4:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80

	return RB_OK;
 8000ab8:	2300      	movs	r3, #0
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	3714      	adds	r7, #20
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bc80      	pop	{r7}
 8000ac2:	4770      	bx	lr

08000ac4 <RB_Flush>:

void RB_Flush(Ringbuffer_t *buffer)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b083      	sub	sp, #12
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
	buffer->Head = 0;
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	2200      	movs	r2, #0
 8000ad0:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
	buffer->Tail = 0;
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
}
 8000adc:	bf00      	nop
 8000ade:	370c      	adds	r7, #12
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bc80      	pop	{r7}
 8000ae4:	4770      	bx	lr
	...

08000ae8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b085      	sub	sp, #20
 8000aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000aee:	4b15      	ldr	r3, [pc, #84]	; (8000b44 <HAL_MspInit+0x5c>)
 8000af0:	699b      	ldr	r3, [r3, #24]
 8000af2:	4a14      	ldr	r2, [pc, #80]	; (8000b44 <HAL_MspInit+0x5c>)
 8000af4:	f043 0301 	orr.w	r3, r3, #1
 8000af8:	6193      	str	r3, [r2, #24]
 8000afa:	4b12      	ldr	r3, [pc, #72]	; (8000b44 <HAL_MspInit+0x5c>)
 8000afc:	699b      	ldr	r3, [r3, #24]
 8000afe:	f003 0301 	and.w	r3, r3, #1
 8000b02:	60bb      	str	r3, [r7, #8]
 8000b04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b06:	4b0f      	ldr	r3, [pc, #60]	; (8000b44 <HAL_MspInit+0x5c>)
 8000b08:	69db      	ldr	r3, [r3, #28]
 8000b0a:	4a0e      	ldr	r2, [pc, #56]	; (8000b44 <HAL_MspInit+0x5c>)
 8000b0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b10:	61d3      	str	r3, [r2, #28]
 8000b12:	4b0c      	ldr	r3, [pc, #48]	; (8000b44 <HAL_MspInit+0x5c>)
 8000b14:	69db      	ldr	r3, [r3, #28]
 8000b16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b1a:	607b      	str	r3, [r7, #4]
 8000b1c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000b1e:	4b0a      	ldr	r3, [pc, #40]	; (8000b48 <HAL_MspInit+0x60>)
 8000b20:	685b      	ldr	r3, [r3, #4]
 8000b22:	60fb      	str	r3, [r7, #12]
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000b2a:	60fb      	str	r3, [r7, #12]
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b32:	60fb      	str	r3, [r7, #12]
 8000b34:	4a04      	ldr	r2, [pc, #16]	; (8000b48 <HAL_MspInit+0x60>)
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b3a:	bf00      	nop
 8000b3c:	3714      	adds	r7, #20
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bc80      	pop	{r7}
 8000b42:	4770      	bx	lr
 8000b44:	40021000 	.word	0x40021000
 8000b48:	40010000 	.word	0x40010000

08000b4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b50:	e7fe      	b.n	8000b50 <NMI_Handler+0x4>

08000b52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b52:	b480      	push	{r7}
 8000b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b56:	e7fe      	b.n	8000b56 <HardFault_Handler+0x4>

08000b58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b5c:	e7fe      	b.n	8000b5c <MemManage_Handler+0x4>

08000b5e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b5e:	b480      	push	{r7}
 8000b60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b62:	e7fe      	b.n	8000b62 <BusFault_Handler+0x4>

08000b64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b68:	e7fe      	b.n	8000b68 <UsageFault_Handler+0x4>

08000b6a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b6a:	b480      	push	{r7}
 8000b6c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b6e:	bf00      	nop
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bc80      	pop	{r7}
 8000b74:	4770      	bx	lr

08000b76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b76:	b480      	push	{r7}
 8000b78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b7a:	bf00      	nop
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bc80      	pop	{r7}
 8000b80:	4770      	bx	lr

08000b82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b82:	b480      	push	{r7}
 8000b84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b86:	bf00      	nop
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bc80      	pop	{r7}
 8000b8c:	4770      	bx	lr

08000b8e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b8e:	b580      	push	{r7, lr}
 8000b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b92:	f000 f97d 	bl	8000e90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b96:	bf00      	nop
 8000b98:	bd80      	pop	{r7, pc}

08000b9a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000b9a:	b580      	push	{r7, lr}
 8000b9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000b9e:	2001      	movs	r0, #1
 8000ba0:	f001 fad8 	bl	8002154 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000ba4:	bf00      	nop
 8000ba6:	bd80      	pop	{r7, pc}

08000ba8 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000bac:	2002      	movs	r0, #2
 8000bae:	f001 fad1 	bl	8002154 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	bd80      	pop	{r7, pc}

08000bb6 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000bb6:	b580      	push	{r7, lr}
 8000bb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8000bba:	2004      	movs	r0, #4
 8000bbc:	f001 faca 	bl	8002154 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000bc0:	bf00      	nop
 8000bc2:	bd80      	pop	{r7, pc}

08000bc4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000bc8:	4802      	ldr	r0, [pc, #8]	; (8000bd4 <DMA1_Channel1_IRQHandler+0x10>)
 8000bca:	f000 ffe5 	bl	8001b98 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000bce:	bf00      	nop
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	200000cc 	.word	0x200000cc

08000bd8 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000bdc:	4802      	ldr	r0, [pc, #8]	; (8000be8 <DMA1_Channel5_IRQHandler+0x10>)
 8000bde:	f000 ffdb 	bl	8001b98 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000be2:	bf00      	nop
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	20000254 	.word	0x20000254

08000bec <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000bf0:	4802      	ldr	r0, [pc, #8]	; (8000bfc <USART1_IRQHandler+0x10>)
 8000bf2:	f002 f8c5 	bl	8002d80 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000bf6:	bf00      	nop
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	20000298 	.word	0x20000298

08000c00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b086      	sub	sp, #24
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c08:	4a14      	ldr	r2, [pc, #80]	; (8000c5c <_sbrk+0x5c>)
 8000c0a:	4b15      	ldr	r3, [pc, #84]	; (8000c60 <_sbrk+0x60>)
 8000c0c:	1ad3      	subs	r3, r2, r3
 8000c0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c14:	4b13      	ldr	r3, [pc, #76]	; (8000c64 <_sbrk+0x64>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d102      	bne.n	8000c22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c1c:	4b11      	ldr	r3, [pc, #68]	; (8000c64 <_sbrk+0x64>)
 8000c1e:	4a12      	ldr	r2, [pc, #72]	; (8000c68 <_sbrk+0x68>)
 8000c20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c22:	4b10      	ldr	r3, [pc, #64]	; (8000c64 <_sbrk+0x64>)
 8000c24:	681a      	ldr	r2, [r3, #0]
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	4413      	add	r3, r2
 8000c2a:	693a      	ldr	r2, [r7, #16]
 8000c2c:	429a      	cmp	r2, r3
 8000c2e:	d207      	bcs.n	8000c40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c30:	f002 fdc6 	bl	80037c0 <__errno>
 8000c34:	4603      	mov	r3, r0
 8000c36:	220c      	movs	r2, #12
 8000c38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c3a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c3e:	e009      	b.n	8000c54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c40:	4b08      	ldr	r3, [pc, #32]	; (8000c64 <_sbrk+0x64>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c46:	4b07      	ldr	r3, [pc, #28]	; (8000c64 <_sbrk+0x64>)
 8000c48:	681a      	ldr	r2, [r3, #0]
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	4413      	add	r3, r2
 8000c4e:	4a05      	ldr	r2, [pc, #20]	; (8000c64 <_sbrk+0x64>)
 8000c50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c52:	68fb      	ldr	r3, [r7, #12]
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	3718      	adds	r7, #24
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	20002800 	.word	0x20002800
 8000c60:	00000400 	.word	0x00000400
 8000c64:	20000090 	.word	0x20000090
 8000c68:	200002f0 	.word	0x200002f0

08000c6c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c70:	bf00      	nop
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bc80      	pop	{r7}
 8000c76:	4770      	bx	lr

08000c78 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c7c:	4b11      	ldr	r3, [pc, #68]	; (8000cc4 <MX_USART1_UART_Init+0x4c>)
 8000c7e:	4a12      	ldr	r2, [pc, #72]	; (8000cc8 <MX_USART1_UART_Init+0x50>)
 8000c80:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8000c82:	4b10      	ldr	r3, [pc, #64]	; (8000cc4 <MX_USART1_UART_Init+0x4c>)
 8000c84:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000c88:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c8a:	4b0e      	ldr	r3, [pc, #56]	; (8000cc4 <MX_USART1_UART_Init+0x4c>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c90:	4b0c      	ldr	r3, [pc, #48]	; (8000cc4 <MX_USART1_UART_Init+0x4c>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c96:	4b0b      	ldr	r3, [pc, #44]	; (8000cc4 <MX_USART1_UART_Init+0x4c>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c9c:	4b09      	ldr	r3, [pc, #36]	; (8000cc4 <MX_USART1_UART_Init+0x4c>)
 8000c9e:	220c      	movs	r2, #12
 8000ca0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ca2:	4b08      	ldr	r3, [pc, #32]	; (8000cc4 <MX_USART1_UART_Init+0x4c>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ca8:	4b06      	ldr	r3, [pc, #24]	; (8000cc4 <MX_USART1_UART_Init+0x4c>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000cae:	4805      	ldr	r0, [pc, #20]	; (8000cc4 <MX_USART1_UART_Init+0x4c>)
 8000cb0:	f001 ff38 	bl	8002b24 <HAL_UART_Init>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000cba:	f7ff fea7 	bl	8000a0c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000cbe:	bf00      	nop
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	20000298 	.word	0x20000298
 8000cc8:	40013800 	.word	0x40013800

08000ccc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b088      	sub	sp, #32
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd4:	f107 0310 	add.w	r3, r7, #16
 8000cd8:	2200      	movs	r2, #0
 8000cda:	601a      	str	r2, [r3, #0]
 8000cdc:	605a      	str	r2, [r3, #4]
 8000cde:	609a      	str	r2, [r3, #8]
 8000ce0:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4a2f      	ldr	r2, [pc, #188]	; (8000da4 <HAL_UART_MspInit+0xd8>)
 8000ce8:	4293      	cmp	r3, r2
 8000cea:	d157      	bne.n	8000d9c <HAL_UART_MspInit+0xd0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000cec:	4b2e      	ldr	r3, [pc, #184]	; (8000da8 <HAL_UART_MspInit+0xdc>)
 8000cee:	699b      	ldr	r3, [r3, #24]
 8000cf0:	4a2d      	ldr	r2, [pc, #180]	; (8000da8 <HAL_UART_MspInit+0xdc>)
 8000cf2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cf6:	6193      	str	r3, [r2, #24]
 8000cf8:	4b2b      	ldr	r3, [pc, #172]	; (8000da8 <HAL_UART_MspInit+0xdc>)
 8000cfa:	699b      	ldr	r3, [r3, #24]
 8000cfc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d00:	60fb      	str	r3, [r7, #12]
 8000d02:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d04:	4b28      	ldr	r3, [pc, #160]	; (8000da8 <HAL_UART_MspInit+0xdc>)
 8000d06:	699b      	ldr	r3, [r3, #24]
 8000d08:	4a27      	ldr	r2, [pc, #156]	; (8000da8 <HAL_UART_MspInit+0xdc>)
 8000d0a:	f043 0304 	orr.w	r3, r3, #4
 8000d0e:	6193      	str	r3, [r2, #24]
 8000d10:	4b25      	ldr	r3, [pc, #148]	; (8000da8 <HAL_UART_MspInit+0xdc>)
 8000d12:	699b      	ldr	r3, [r3, #24]
 8000d14:	f003 0304 	and.w	r3, r3, #4
 8000d18:	60bb      	str	r3, [r7, #8]
 8000d1a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000d1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d20:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d22:	2302      	movs	r3, #2
 8000d24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d26:	2303      	movs	r3, #3
 8000d28:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d2a:	f107 0310 	add.w	r3, r7, #16
 8000d2e:	4619      	mov	r1, r3
 8000d30:	481e      	ldr	r0, [pc, #120]	; (8000dac <HAL_UART_MspInit+0xe0>)
 8000d32:	f001 f865 	bl	8001e00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d3a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d40:	2300      	movs	r3, #0
 8000d42:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d44:	f107 0310 	add.w	r3, r7, #16
 8000d48:	4619      	mov	r1, r3
 8000d4a:	4818      	ldr	r0, [pc, #96]	; (8000dac <HAL_UART_MspInit+0xe0>)
 8000d4c:	f001 f858 	bl	8001e00 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8000d50:	4b17      	ldr	r3, [pc, #92]	; (8000db0 <HAL_UART_MspInit+0xe4>)
 8000d52:	4a18      	ldr	r2, [pc, #96]	; (8000db4 <HAL_UART_MspInit+0xe8>)
 8000d54:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d56:	4b16      	ldr	r3, [pc, #88]	; (8000db0 <HAL_UART_MspInit+0xe4>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d5c:	4b14      	ldr	r3, [pc, #80]	; (8000db0 <HAL_UART_MspInit+0xe4>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000d62:	4b13      	ldr	r3, [pc, #76]	; (8000db0 <HAL_UART_MspInit+0xe4>)
 8000d64:	2280      	movs	r2, #128	; 0x80
 8000d66:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d68:	4b11      	ldr	r3, [pc, #68]	; (8000db0 <HAL_UART_MspInit+0xe4>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d6e:	4b10      	ldr	r3, [pc, #64]	; (8000db0 <HAL_UART_MspInit+0xe4>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000d74:	4b0e      	ldr	r3, [pc, #56]	; (8000db0 <HAL_UART_MspInit+0xe4>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000d7a:	4b0d      	ldr	r3, [pc, #52]	; (8000db0 <HAL_UART_MspInit+0xe4>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000d80:	480b      	ldr	r0, [pc, #44]	; (8000db0 <HAL_UART_MspInit+0xe4>)
 8000d82:	f000 fd9f 	bl	80018c4 <HAL_DMA_Init>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d001      	beq.n	8000d90 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8000d8c:	f7ff fe3e 	bl	8000a0c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	4a07      	ldr	r2, [pc, #28]	; (8000db0 <HAL_UART_MspInit+0xe4>)
 8000d94:	639a      	str	r2, [r3, #56]	; 0x38
 8000d96:	4a06      	ldr	r2, [pc, #24]	; (8000db0 <HAL_UART_MspInit+0xe4>)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000d9c:	bf00      	nop
 8000d9e:	3720      	adds	r7, #32
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	40013800 	.word	0x40013800
 8000da8:	40021000 	.word	0x40021000
 8000dac:	40010800 	.word	0x40010800
 8000db0:	20000254 	.word	0x20000254
 8000db4:	40020058 	.word	0x40020058

08000db8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000db8:	480c      	ldr	r0, [pc, #48]	; (8000dec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000dba:	490d      	ldr	r1, [pc, #52]	; (8000df0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000dbc:	4a0d      	ldr	r2, [pc, #52]	; (8000df4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000dbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dc0:	e002      	b.n	8000dc8 <LoopCopyDataInit>

08000dc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dc6:	3304      	adds	r3, #4

08000dc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dcc:	d3f9      	bcc.n	8000dc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dce:	4a0a      	ldr	r2, [pc, #40]	; (8000df8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000dd0:	4c0a      	ldr	r4, [pc, #40]	; (8000dfc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000dd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dd4:	e001      	b.n	8000dda <LoopFillZerobss>

08000dd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dd8:	3204      	adds	r2, #4

08000dda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ddc:	d3fb      	bcc.n	8000dd6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000dde:	f7ff ff45 	bl	8000c6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000de2:	f002 fcf3 	bl	80037cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000de6:	f7ff fc1d 	bl	8000624 <main>
  bx lr
 8000dea:	4770      	bx	lr
  ldr r0, =_sdata
 8000dec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000df0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000df4:	0800436c 	.word	0x0800436c
  ldr r2, =_sbss
 8000df8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000dfc:	200002f0 	.word	0x200002f0

08000e00 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e00:	e7fe      	b.n	8000e00 <ADC1_2_IRQHandler>
	...

08000e04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e08:	4b08      	ldr	r3, [pc, #32]	; (8000e2c <HAL_Init+0x28>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a07      	ldr	r2, [pc, #28]	; (8000e2c <HAL_Init+0x28>)
 8000e0e:	f043 0310 	orr.w	r3, r3, #16
 8000e12:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e14:	2003      	movs	r0, #3
 8000e16:	f000 fd13 	bl	8001840 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e1a:	200f      	movs	r0, #15
 8000e1c:	f000 f808 	bl	8000e30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e20:	f7ff fe62 	bl	8000ae8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e24:	2300      	movs	r3, #0
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	40022000 	.word	0x40022000

08000e30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e38:	4b12      	ldr	r3, [pc, #72]	; (8000e84 <HAL_InitTick+0x54>)
 8000e3a:	681a      	ldr	r2, [r3, #0]
 8000e3c:	4b12      	ldr	r3, [pc, #72]	; (8000e88 <HAL_InitTick+0x58>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	4619      	mov	r1, r3
 8000e42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e46:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f000 fd2b 	bl	80018aa <HAL_SYSTICK_Config>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	e00e      	b.n	8000e7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	2b0f      	cmp	r3, #15
 8000e62:	d80a      	bhi.n	8000e7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e64:	2200      	movs	r2, #0
 8000e66:	6879      	ldr	r1, [r7, #4]
 8000e68:	f04f 30ff 	mov.w	r0, #4294967295
 8000e6c:	f000 fcf3 	bl	8001856 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e70:	4a06      	ldr	r2, [pc, #24]	; (8000e8c <HAL_InitTick+0x5c>)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e76:	2300      	movs	r3, #0
 8000e78:	e000      	b.n	8000e7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e7a:	2301      	movs	r3, #1
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	3708      	adds	r7, #8
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	20000000 	.word	0x20000000
 8000e88:	20000008 	.word	0x20000008
 8000e8c:	20000004 	.word	0x20000004

08000e90 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e94:	4b05      	ldr	r3, [pc, #20]	; (8000eac <HAL_IncTick+0x1c>)
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	461a      	mov	r2, r3
 8000e9a:	4b05      	ldr	r3, [pc, #20]	; (8000eb0 <HAL_IncTick+0x20>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4413      	add	r3, r2
 8000ea0:	4a03      	ldr	r2, [pc, #12]	; (8000eb0 <HAL_IncTick+0x20>)
 8000ea2:	6013      	str	r3, [r2, #0]
}
 8000ea4:	bf00      	nop
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bc80      	pop	{r7}
 8000eaa:	4770      	bx	lr
 8000eac:	20000008 	.word	0x20000008
 8000eb0:	200002dc 	.word	0x200002dc

08000eb4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  return uwTick;
 8000eb8:	4b02      	ldr	r3, [pc, #8]	; (8000ec4 <HAL_GetTick+0x10>)
 8000eba:	681b      	ldr	r3, [r3, #0]
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bc80      	pop	{r7}
 8000ec2:	4770      	bx	lr
 8000ec4:	200002dc 	.word	0x200002dc

08000ec8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b084      	sub	sp, #16
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ed0:	f7ff fff0 	bl	8000eb4 <HAL_GetTick>
 8000ed4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ee0:	d005      	beq.n	8000eee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ee2:	4b0a      	ldr	r3, [pc, #40]	; (8000f0c <HAL_Delay+0x44>)
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	461a      	mov	r2, r3
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	4413      	add	r3, r2
 8000eec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000eee:	bf00      	nop
 8000ef0:	f7ff ffe0 	bl	8000eb4 <HAL_GetTick>
 8000ef4:	4602      	mov	r2, r0
 8000ef6:	68bb      	ldr	r3, [r7, #8]
 8000ef8:	1ad3      	subs	r3, r2, r3
 8000efa:	68fa      	ldr	r2, [r7, #12]
 8000efc:	429a      	cmp	r2, r3
 8000efe:	d8f7      	bhi.n	8000ef0 <HAL_Delay+0x28>
  {
  }
}
 8000f00:	bf00      	nop
 8000f02:	bf00      	nop
 8000f04:	3710      	adds	r7, #16
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	20000008 	.word	0x20000008

08000f10 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b086      	sub	sp, #24
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000f20:	2300      	movs	r3, #0
 8000f22:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000f24:	2300      	movs	r3, #0
 8000f26:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d101      	bne.n	8000f32 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	e0be      	b.n	80010b0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	689b      	ldr	r3, [r3, #8]
 8000f36:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d109      	bne.n	8000f54 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	2200      	movs	r2, #0
 8000f44:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	2200      	movs	r2, #0
 8000f4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f4e:	6878      	ldr	r0, [r7, #4]
 8000f50:	f7ff fa82 	bl	8000458 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000f54:	6878      	ldr	r0, [r7, #4]
 8000f56:	f000 faff 	bl	8001558 <ADC_ConversionStop_Disable>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f62:	f003 0310 	and.w	r3, r3, #16
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	f040 8099 	bne.w	800109e <HAL_ADC_Init+0x18e>
 8000f6c:	7dfb      	ldrb	r3, [r7, #23]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	f040 8095 	bne.w	800109e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f78:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000f7c:	f023 0302 	bic.w	r3, r3, #2
 8000f80:	f043 0202 	orr.w	r2, r3, #2
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000f90:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	7b1b      	ldrb	r3, [r3, #12]
 8000f96:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000f98:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000f9a:	68ba      	ldr	r2, [r7, #8]
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	689b      	ldr	r3, [r3, #8]
 8000fa4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000fa8:	d003      	beq.n	8000fb2 <HAL_ADC_Init+0xa2>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	689b      	ldr	r3, [r3, #8]
 8000fae:	2b01      	cmp	r3, #1
 8000fb0:	d102      	bne.n	8000fb8 <HAL_ADC_Init+0xa8>
 8000fb2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fb6:	e000      	b.n	8000fba <HAL_ADC_Init+0xaa>
 8000fb8:	2300      	movs	r3, #0
 8000fba:	693a      	ldr	r2, [r7, #16]
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	7d1b      	ldrb	r3, [r3, #20]
 8000fc4:	2b01      	cmp	r3, #1
 8000fc6:	d119      	bne.n	8000ffc <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	7b1b      	ldrb	r3, [r3, #12]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d109      	bne.n	8000fe4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	699b      	ldr	r3, [r3, #24]
 8000fd4:	3b01      	subs	r3, #1
 8000fd6:	035a      	lsls	r2, r3, #13
 8000fd8:	693b      	ldr	r3, [r7, #16]
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000fe0:	613b      	str	r3, [r7, #16]
 8000fe2:	e00b      	b.n	8000ffc <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fe8:	f043 0220 	orr.w	r2, r3, #32
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ff4:	f043 0201 	orr.w	r2, r3, #1
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	693a      	ldr	r2, [r7, #16]
 800100c:	430a      	orrs	r2, r1
 800100e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	689a      	ldr	r2, [r3, #8]
 8001016:	4b28      	ldr	r3, [pc, #160]	; (80010b8 <HAL_ADC_Init+0x1a8>)
 8001018:	4013      	ands	r3, r2
 800101a:	687a      	ldr	r2, [r7, #4]
 800101c:	6812      	ldr	r2, [r2, #0]
 800101e:	68b9      	ldr	r1, [r7, #8]
 8001020:	430b      	orrs	r3, r1
 8001022:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	689b      	ldr	r3, [r3, #8]
 8001028:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800102c:	d003      	beq.n	8001036 <HAL_ADC_Init+0x126>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	689b      	ldr	r3, [r3, #8]
 8001032:	2b01      	cmp	r3, #1
 8001034:	d104      	bne.n	8001040 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	691b      	ldr	r3, [r3, #16]
 800103a:	3b01      	subs	r3, #1
 800103c:	051b      	lsls	r3, r3, #20
 800103e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001046:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	68fa      	ldr	r2, [r7, #12]
 8001050:	430a      	orrs	r2, r1
 8001052:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	689a      	ldr	r2, [r3, #8]
 800105a:	4b18      	ldr	r3, [pc, #96]	; (80010bc <HAL_ADC_Init+0x1ac>)
 800105c:	4013      	ands	r3, r2
 800105e:	68ba      	ldr	r2, [r7, #8]
 8001060:	429a      	cmp	r2, r3
 8001062:	d10b      	bne.n	800107c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2200      	movs	r2, #0
 8001068:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800106e:	f023 0303 	bic.w	r3, r3, #3
 8001072:	f043 0201 	orr.w	r2, r3, #1
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800107a:	e018      	b.n	80010ae <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001080:	f023 0312 	bic.w	r3, r3, #18
 8001084:	f043 0210 	orr.w	r2, r3, #16
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001090:	f043 0201 	orr.w	r2, r3, #1
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001098:	2301      	movs	r3, #1
 800109a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800109c:	e007      	b.n	80010ae <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010a2:	f043 0210 	orr.w	r2, r3, #16
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80010aa:	2301      	movs	r3, #1
 80010ac:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80010ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	3718      	adds	r7, #24
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	ffe1f7fd 	.word	0xffe1f7fd
 80010bc:	ff1f0efe 	.word	0xff1f0efe

080010c0 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b086      	sub	sp, #24
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	60f8      	str	r0, [r7, #12]
 80010c8:	60b9      	str	r1, [r7, #8]
 80010ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010cc:	2300      	movs	r3, #0
 80010ce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a64      	ldr	r2, [pc, #400]	; (8001268 <HAL_ADC_Start_DMA+0x1a8>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d004      	beq.n	80010e4 <HAL_ADC_Start_DMA+0x24>
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4a63      	ldr	r2, [pc, #396]	; (800126c <HAL_ADC_Start_DMA+0x1ac>)
 80010e0:	4293      	cmp	r3, r2
 80010e2:	d106      	bne.n	80010f2 <HAL_ADC_Start_DMA+0x32>
 80010e4:	4b60      	ldr	r3, [pc, #384]	; (8001268 <HAL_ADC_Start_DMA+0x1a8>)
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	f040 80b3 	bne.w	8001258 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80010f8:	2b01      	cmp	r3, #1
 80010fa:	d101      	bne.n	8001100 <HAL_ADC_Start_DMA+0x40>
 80010fc:	2302      	movs	r3, #2
 80010fe:	e0ae      	b.n	800125e <HAL_ADC_Start_DMA+0x19e>
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	2201      	movs	r2, #1
 8001104:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001108:	68f8      	ldr	r0, [r7, #12]
 800110a:	f000 f9cb 	bl	80014a4 <ADC_Enable>
 800110e:	4603      	mov	r3, r0
 8001110:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001112:	7dfb      	ldrb	r3, [r7, #23]
 8001114:	2b00      	cmp	r3, #0
 8001116:	f040 809a 	bne.w	800124e <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800111e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001122:	f023 0301 	bic.w	r3, r3, #1
 8001126:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4a4e      	ldr	r2, [pc, #312]	; (800126c <HAL_ADC_Start_DMA+0x1ac>)
 8001134:	4293      	cmp	r3, r2
 8001136:	d105      	bne.n	8001144 <HAL_ADC_Start_DMA+0x84>
 8001138:	4b4b      	ldr	r3, [pc, #300]	; (8001268 <HAL_ADC_Start_DMA+0x1a8>)
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001140:	2b00      	cmp	r3, #0
 8001142:	d115      	bne.n	8001170 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001148:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800115a:	2b00      	cmp	r3, #0
 800115c:	d026      	beq.n	80011ac <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001162:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001166:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800116e:	e01d      	b.n	80011ac <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001174:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a39      	ldr	r2, [pc, #228]	; (8001268 <HAL_ADC_Start_DMA+0x1a8>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d004      	beq.n	8001190 <HAL_ADC_Start_DMA+0xd0>
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4a38      	ldr	r2, [pc, #224]	; (800126c <HAL_ADC_Start_DMA+0x1ac>)
 800118c:	4293      	cmp	r3, r2
 800118e:	d10d      	bne.n	80011ac <HAL_ADC_Start_DMA+0xec>
 8001190:	4b35      	ldr	r3, [pc, #212]	; (8001268 <HAL_ADC_Start_DMA+0x1a8>)
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001198:	2b00      	cmp	r3, #0
 800119a:	d007      	beq.n	80011ac <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011a0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80011a4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d006      	beq.n	80011c6 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011bc:	f023 0206 	bic.w	r2, r3, #6
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	62da      	str	r2, [r3, #44]	; 0x2c
 80011c4:	e002      	b.n	80011cc <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	2200      	movs	r2, #0
 80011ca:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	2200      	movs	r2, #0
 80011d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	6a1b      	ldr	r3, [r3, #32]
 80011d8:	4a25      	ldr	r2, [pc, #148]	; (8001270 <HAL_ADC_Start_DMA+0x1b0>)
 80011da:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	6a1b      	ldr	r3, [r3, #32]
 80011e0:	4a24      	ldr	r2, [pc, #144]	; (8001274 <HAL_ADC_Start_DMA+0x1b4>)
 80011e2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	6a1b      	ldr	r3, [r3, #32]
 80011e8:	4a23      	ldr	r2, [pc, #140]	; (8001278 <HAL_ADC_Start_DMA+0x1b8>)
 80011ea:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f06f 0202 	mvn.w	r2, #2
 80011f4:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	689a      	ldr	r2, [r3, #8]
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001204:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	6a18      	ldr	r0, [r3, #32]
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	334c      	adds	r3, #76	; 0x4c
 8001210:	4619      	mov	r1, r3
 8001212:	68ba      	ldr	r2, [r7, #8]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	f000 fbaf 	bl	8001978 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	689b      	ldr	r3, [r3, #8]
 8001220:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001224:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001228:	d108      	bne.n	800123c <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	689a      	ldr	r2, [r3, #8]
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001238:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800123a:	e00f      	b.n	800125c <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	689a      	ldr	r2, [r3, #8]
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800124a:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800124c:	e006      	b.n	800125c <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	2200      	movs	r2, #0
 8001252:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8001256:	e001      	b.n	800125c <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001258:	2301      	movs	r3, #1
 800125a:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800125c:	7dfb      	ldrb	r3, [r7, #23]
}
 800125e:	4618      	mov	r0, r3
 8001260:	3718      	adds	r7, #24
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	40012400 	.word	0x40012400
 800126c:	40012800 	.word	0x40012800
 8001270:	080015db 	.word	0x080015db
 8001274:	08001657 	.word	0x08001657
 8001278:	08001673 	.word	0x08001673

0800127c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001284:	bf00      	nop
 8001286:	370c      	adds	r7, #12
 8001288:	46bd      	mov	sp, r7
 800128a:	bc80      	pop	{r7}
 800128c:	4770      	bx	lr

0800128e <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800128e:	b480      	push	{r7}
 8001290:	b083      	sub	sp, #12
 8001292:	af00      	add	r7, sp, #0
 8001294:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001296:	bf00      	nop
 8001298:	370c      	adds	r7, #12
 800129a:	46bd      	mov	sp, r7
 800129c:	bc80      	pop	{r7}
 800129e:	4770      	bx	lr

080012a0 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80012a8:	bf00      	nop
 80012aa:	370c      	adds	r7, #12
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bc80      	pop	{r7}
 80012b0:	4770      	bx	lr
	...

080012b4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80012b4:	b480      	push	{r7}
 80012b6:	b085      	sub	sp, #20
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
 80012bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012be:	2300      	movs	r3, #0
 80012c0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80012c2:	2300      	movs	r3, #0
 80012c4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80012cc:	2b01      	cmp	r3, #1
 80012ce:	d101      	bne.n	80012d4 <HAL_ADC_ConfigChannel+0x20>
 80012d0:	2302      	movs	r3, #2
 80012d2:	e0dc      	b.n	800148e <HAL_ADC_ConfigChannel+0x1da>
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2201      	movs	r2, #1
 80012d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	2b06      	cmp	r3, #6
 80012e2:	d81c      	bhi.n	800131e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	685a      	ldr	r2, [r3, #4]
 80012ee:	4613      	mov	r3, r2
 80012f0:	009b      	lsls	r3, r3, #2
 80012f2:	4413      	add	r3, r2
 80012f4:	3b05      	subs	r3, #5
 80012f6:	221f      	movs	r2, #31
 80012f8:	fa02 f303 	lsl.w	r3, r2, r3
 80012fc:	43db      	mvns	r3, r3
 80012fe:	4019      	ands	r1, r3
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	6818      	ldr	r0, [r3, #0]
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	685a      	ldr	r2, [r3, #4]
 8001308:	4613      	mov	r3, r2
 800130a:	009b      	lsls	r3, r3, #2
 800130c:	4413      	add	r3, r2
 800130e:	3b05      	subs	r3, #5
 8001310:	fa00 f203 	lsl.w	r2, r0, r3
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	430a      	orrs	r2, r1
 800131a:	635a      	str	r2, [r3, #52]	; 0x34
 800131c:	e03c      	b.n	8001398 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	2b0c      	cmp	r3, #12
 8001324:	d81c      	bhi.n	8001360 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	685a      	ldr	r2, [r3, #4]
 8001330:	4613      	mov	r3, r2
 8001332:	009b      	lsls	r3, r3, #2
 8001334:	4413      	add	r3, r2
 8001336:	3b23      	subs	r3, #35	; 0x23
 8001338:	221f      	movs	r2, #31
 800133a:	fa02 f303 	lsl.w	r3, r2, r3
 800133e:	43db      	mvns	r3, r3
 8001340:	4019      	ands	r1, r3
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	6818      	ldr	r0, [r3, #0]
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	685a      	ldr	r2, [r3, #4]
 800134a:	4613      	mov	r3, r2
 800134c:	009b      	lsls	r3, r3, #2
 800134e:	4413      	add	r3, r2
 8001350:	3b23      	subs	r3, #35	; 0x23
 8001352:	fa00 f203 	lsl.w	r2, r0, r3
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	430a      	orrs	r2, r1
 800135c:	631a      	str	r2, [r3, #48]	; 0x30
 800135e:	e01b      	b.n	8001398 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	685a      	ldr	r2, [r3, #4]
 800136a:	4613      	mov	r3, r2
 800136c:	009b      	lsls	r3, r3, #2
 800136e:	4413      	add	r3, r2
 8001370:	3b41      	subs	r3, #65	; 0x41
 8001372:	221f      	movs	r2, #31
 8001374:	fa02 f303 	lsl.w	r3, r2, r3
 8001378:	43db      	mvns	r3, r3
 800137a:	4019      	ands	r1, r3
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	6818      	ldr	r0, [r3, #0]
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	685a      	ldr	r2, [r3, #4]
 8001384:	4613      	mov	r3, r2
 8001386:	009b      	lsls	r3, r3, #2
 8001388:	4413      	add	r3, r2
 800138a:	3b41      	subs	r3, #65	; 0x41
 800138c:	fa00 f203 	lsl.w	r2, r0, r3
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	430a      	orrs	r2, r1
 8001396:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	2b09      	cmp	r3, #9
 800139e:	d91c      	bls.n	80013da <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	68d9      	ldr	r1, [r3, #12]
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	4613      	mov	r3, r2
 80013ac:	005b      	lsls	r3, r3, #1
 80013ae:	4413      	add	r3, r2
 80013b0:	3b1e      	subs	r3, #30
 80013b2:	2207      	movs	r2, #7
 80013b4:	fa02 f303 	lsl.w	r3, r2, r3
 80013b8:	43db      	mvns	r3, r3
 80013ba:	4019      	ands	r1, r3
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	6898      	ldr	r0, [r3, #8]
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	4613      	mov	r3, r2
 80013c6:	005b      	lsls	r3, r3, #1
 80013c8:	4413      	add	r3, r2
 80013ca:	3b1e      	subs	r3, #30
 80013cc:	fa00 f203 	lsl.w	r2, r0, r3
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	430a      	orrs	r2, r1
 80013d6:	60da      	str	r2, [r3, #12]
 80013d8:	e019      	b.n	800140e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	6919      	ldr	r1, [r3, #16]
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	4613      	mov	r3, r2
 80013e6:	005b      	lsls	r3, r3, #1
 80013e8:	4413      	add	r3, r2
 80013ea:	2207      	movs	r2, #7
 80013ec:	fa02 f303 	lsl.w	r3, r2, r3
 80013f0:	43db      	mvns	r3, r3
 80013f2:	4019      	ands	r1, r3
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	6898      	ldr	r0, [r3, #8]
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	4613      	mov	r3, r2
 80013fe:	005b      	lsls	r3, r3, #1
 8001400:	4413      	add	r3, r2
 8001402:	fa00 f203 	lsl.w	r2, r0, r3
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	430a      	orrs	r2, r1
 800140c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	2b10      	cmp	r3, #16
 8001414:	d003      	beq.n	800141e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800141a:	2b11      	cmp	r3, #17
 800141c:	d132      	bne.n	8001484 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a1d      	ldr	r2, [pc, #116]	; (8001498 <HAL_ADC_ConfigChannel+0x1e4>)
 8001424:	4293      	cmp	r3, r2
 8001426:	d125      	bne.n	8001474 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	689b      	ldr	r3, [r3, #8]
 800142e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001432:	2b00      	cmp	r3, #0
 8001434:	d126      	bne.n	8001484 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	689a      	ldr	r2, [r3, #8]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001444:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	2b10      	cmp	r3, #16
 800144c:	d11a      	bne.n	8001484 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800144e:	4b13      	ldr	r3, [pc, #76]	; (800149c <HAL_ADC_ConfigChannel+0x1e8>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a13      	ldr	r2, [pc, #76]	; (80014a0 <HAL_ADC_ConfigChannel+0x1ec>)
 8001454:	fba2 2303 	umull	r2, r3, r2, r3
 8001458:	0c9a      	lsrs	r2, r3, #18
 800145a:	4613      	mov	r3, r2
 800145c:	009b      	lsls	r3, r3, #2
 800145e:	4413      	add	r3, r2
 8001460:	005b      	lsls	r3, r3, #1
 8001462:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001464:	e002      	b.n	800146c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001466:	68bb      	ldr	r3, [r7, #8]
 8001468:	3b01      	subs	r3, #1
 800146a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d1f9      	bne.n	8001466 <HAL_ADC_ConfigChannel+0x1b2>
 8001472:	e007      	b.n	8001484 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001478:	f043 0220 	orr.w	r2, r3, #32
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001480:	2301      	movs	r3, #1
 8001482:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2200      	movs	r2, #0
 8001488:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800148c:	7bfb      	ldrb	r3, [r7, #15]
}
 800148e:	4618      	mov	r0, r3
 8001490:	3714      	adds	r7, #20
 8001492:	46bd      	mov	sp, r7
 8001494:	bc80      	pop	{r7}
 8001496:	4770      	bx	lr
 8001498:	40012400 	.word	0x40012400
 800149c:	20000000 	.word	0x20000000
 80014a0:	431bde83 	.word	0x431bde83

080014a4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b084      	sub	sp, #16
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80014ac:	2300      	movs	r3, #0
 80014ae:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80014b0:	2300      	movs	r3, #0
 80014b2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	689b      	ldr	r3, [r3, #8]
 80014ba:	f003 0301 	and.w	r3, r3, #1
 80014be:	2b01      	cmp	r3, #1
 80014c0:	d040      	beq.n	8001544 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	689a      	ldr	r2, [r3, #8]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f042 0201 	orr.w	r2, r2, #1
 80014d0:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80014d2:	4b1f      	ldr	r3, [pc, #124]	; (8001550 <ADC_Enable+0xac>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a1f      	ldr	r2, [pc, #124]	; (8001554 <ADC_Enable+0xb0>)
 80014d8:	fba2 2303 	umull	r2, r3, r2, r3
 80014dc:	0c9b      	lsrs	r3, r3, #18
 80014de:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80014e0:	e002      	b.n	80014e8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80014e2:	68bb      	ldr	r3, [r7, #8]
 80014e4:	3b01      	subs	r3, #1
 80014e6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d1f9      	bne.n	80014e2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80014ee:	f7ff fce1 	bl	8000eb4 <HAL_GetTick>
 80014f2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80014f4:	e01f      	b.n	8001536 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80014f6:	f7ff fcdd 	bl	8000eb4 <HAL_GetTick>
 80014fa:	4602      	mov	r2, r0
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	1ad3      	subs	r3, r2, r3
 8001500:	2b02      	cmp	r3, #2
 8001502:	d918      	bls.n	8001536 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	689b      	ldr	r3, [r3, #8]
 800150a:	f003 0301 	and.w	r3, r3, #1
 800150e:	2b01      	cmp	r3, #1
 8001510:	d011      	beq.n	8001536 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001516:	f043 0210 	orr.w	r2, r3, #16
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001522:	f043 0201 	orr.w	r2, r3, #1
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2200      	movs	r2, #0
 800152e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	e007      	b.n	8001546 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	689b      	ldr	r3, [r3, #8]
 800153c:	f003 0301 	and.w	r3, r3, #1
 8001540:	2b01      	cmp	r3, #1
 8001542:	d1d8      	bne.n	80014f6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001544:	2300      	movs	r3, #0
}
 8001546:	4618      	mov	r0, r3
 8001548:	3710      	adds	r7, #16
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	20000000 	.word	0x20000000
 8001554:	431bde83 	.word	0x431bde83

08001558 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001560:	2300      	movs	r3, #0
 8001562:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	f003 0301 	and.w	r3, r3, #1
 800156e:	2b01      	cmp	r3, #1
 8001570:	d12e      	bne.n	80015d0 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	689a      	ldr	r2, [r3, #8]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f022 0201 	bic.w	r2, r2, #1
 8001580:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001582:	f7ff fc97 	bl	8000eb4 <HAL_GetTick>
 8001586:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001588:	e01b      	b.n	80015c2 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800158a:	f7ff fc93 	bl	8000eb4 <HAL_GetTick>
 800158e:	4602      	mov	r2, r0
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	1ad3      	subs	r3, r2, r3
 8001594:	2b02      	cmp	r3, #2
 8001596:	d914      	bls.n	80015c2 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	689b      	ldr	r3, [r3, #8]
 800159e:	f003 0301 	and.w	r3, r3, #1
 80015a2:	2b01      	cmp	r3, #1
 80015a4:	d10d      	bne.n	80015c2 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015aa:	f043 0210 	orr.w	r2, r3, #16
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015b6:	f043 0201 	orr.w	r2, r3, #1
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	e007      	b.n	80015d2 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	f003 0301 	and.w	r3, r3, #1
 80015cc:	2b01      	cmp	r3, #1
 80015ce:	d0dc      	beq.n	800158a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80015d0:	2300      	movs	r3, #0
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3710      	adds	r7, #16
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}

080015da <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80015da:	b580      	push	{r7, lr}
 80015dc:	b084      	sub	sp, #16
 80015de:	af00      	add	r7, sp, #0
 80015e0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e6:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ec:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d127      	bne.n	8001644 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015f8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	689b      	ldr	r3, [r3, #8]
 8001606:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800160a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800160e:	d115      	bne.n	800163c <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001614:	2b00      	cmp	r3, #0
 8001616:	d111      	bne.n	800163c <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800161c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001628:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800162c:	2b00      	cmp	r3, #0
 800162e:	d105      	bne.n	800163c <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001634:	f043 0201 	orr.w	r2, r3, #1
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800163c:	68f8      	ldr	r0, [r7, #12]
 800163e:	f7ff fe1d 	bl	800127c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001642:	e004      	b.n	800164e <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	6a1b      	ldr	r3, [r3, #32]
 8001648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164a:	6878      	ldr	r0, [r7, #4]
 800164c:	4798      	blx	r3
}
 800164e:	bf00      	nop
 8001650:	3710      	adds	r7, #16
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}

08001656 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001656:	b580      	push	{r7, lr}
 8001658:	b084      	sub	sp, #16
 800165a:	af00      	add	r7, sp, #0
 800165c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001662:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001664:	68f8      	ldr	r0, [r7, #12]
 8001666:	f7ff fe12 	bl	800128e <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800166a:	bf00      	nop
 800166c:	3710      	adds	r7, #16
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}

08001672 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001672:	b580      	push	{r7, lr}
 8001674:	b084      	sub	sp, #16
 8001676:	af00      	add	r7, sp, #0
 8001678:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800167e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001684:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001690:	f043 0204 	orr.w	r2, r3, #4
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001698:	68f8      	ldr	r0, [r7, #12]
 800169a:	f7ff fe01 	bl	80012a0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800169e:	bf00      	nop
 80016a0:	3710      	adds	r7, #16
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
	...

080016a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b085      	sub	sp, #20
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	f003 0307 	and.w	r3, r3, #7
 80016b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016b8:	4b0c      	ldr	r3, [pc, #48]	; (80016ec <__NVIC_SetPriorityGrouping+0x44>)
 80016ba:	68db      	ldr	r3, [r3, #12]
 80016bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016be:	68ba      	ldr	r2, [r7, #8]
 80016c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016c4:	4013      	ands	r3, r2
 80016c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016da:	4a04      	ldr	r2, [pc, #16]	; (80016ec <__NVIC_SetPriorityGrouping+0x44>)
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	60d3      	str	r3, [r2, #12]
}
 80016e0:	bf00      	nop
 80016e2:	3714      	adds	r7, #20
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bc80      	pop	{r7}
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop
 80016ec:	e000ed00 	.word	0xe000ed00

080016f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016f4:	4b04      	ldr	r3, [pc, #16]	; (8001708 <__NVIC_GetPriorityGrouping+0x18>)
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	0a1b      	lsrs	r3, r3, #8
 80016fa:	f003 0307 	and.w	r3, r3, #7
}
 80016fe:	4618      	mov	r0, r3
 8001700:	46bd      	mov	sp, r7
 8001702:	bc80      	pop	{r7}
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	e000ed00 	.word	0xe000ed00

0800170c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	4603      	mov	r3, r0
 8001714:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800171a:	2b00      	cmp	r3, #0
 800171c:	db0b      	blt.n	8001736 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800171e:	79fb      	ldrb	r3, [r7, #7]
 8001720:	f003 021f 	and.w	r2, r3, #31
 8001724:	4906      	ldr	r1, [pc, #24]	; (8001740 <__NVIC_EnableIRQ+0x34>)
 8001726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800172a:	095b      	lsrs	r3, r3, #5
 800172c:	2001      	movs	r0, #1
 800172e:	fa00 f202 	lsl.w	r2, r0, r2
 8001732:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001736:	bf00      	nop
 8001738:	370c      	adds	r7, #12
 800173a:	46bd      	mov	sp, r7
 800173c:	bc80      	pop	{r7}
 800173e:	4770      	bx	lr
 8001740:	e000e100 	.word	0xe000e100

08001744 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0
 800174a:	4603      	mov	r3, r0
 800174c:	6039      	str	r1, [r7, #0]
 800174e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001750:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001754:	2b00      	cmp	r3, #0
 8001756:	db0a      	blt.n	800176e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	b2da      	uxtb	r2, r3
 800175c:	490c      	ldr	r1, [pc, #48]	; (8001790 <__NVIC_SetPriority+0x4c>)
 800175e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001762:	0112      	lsls	r2, r2, #4
 8001764:	b2d2      	uxtb	r2, r2
 8001766:	440b      	add	r3, r1
 8001768:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800176c:	e00a      	b.n	8001784 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	b2da      	uxtb	r2, r3
 8001772:	4908      	ldr	r1, [pc, #32]	; (8001794 <__NVIC_SetPriority+0x50>)
 8001774:	79fb      	ldrb	r3, [r7, #7]
 8001776:	f003 030f 	and.w	r3, r3, #15
 800177a:	3b04      	subs	r3, #4
 800177c:	0112      	lsls	r2, r2, #4
 800177e:	b2d2      	uxtb	r2, r2
 8001780:	440b      	add	r3, r1
 8001782:	761a      	strb	r2, [r3, #24]
}
 8001784:	bf00      	nop
 8001786:	370c      	adds	r7, #12
 8001788:	46bd      	mov	sp, r7
 800178a:	bc80      	pop	{r7}
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	e000e100 	.word	0xe000e100
 8001794:	e000ed00 	.word	0xe000ed00

08001798 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001798:	b480      	push	{r7}
 800179a:	b089      	sub	sp, #36	; 0x24
 800179c:	af00      	add	r7, sp, #0
 800179e:	60f8      	str	r0, [r7, #12]
 80017a0:	60b9      	str	r1, [r7, #8]
 80017a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	f003 0307 	and.w	r3, r3, #7
 80017aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017ac:	69fb      	ldr	r3, [r7, #28]
 80017ae:	f1c3 0307 	rsb	r3, r3, #7
 80017b2:	2b04      	cmp	r3, #4
 80017b4:	bf28      	it	cs
 80017b6:	2304      	movcs	r3, #4
 80017b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017ba:	69fb      	ldr	r3, [r7, #28]
 80017bc:	3304      	adds	r3, #4
 80017be:	2b06      	cmp	r3, #6
 80017c0:	d902      	bls.n	80017c8 <NVIC_EncodePriority+0x30>
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	3b03      	subs	r3, #3
 80017c6:	e000      	b.n	80017ca <NVIC_EncodePriority+0x32>
 80017c8:	2300      	movs	r3, #0
 80017ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017cc:	f04f 32ff 	mov.w	r2, #4294967295
 80017d0:	69bb      	ldr	r3, [r7, #24]
 80017d2:	fa02 f303 	lsl.w	r3, r2, r3
 80017d6:	43da      	mvns	r2, r3
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	401a      	ands	r2, r3
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017e0:	f04f 31ff 	mov.w	r1, #4294967295
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	fa01 f303 	lsl.w	r3, r1, r3
 80017ea:	43d9      	mvns	r1, r3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017f0:	4313      	orrs	r3, r2
         );
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3724      	adds	r7, #36	; 0x24
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bc80      	pop	{r7}
 80017fa:	4770      	bx	lr

080017fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	3b01      	subs	r3, #1
 8001808:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800180c:	d301      	bcc.n	8001812 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800180e:	2301      	movs	r3, #1
 8001810:	e00f      	b.n	8001832 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001812:	4a0a      	ldr	r2, [pc, #40]	; (800183c <SysTick_Config+0x40>)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	3b01      	subs	r3, #1
 8001818:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800181a:	210f      	movs	r1, #15
 800181c:	f04f 30ff 	mov.w	r0, #4294967295
 8001820:	f7ff ff90 	bl	8001744 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001824:	4b05      	ldr	r3, [pc, #20]	; (800183c <SysTick_Config+0x40>)
 8001826:	2200      	movs	r2, #0
 8001828:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800182a:	4b04      	ldr	r3, [pc, #16]	; (800183c <SysTick_Config+0x40>)
 800182c:	2207      	movs	r2, #7
 800182e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001830:	2300      	movs	r3, #0
}
 8001832:	4618      	mov	r0, r3
 8001834:	3708      	adds	r7, #8
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	e000e010 	.word	0xe000e010

08001840 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001848:	6878      	ldr	r0, [r7, #4]
 800184a:	f7ff ff2d 	bl	80016a8 <__NVIC_SetPriorityGrouping>
}
 800184e:	bf00      	nop
 8001850:	3708      	adds	r7, #8
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}

08001856 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001856:	b580      	push	{r7, lr}
 8001858:	b086      	sub	sp, #24
 800185a:	af00      	add	r7, sp, #0
 800185c:	4603      	mov	r3, r0
 800185e:	60b9      	str	r1, [r7, #8]
 8001860:	607a      	str	r2, [r7, #4]
 8001862:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001864:	2300      	movs	r3, #0
 8001866:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001868:	f7ff ff42 	bl	80016f0 <__NVIC_GetPriorityGrouping>
 800186c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800186e:	687a      	ldr	r2, [r7, #4]
 8001870:	68b9      	ldr	r1, [r7, #8]
 8001872:	6978      	ldr	r0, [r7, #20]
 8001874:	f7ff ff90 	bl	8001798 <NVIC_EncodePriority>
 8001878:	4602      	mov	r2, r0
 800187a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800187e:	4611      	mov	r1, r2
 8001880:	4618      	mov	r0, r3
 8001882:	f7ff ff5f 	bl	8001744 <__NVIC_SetPriority>
}
 8001886:	bf00      	nop
 8001888:	3718      	adds	r7, #24
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}

0800188e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800188e:	b580      	push	{r7, lr}
 8001890:	b082      	sub	sp, #8
 8001892:	af00      	add	r7, sp, #0
 8001894:	4603      	mov	r3, r0
 8001896:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001898:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800189c:	4618      	mov	r0, r3
 800189e:	f7ff ff35 	bl	800170c <__NVIC_EnableIRQ>
}
 80018a2:	bf00      	nop
 80018a4:	3708      	adds	r7, #8
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}

080018aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018aa:	b580      	push	{r7, lr}
 80018ac:	b082      	sub	sp, #8
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018b2:	6878      	ldr	r0, [r7, #4]
 80018b4:	f7ff ffa2 	bl	80017fc <SysTick_Config>
 80018b8:	4603      	mov	r3, r0
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3708      	adds	r7, #8
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
	...

080018c4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b085      	sub	sp, #20
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80018cc:	2300      	movs	r3, #0
 80018ce:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d101      	bne.n	80018da <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e043      	b.n	8001962 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	461a      	mov	r2, r3
 80018e0:	4b22      	ldr	r3, [pc, #136]	; (800196c <HAL_DMA_Init+0xa8>)
 80018e2:	4413      	add	r3, r2
 80018e4:	4a22      	ldr	r2, [pc, #136]	; (8001970 <HAL_DMA_Init+0xac>)
 80018e6:	fba2 2303 	umull	r2, r3, r2, r3
 80018ea:	091b      	lsrs	r3, r3, #4
 80018ec:	009a      	lsls	r2, r3, #2
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	4a1f      	ldr	r2, [pc, #124]	; (8001974 <HAL_DMA_Init+0xb0>)
 80018f6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2202      	movs	r2, #2
 80018fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800190e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001912:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800191c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	68db      	ldr	r3, [r3, #12]
 8001922:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001928:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	695b      	ldr	r3, [r3, #20]
 800192e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001934:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	69db      	ldr	r3, [r3, #28]
 800193a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800193c:	68fa      	ldr	r2, [r7, #12]
 800193e:	4313      	orrs	r3, r2
 8001940:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	68fa      	ldr	r2, [r7, #12]
 8001948:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2200      	movs	r2, #0
 800194e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2201      	movs	r2, #1
 8001954:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2200      	movs	r2, #0
 800195c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001960:	2300      	movs	r3, #0
}
 8001962:	4618      	mov	r0, r3
 8001964:	3714      	adds	r7, #20
 8001966:	46bd      	mov	sp, r7
 8001968:	bc80      	pop	{r7}
 800196a:	4770      	bx	lr
 800196c:	bffdfff8 	.word	0xbffdfff8
 8001970:	cccccccd 	.word	0xcccccccd
 8001974:	40020000 	.word	0x40020000

08001978 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b086      	sub	sp, #24
 800197c:	af00      	add	r7, sp, #0
 800197e:	60f8      	str	r0, [r7, #12]
 8001980:	60b9      	str	r1, [r7, #8]
 8001982:	607a      	str	r2, [r7, #4]
 8001984:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001986:	2300      	movs	r3, #0
 8001988:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001990:	2b01      	cmp	r3, #1
 8001992:	d101      	bne.n	8001998 <HAL_DMA_Start_IT+0x20>
 8001994:	2302      	movs	r3, #2
 8001996:	e04a      	b.n	8001a2e <HAL_DMA_Start_IT+0xb6>
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	2201      	movs	r2, #1
 800199c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80019a6:	2b01      	cmp	r3, #1
 80019a8:	d13a      	bne.n	8001a20 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	2202      	movs	r2, #2
 80019ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	2200      	movs	r2, #0
 80019b6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f022 0201 	bic.w	r2, r2, #1
 80019c6:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	687a      	ldr	r2, [r7, #4]
 80019cc:	68b9      	ldr	r1, [r7, #8]
 80019ce:	68f8      	ldr	r0, [r7, #12]
 80019d0:	f000 f9e8 	bl	8001da4 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d008      	beq.n	80019ee <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f042 020e 	orr.w	r2, r2, #14
 80019ea:	601a      	str	r2, [r3, #0]
 80019ec:	e00f      	b.n	8001a0e <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f022 0204 	bic.w	r2, r2, #4
 80019fc:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f042 020a 	orr.w	r2, r2, #10
 8001a0c:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f042 0201 	orr.w	r2, r2, #1
 8001a1c:	601a      	str	r2, [r3, #0]
 8001a1e:	e005      	b.n	8001a2c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	2200      	movs	r2, #0
 8001a24:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001a28:	2302      	movs	r3, #2
 8001a2a:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001a2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3718      	adds	r7, #24
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}

08001a36 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a36:	b480      	push	{r7}
 8001a38:	b085      	sub	sp, #20
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001a48:	2b02      	cmp	r3, #2
 8001a4a:	d008      	beq.n	8001a5e <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2204      	movs	r2, #4
 8001a50:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2200      	movs	r2, #0
 8001a56:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e020      	b.n	8001aa0 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f022 020e 	bic.w	r2, r2, #14
 8001a6c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f022 0201 	bic.w	r2, r2, #1
 8001a7c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a86:	2101      	movs	r1, #1
 8001a88:	fa01 f202 	lsl.w	r2, r1, r2
 8001a8c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2201      	movs	r2, #1
 8001a92:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001a9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3714      	adds	r7, #20
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bc80      	pop	{r7}
 8001aa8:	4770      	bx	lr
	...

08001aac <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b084      	sub	sp, #16
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001abe:	2b02      	cmp	r3, #2
 8001ac0:	d005      	beq.n	8001ace <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2204      	movs	r2, #4
 8001ac6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	73fb      	strb	r3, [r7, #15]
 8001acc:	e051      	b.n	8001b72 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f022 020e 	bic.w	r2, r2, #14
 8001adc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f022 0201 	bic.w	r2, r2, #1
 8001aec:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a22      	ldr	r2, [pc, #136]	; (8001b7c <HAL_DMA_Abort_IT+0xd0>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d029      	beq.n	8001b4c <HAL_DMA_Abort_IT+0xa0>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a20      	ldr	r2, [pc, #128]	; (8001b80 <HAL_DMA_Abort_IT+0xd4>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d022      	beq.n	8001b48 <HAL_DMA_Abort_IT+0x9c>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a1f      	ldr	r2, [pc, #124]	; (8001b84 <HAL_DMA_Abort_IT+0xd8>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d01a      	beq.n	8001b42 <HAL_DMA_Abort_IT+0x96>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a1d      	ldr	r2, [pc, #116]	; (8001b88 <HAL_DMA_Abort_IT+0xdc>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d012      	beq.n	8001b3c <HAL_DMA_Abort_IT+0x90>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a1c      	ldr	r2, [pc, #112]	; (8001b8c <HAL_DMA_Abort_IT+0xe0>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d00a      	beq.n	8001b36 <HAL_DMA_Abort_IT+0x8a>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a1a      	ldr	r2, [pc, #104]	; (8001b90 <HAL_DMA_Abort_IT+0xe4>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d102      	bne.n	8001b30 <HAL_DMA_Abort_IT+0x84>
 8001b2a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001b2e:	e00e      	b.n	8001b4e <HAL_DMA_Abort_IT+0xa2>
 8001b30:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b34:	e00b      	b.n	8001b4e <HAL_DMA_Abort_IT+0xa2>
 8001b36:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b3a:	e008      	b.n	8001b4e <HAL_DMA_Abort_IT+0xa2>
 8001b3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b40:	e005      	b.n	8001b4e <HAL_DMA_Abort_IT+0xa2>
 8001b42:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b46:	e002      	b.n	8001b4e <HAL_DMA_Abort_IT+0xa2>
 8001b48:	2310      	movs	r3, #16
 8001b4a:	e000      	b.n	8001b4e <HAL_DMA_Abort_IT+0xa2>
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	4a11      	ldr	r2, [pc, #68]	; (8001b94 <HAL_DMA_Abort_IT+0xe8>)
 8001b50:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2201      	movs	r2, #1
 8001b56:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d003      	beq.n	8001b72 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	4798      	blx	r3
    } 
  }
  return status;
 8001b72:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	3710      	adds	r7, #16
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	40020008 	.word	0x40020008
 8001b80:	4002001c 	.word	0x4002001c
 8001b84:	40020030 	.word	0x40020030
 8001b88:	40020044 	.word	0x40020044
 8001b8c:	40020058 	.word	0x40020058
 8001b90:	4002006c 	.word	0x4002006c
 8001b94:	40020000 	.word	0x40020000

08001b98 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b084      	sub	sp, #16
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb4:	2204      	movs	r2, #4
 8001bb6:	409a      	lsls	r2, r3
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	4013      	ands	r3, r2
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d04f      	beq.n	8001c60 <HAL_DMA_IRQHandler+0xc8>
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	f003 0304 	and.w	r3, r3, #4
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d04a      	beq.n	8001c60 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f003 0320 	and.w	r3, r3, #32
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d107      	bne.n	8001be8 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f022 0204 	bic.w	r2, r2, #4
 8001be6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a66      	ldr	r2, [pc, #408]	; (8001d88 <HAL_DMA_IRQHandler+0x1f0>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d029      	beq.n	8001c46 <HAL_DMA_IRQHandler+0xae>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a65      	ldr	r2, [pc, #404]	; (8001d8c <HAL_DMA_IRQHandler+0x1f4>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d022      	beq.n	8001c42 <HAL_DMA_IRQHandler+0xaa>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a63      	ldr	r2, [pc, #396]	; (8001d90 <HAL_DMA_IRQHandler+0x1f8>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d01a      	beq.n	8001c3c <HAL_DMA_IRQHandler+0xa4>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a62      	ldr	r2, [pc, #392]	; (8001d94 <HAL_DMA_IRQHandler+0x1fc>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d012      	beq.n	8001c36 <HAL_DMA_IRQHandler+0x9e>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a60      	ldr	r2, [pc, #384]	; (8001d98 <HAL_DMA_IRQHandler+0x200>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d00a      	beq.n	8001c30 <HAL_DMA_IRQHandler+0x98>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a5f      	ldr	r2, [pc, #380]	; (8001d9c <HAL_DMA_IRQHandler+0x204>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d102      	bne.n	8001c2a <HAL_DMA_IRQHandler+0x92>
 8001c24:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c28:	e00e      	b.n	8001c48 <HAL_DMA_IRQHandler+0xb0>
 8001c2a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001c2e:	e00b      	b.n	8001c48 <HAL_DMA_IRQHandler+0xb0>
 8001c30:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001c34:	e008      	b.n	8001c48 <HAL_DMA_IRQHandler+0xb0>
 8001c36:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001c3a:	e005      	b.n	8001c48 <HAL_DMA_IRQHandler+0xb0>
 8001c3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c40:	e002      	b.n	8001c48 <HAL_DMA_IRQHandler+0xb0>
 8001c42:	2340      	movs	r3, #64	; 0x40
 8001c44:	e000      	b.n	8001c48 <HAL_DMA_IRQHandler+0xb0>
 8001c46:	2304      	movs	r3, #4
 8001c48:	4a55      	ldr	r2, [pc, #340]	; (8001da0 <HAL_DMA_IRQHandler+0x208>)
 8001c4a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	f000 8094 	beq.w	8001d7e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001c5e:	e08e      	b.n	8001d7e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c64:	2202      	movs	r2, #2
 8001c66:	409a      	lsls	r2, r3
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d056      	beq.n	8001d1e <HAL_DMA_IRQHandler+0x186>
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	f003 0302 	and.w	r3, r3, #2
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d051      	beq.n	8001d1e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 0320 	and.w	r3, r3, #32
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d10b      	bne.n	8001ca0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f022 020a 	bic.w	r2, r2, #10
 8001c96:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a38      	ldr	r2, [pc, #224]	; (8001d88 <HAL_DMA_IRQHandler+0x1f0>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d029      	beq.n	8001cfe <HAL_DMA_IRQHandler+0x166>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a37      	ldr	r2, [pc, #220]	; (8001d8c <HAL_DMA_IRQHandler+0x1f4>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d022      	beq.n	8001cfa <HAL_DMA_IRQHandler+0x162>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a35      	ldr	r2, [pc, #212]	; (8001d90 <HAL_DMA_IRQHandler+0x1f8>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d01a      	beq.n	8001cf4 <HAL_DMA_IRQHandler+0x15c>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a34      	ldr	r2, [pc, #208]	; (8001d94 <HAL_DMA_IRQHandler+0x1fc>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d012      	beq.n	8001cee <HAL_DMA_IRQHandler+0x156>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a32      	ldr	r2, [pc, #200]	; (8001d98 <HAL_DMA_IRQHandler+0x200>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d00a      	beq.n	8001ce8 <HAL_DMA_IRQHandler+0x150>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a31      	ldr	r2, [pc, #196]	; (8001d9c <HAL_DMA_IRQHandler+0x204>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d102      	bne.n	8001ce2 <HAL_DMA_IRQHandler+0x14a>
 8001cdc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001ce0:	e00e      	b.n	8001d00 <HAL_DMA_IRQHandler+0x168>
 8001ce2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ce6:	e00b      	b.n	8001d00 <HAL_DMA_IRQHandler+0x168>
 8001ce8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001cec:	e008      	b.n	8001d00 <HAL_DMA_IRQHandler+0x168>
 8001cee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001cf2:	e005      	b.n	8001d00 <HAL_DMA_IRQHandler+0x168>
 8001cf4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cf8:	e002      	b.n	8001d00 <HAL_DMA_IRQHandler+0x168>
 8001cfa:	2320      	movs	r3, #32
 8001cfc:	e000      	b.n	8001d00 <HAL_DMA_IRQHandler+0x168>
 8001cfe:	2302      	movs	r3, #2
 8001d00:	4a27      	ldr	r2, [pc, #156]	; (8001da0 <HAL_DMA_IRQHandler+0x208>)
 8001d02:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2200      	movs	r2, #0
 8001d08:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d034      	beq.n	8001d7e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d18:	6878      	ldr	r0, [r7, #4]
 8001d1a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001d1c:	e02f      	b.n	8001d7e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d22:	2208      	movs	r2, #8
 8001d24:	409a      	lsls	r2, r3
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	4013      	ands	r3, r2
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d028      	beq.n	8001d80 <HAL_DMA_IRQHandler+0x1e8>
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	f003 0308 	and.w	r3, r3, #8
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d023      	beq.n	8001d80 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f022 020e 	bic.w	r2, r2, #14
 8001d46:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d50:	2101      	movs	r1, #1
 8001d52:	fa01 f202 	lsl.w	r2, r1, r2
 8001d56:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2201      	movs	r2, #1
 8001d62:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d004      	beq.n	8001d80 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	4798      	blx	r3
    }
  }
  return;
 8001d7e:	bf00      	nop
 8001d80:	bf00      	nop
}
 8001d82:	3710      	adds	r7, #16
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	40020008 	.word	0x40020008
 8001d8c:	4002001c 	.word	0x4002001c
 8001d90:	40020030 	.word	0x40020030
 8001d94:	40020044 	.word	0x40020044
 8001d98:	40020058 	.word	0x40020058
 8001d9c:	4002006c 	.word	0x4002006c
 8001da0:	40020000 	.word	0x40020000

08001da4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b085      	sub	sp, #20
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	60f8      	str	r0, [r7, #12]
 8001dac:	60b9      	str	r1, [r7, #8]
 8001dae:	607a      	str	r2, [r7, #4]
 8001db0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dba:	2101      	movs	r1, #1
 8001dbc:	fa01 f202 	lsl.w	r2, r1, r2
 8001dc0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	683a      	ldr	r2, [r7, #0]
 8001dc8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	2b10      	cmp	r3, #16
 8001dd0:	d108      	bne.n	8001de4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	687a      	ldr	r2, [r7, #4]
 8001dd8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	68ba      	ldr	r2, [r7, #8]
 8001de0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001de2:	e007      	b.n	8001df4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	68ba      	ldr	r2, [r7, #8]
 8001dea:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	687a      	ldr	r2, [r7, #4]
 8001df2:	60da      	str	r2, [r3, #12]
}
 8001df4:	bf00      	nop
 8001df6:	3714      	adds	r7, #20
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bc80      	pop	{r7}
 8001dfc:	4770      	bx	lr
	...

08001e00 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b08b      	sub	sp, #44	; 0x2c
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
 8001e08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e12:	e148      	b.n	80020a6 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001e14:	2201      	movs	r2, #1
 8001e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e18:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	69fa      	ldr	r2, [r7, #28]
 8001e24:	4013      	ands	r3, r2
 8001e26:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001e28:	69ba      	ldr	r2, [r7, #24]
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	f040 8137 	bne.w	80020a0 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	4aa3      	ldr	r2, [pc, #652]	; (80020c4 <HAL_GPIO_Init+0x2c4>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d05e      	beq.n	8001efa <HAL_GPIO_Init+0xfa>
 8001e3c:	4aa1      	ldr	r2, [pc, #644]	; (80020c4 <HAL_GPIO_Init+0x2c4>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d875      	bhi.n	8001f2e <HAL_GPIO_Init+0x12e>
 8001e42:	4aa1      	ldr	r2, [pc, #644]	; (80020c8 <HAL_GPIO_Init+0x2c8>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d058      	beq.n	8001efa <HAL_GPIO_Init+0xfa>
 8001e48:	4a9f      	ldr	r2, [pc, #636]	; (80020c8 <HAL_GPIO_Init+0x2c8>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d86f      	bhi.n	8001f2e <HAL_GPIO_Init+0x12e>
 8001e4e:	4a9f      	ldr	r2, [pc, #636]	; (80020cc <HAL_GPIO_Init+0x2cc>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d052      	beq.n	8001efa <HAL_GPIO_Init+0xfa>
 8001e54:	4a9d      	ldr	r2, [pc, #628]	; (80020cc <HAL_GPIO_Init+0x2cc>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d869      	bhi.n	8001f2e <HAL_GPIO_Init+0x12e>
 8001e5a:	4a9d      	ldr	r2, [pc, #628]	; (80020d0 <HAL_GPIO_Init+0x2d0>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d04c      	beq.n	8001efa <HAL_GPIO_Init+0xfa>
 8001e60:	4a9b      	ldr	r2, [pc, #620]	; (80020d0 <HAL_GPIO_Init+0x2d0>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d863      	bhi.n	8001f2e <HAL_GPIO_Init+0x12e>
 8001e66:	4a9b      	ldr	r2, [pc, #620]	; (80020d4 <HAL_GPIO_Init+0x2d4>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d046      	beq.n	8001efa <HAL_GPIO_Init+0xfa>
 8001e6c:	4a99      	ldr	r2, [pc, #612]	; (80020d4 <HAL_GPIO_Init+0x2d4>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d85d      	bhi.n	8001f2e <HAL_GPIO_Init+0x12e>
 8001e72:	2b12      	cmp	r3, #18
 8001e74:	d82a      	bhi.n	8001ecc <HAL_GPIO_Init+0xcc>
 8001e76:	2b12      	cmp	r3, #18
 8001e78:	d859      	bhi.n	8001f2e <HAL_GPIO_Init+0x12e>
 8001e7a:	a201      	add	r2, pc, #4	; (adr r2, 8001e80 <HAL_GPIO_Init+0x80>)
 8001e7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e80:	08001efb 	.word	0x08001efb
 8001e84:	08001ed5 	.word	0x08001ed5
 8001e88:	08001ee7 	.word	0x08001ee7
 8001e8c:	08001f29 	.word	0x08001f29
 8001e90:	08001f2f 	.word	0x08001f2f
 8001e94:	08001f2f 	.word	0x08001f2f
 8001e98:	08001f2f 	.word	0x08001f2f
 8001e9c:	08001f2f 	.word	0x08001f2f
 8001ea0:	08001f2f 	.word	0x08001f2f
 8001ea4:	08001f2f 	.word	0x08001f2f
 8001ea8:	08001f2f 	.word	0x08001f2f
 8001eac:	08001f2f 	.word	0x08001f2f
 8001eb0:	08001f2f 	.word	0x08001f2f
 8001eb4:	08001f2f 	.word	0x08001f2f
 8001eb8:	08001f2f 	.word	0x08001f2f
 8001ebc:	08001f2f 	.word	0x08001f2f
 8001ec0:	08001f2f 	.word	0x08001f2f
 8001ec4:	08001edd 	.word	0x08001edd
 8001ec8:	08001ef1 	.word	0x08001ef1
 8001ecc:	4a82      	ldr	r2, [pc, #520]	; (80020d8 <HAL_GPIO_Init+0x2d8>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d013      	beq.n	8001efa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001ed2:	e02c      	b.n	8001f2e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	623b      	str	r3, [r7, #32]
          break;
 8001eda:	e029      	b.n	8001f30 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	3304      	adds	r3, #4
 8001ee2:	623b      	str	r3, [r7, #32]
          break;
 8001ee4:	e024      	b.n	8001f30 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	68db      	ldr	r3, [r3, #12]
 8001eea:	3308      	adds	r3, #8
 8001eec:	623b      	str	r3, [r7, #32]
          break;
 8001eee:	e01f      	b.n	8001f30 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	330c      	adds	r3, #12
 8001ef6:	623b      	str	r3, [r7, #32]
          break;
 8001ef8:	e01a      	b.n	8001f30 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d102      	bne.n	8001f08 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f02:	2304      	movs	r3, #4
 8001f04:	623b      	str	r3, [r7, #32]
          break;
 8001f06:	e013      	b.n	8001f30 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d105      	bne.n	8001f1c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f10:	2308      	movs	r3, #8
 8001f12:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	69fa      	ldr	r2, [r7, #28]
 8001f18:	611a      	str	r2, [r3, #16]
          break;
 8001f1a:	e009      	b.n	8001f30 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f1c:	2308      	movs	r3, #8
 8001f1e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	69fa      	ldr	r2, [r7, #28]
 8001f24:	615a      	str	r2, [r3, #20]
          break;
 8001f26:	e003      	b.n	8001f30 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	623b      	str	r3, [r7, #32]
          break;
 8001f2c:	e000      	b.n	8001f30 <HAL_GPIO_Init+0x130>
          break;
 8001f2e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f30:	69bb      	ldr	r3, [r7, #24]
 8001f32:	2bff      	cmp	r3, #255	; 0xff
 8001f34:	d801      	bhi.n	8001f3a <HAL_GPIO_Init+0x13a>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	e001      	b.n	8001f3e <HAL_GPIO_Init+0x13e>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	3304      	adds	r3, #4
 8001f3e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f40:	69bb      	ldr	r3, [r7, #24]
 8001f42:	2bff      	cmp	r3, #255	; 0xff
 8001f44:	d802      	bhi.n	8001f4c <HAL_GPIO_Init+0x14c>
 8001f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	e002      	b.n	8001f52 <HAL_GPIO_Init+0x152>
 8001f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f4e:	3b08      	subs	r3, #8
 8001f50:	009b      	lsls	r3, r3, #2
 8001f52:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	210f      	movs	r1, #15
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f60:	43db      	mvns	r3, r3
 8001f62:	401a      	ands	r2, r3
 8001f64:	6a39      	ldr	r1, [r7, #32]
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	fa01 f303 	lsl.w	r3, r1, r3
 8001f6c:	431a      	orrs	r2, r3
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	f000 8090 	beq.w	80020a0 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f80:	4b56      	ldr	r3, [pc, #344]	; (80020dc <HAL_GPIO_Init+0x2dc>)
 8001f82:	699b      	ldr	r3, [r3, #24]
 8001f84:	4a55      	ldr	r2, [pc, #340]	; (80020dc <HAL_GPIO_Init+0x2dc>)
 8001f86:	f043 0301 	orr.w	r3, r3, #1
 8001f8a:	6193      	str	r3, [r2, #24]
 8001f8c:	4b53      	ldr	r3, [pc, #332]	; (80020dc <HAL_GPIO_Init+0x2dc>)
 8001f8e:	699b      	ldr	r3, [r3, #24]
 8001f90:	f003 0301 	and.w	r3, r3, #1
 8001f94:	60bb      	str	r3, [r7, #8]
 8001f96:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f98:	4a51      	ldr	r2, [pc, #324]	; (80020e0 <HAL_GPIO_Init+0x2e0>)
 8001f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9c:	089b      	lsrs	r3, r3, #2
 8001f9e:	3302      	adds	r3, #2
 8001fa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fa4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa8:	f003 0303 	and.w	r3, r3, #3
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	220f      	movs	r2, #15
 8001fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb4:	43db      	mvns	r3, r3
 8001fb6:	68fa      	ldr	r2, [r7, #12]
 8001fb8:	4013      	ands	r3, r2
 8001fba:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	4a49      	ldr	r2, [pc, #292]	; (80020e4 <HAL_GPIO_Init+0x2e4>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d00d      	beq.n	8001fe0 <HAL_GPIO_Init+0x1e0>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	4a48      	ldr	r2, [pc, #288]	; (80020e8 <HAL_GPIO_Init+0x2e8>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d007      	beq.n	8001fdc <HAL_GPIO_Init+0x1dc>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	4a47      	ldr	r2, [pc, #284]	; (80020ec <HAL_GPIO_Init+0x2ec>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d101      	bne.n	8001fd8 <HAL_GPIO_Init+0x1d8>
 8001fd4:	2302      	movs	r3, #2
 8001fd6:	e004      	b.n	8001fe2 <HAL_GPIO_Init+0x1e2>
 8001fd8:	2303      	movs	r3, #3
 8001fda:	e002      	b.n	8001fe2 <HAL_GPIO_Init+0x1e2>
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e000      	b.n	8001fe2 <HAL_GPIO_Init+0x1e2>
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fe4:	f002 0203 	and.w	r2, r2, #3
 8001fe8:	0092      	lsls	r2, r2, #2
 8001fea:	4093      	lsls	r3, r2
 8001fec:	68fa      	ldr	r2, [r7, #12]
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001ff2:	493b      	ldr	r1, [pc, #236]	; (80020e0 <HAL_GPIO_Init+0x2e0>)
 8001ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff6:	089b      	lsrs	r3, r3, #2
 8001ff8:	3302      	adds	r3, #2
 8001ffa:	68fa      	ldr	r2, [r7, #12]
 8001ffc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002008:	2b00      	cmp	r3, #0
 800200a:	d006      	beq.n	800201a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800200c:	4b38      	ldr	r3, [pc, #224]	; (80020f0 <HAL_GPIO_Init+0x2f0>)
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	4937      	ldr	r1, [pc, #220]	; (80020f0 <HAL_GPIO_Init+0x2f0>)
 8002012:	69bb      	ldr	r3, [r7, #24]
 8002014:	4313      	orrs	r3, r2
 8002016:	600b      	str	r3, [r1, #0]
 8002018:	e006      	b.n	8002028 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800201a:	4b35      	ldr	r3, [pc, #212]	; (80020f0 <HAL_GPIO_Init+0x2f0>)
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	69bb      	ldr	r3, [r7, #24]
 8002020:	43db      	mvns	r3, r3
 8002022:	4933      	ldr	r1, [pc, #204]	; (80020f0 <HAL_GPIO_Init+0x2f0>)
 8002024:	4013      	ands	r3, r2
 8002026:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002030:	2b00      	cmp	r3, #0
 8002032:	d006      	beq.n	8002042 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002034:	4b2e      	ldr	r3, [pc, #184]	; (80020f0 <HAL_GPIO_Init+0x2f0>)
 8002036:	685a      	ldr	r2, [r3, #4]
 8002038:	492d      	ldr	r1, [pc, #180]	; (80020f0 <HAL_GPIO_Init+0x2f0>)
 800203a:	69bb      	ldr	r3, [r7, #24]
 800203c:	4313      	orrs	r3, r2
 800203e:	604b      	str	r3, [r1, #4]
 8002040:	e006      	b.n	8002050 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002042:	4b2b      	ldr	r3, [pc, #172]	; (80020f0 <HAL_GPIO_Init+0x2f0>)
 8002044:	685a      	ldr	r2, [r3, #4]
 8002046:	69bb      	ldr	r3, [r7, #24]
 8002048:	43db      	mvns	r3, r3
 800204a:	4929      	ldr	r1, [pc, #164]	; (80020f0 <HAL_GPIO_Init+0x2f0>)
 800204c:	4013      	ands	r3, r2
 800204e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002058:	2b00      	cmp	r3, #0
 800205a:	d006      	beq.n	800206a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800205c:	4b24      	ldr	r3, [pc, #144]	; (80020f0 <HAL_GPIO_Init+0x2f0>)
 800205e:	689a      	ldr	r2, [r3, #8]
 8002060:	4923      	ldr	r1, [pc, #140]	; (80020f0 <HAL_GPIO_Init+0x2f0>)
 8002062:	69bb      	ldr	r3, [r7, #24]
 8002064:	4313      	orrs	r3, r2
 8002066:	608b      	str	r3, [r1, #8]
 8002068:	e006      	b.n	8002078 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800206a:	4b21      	ldr	r3, [pc, #132]	; (80020f0 <HAL_GPIO_Init+0x2f0>)
 800206c:	689a      	ldr	r2, [r3, #8]
 800206e:	69bb      	ldr	r3, [r7, #24]
 8002070:	43db      	mvns	r3, r3
 8002072:	491f      	ldr	r1, [pc, #124]	; (80020f0 <HAL_GPIO_Init+0x2f0>)
 8002074:	4013      	ands	r3, r2
 8002076:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002080:	2b00      	cmp	r3, #0
 8002082:	d006      	beq.n	8002092 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002084:	4b1a      	ldr	r3, [pc, #104]	; (80020f0 <HAL_GPIO_Init+0x2f0>)
 8002086:	68da      	ldr	r2, [r3, #12]
 8002088:	4919      	ldr	r1, [pc, #100]	; (80020f0 <HAL_GPIO_Init+0x2f0>)
 800208a:	69bb      	ldr	r3, [r7, #24]
 800208c:	4313      	orrs	r3, r2
 800208e:	60cb      	str	r3, [r1, #12]
 8002090:	e006      	b.n	80020a0 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002092:	4b17      	ldr	r3, [pc, #92]	; (80020f0 <HAL_GPIO_Init+0x2f0>)
 8002094:	68da      	ldr	r2, [r3, #12]
 8002096:	69bb      	ldr	r3, [r7, #24]
 8002098:	43db      	mvns	r3, r3
 800209a:	4915      	ldr	r1, [pc, #84]	; (80020f0 <HAL_GPIO_Init+0x2f0>)
 800209c:	4013      	ands	r3, r2
 800209e:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80020a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a2:	3301      	adds	r3, #1
 80020a4:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ac:	fa22 f303 	lsr.w	r3, r2, r3
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	f47f aeaf 	bne.w	8001e14 <HAL_GPIO_Init+0x14>
  }
}
 80020b6:	bf00      	nop
 80020b8:	bf00      	nop
 80020ba:	372c      	adds	r7, #44	; 0x2c
 80020bc:	46bd      	mov	sp, r7
 80020be:	bc80      	pop	{r7}
 80020c0:	4770      	bx	lr
 80020c2:	bf00      	nop
 80020c4:	10320000 	.word	0x10320000
 80020c8:	10310000 	.word	0x10310000
 80020cc:	10220000 	.word	0x10220000
 80020d0:	10210000 	.word	0x10210000
 80020d4:	10120000 	.word	0x10120000
 80020d8:	10110000 	.word	0x10110000
 80020dc:	40021000 	.word	0x40021000
 80020e0:	40010000 	.word	0x40010000
 80020e4:	40010800 	.word	0x40010800
 80020e8:	40010c00 	.word	0x40010c00
 80020ec:	40011000 	.word	0x40011000
 80020f0:	40010400 	.word	0x40010400

080020f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b085      	sub	sp, #20
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
 80020fc:	460b      	mov	r3, r1
 80020fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	689a      	ldr	r2, [r3, #8]
 8002104:	887b      	ldrh	r3, [r7, #2]
 8002106:	4013      	ands	r3, r2
 8002108:	2b00      	cmp	r3, #0
 800210a:	d002      	beq.n	8002112 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800210c:	2301      	movs	r3, #1
 800210e:	73fb      	strb	r3, [r7, #15]
 8002110:	e001      	b.n	8002116 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002112:	2300      	movs	r3, #0
 8002114:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002116:	7bfb      	ldrb	r3, [r7, #15]
}
 8002118:	4618      	mov	r0, r3
 800211a:	3714      	adds	r7, #20
 800211c:	46bd      	mov	sp, r7
 800211e:	bc80      	pop	{r7}
 8002120:	4770      	bx	lr

08002122 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002122:	b480      	push	{r7}
 8002124:	b083      	sub	sp, #12
 8002126:	af00      	add	r7, sp, #0
 8002128:	6078      	str	r0, [r7, #4]
 800212a:	460b      	mov	r3, r1
 800212c:	807b      	strh	r3, [r7, #2]
 800212e:	4613      	mov	r3, r2
 8002130:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002132:	787b      	ldrb	r3, [r7, #1]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d003      	beq.n	8002140 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002138:	887a      	ldrh	r2, [r7, #2]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800213e:	e003      	b.n	8002148 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002140:	887b      	ldrh	r3, [r7, #2]
 8002142:	041a      	lsls	r2, r3, #16
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	611a      	str	r2, [r3, #16]
}
 8002148:	bf00      	nop
 800214a:	370c      	adds	r7, #12
 800214c:	46bd      	mov	sp, r7
 800214e:	bc80      	pop	{r7}
 8002150:	4770      	bx	lr
	...

08002154 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
 800215a:	4603      	mov	r3, r0
 800215c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800215e:	4b08      	ldr	r3, [pc, #32]	; (8002180 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002160:	695a      	ldr	r2, [r3, #20]
 8002162:	88fb      	ldrh	r3, [r7, #6]
 8002164:	4013      	ands	r3, r2
 8002166:	2b00      	cmp	r3, #0
 8002168:	d006      	beq.n	8002178 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800216a:	4a05      	ldr	r2, [pc, #20]	; (8002180 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800216c:	88fb      	ldrh	r3, [r7, #6]
 800216e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002170:	88fb      	ldrh	r3, [r7, #6]
 8002172:	4618      	mov	r0, r3
 8002174:	f7fe fc16 	bl	80009a4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002178:	bf00      	nop
 800217a:	3708      	adds	r7, #8
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}
 8002180:	40010400 	.word	0x40010400

08002184 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b086      	sub	sp, #24
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d101      	bne.n	8002196 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e26c      	b.n	8002670 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 0301 	and.w	r3, r3, #1
 800219e:	2b00      	cmp	r3, #0
 80021a0:	f000 8087 	beq.w	80022b2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80021a4:	4b92      	ldr	r3, [pc, #584]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f003 030c 	and.w	r3, r3, #12
 80021ac:	2b04      	cmp	r3, #4
 80021ae:	d00c      	beq.n	80021ca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80021b0:	4b8f      	ldr	r3, [pc, #572]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f003 030c 	and.w	r3, r3, #12
 80021b8:	2b08      	cmp	r3, #8
 80021ba:	d112      	bne.n	80021e2 <HAL_RCC_OscConfig+0x5e>
 80021bc:	4b8c      	ldr	r3, [pc, #560]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021c8:	d10b      	bne.n	80021e2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021ca:	4b89      	ldr	r3, [pc, #548]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d06c      	beq.n	80022b0 <HAL_RCC_OscConfig+0x12c>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d168      	bne.n	80022b0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e246      	b.n	8002670 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021ea:	d106      	bne.n	80021fa <HAL_RCC_OscConfig+0x76>
 80021ec:	4b80      	ldr	r3, [pc, #512]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a7f      	ldr	r2, [pc, #508]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 80021f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021f6:	6013      	str	r3, [r2, #0]
 80021f8:	e02e      	b.n	8002258 <HAL_RCC_OscConfig+0xd4>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d10c      	bne.n	800221c <HAL_RCC_OscConfig+0x98>
 8002202:	4b7b      	ldr	r3, [pc, #492]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a7a      	ldr	r2, [pc, #488]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 8002208:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800220c:	6013      	str	r3, [r2, #0]
 800220e:	4b78      	ldr	r3, [pc, #480]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a77      	ldr	r2, [pc, #476]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 8002214:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002218:	6013      	str	r3, [r2, #0]
 800221a:	e01d      	b.n	8002258 <HAL_RCC_OscConfig+0xd4>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002224:	d10c      	bne.n	8002240 <HAL_RCC_OscConfig+0xbc>
 8002226:	4b72      	ldr	r3, [pc, #456]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a71      	ldr	r2, [pc, #452]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 800222c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002230:	6013      	str	r3, [r2, #0]
 8002232:	4b6f      	ldr	r3, [pc, #444]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a6e      	ldr	r2, [pc, #440]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 8002238:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800223c:	6013      	str	r3, [r2, #0]
 800223e:	e00b      	b.n	8002258 <HAL_RCC_OscConfig+0xd4>
 8002240:	4b6b      	ldr	r3, [pc, #428]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a6a      	ldr	r2, [pc, #424]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 8002246:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800224a:	6013      	str	r3, [r2, #0]
 800224c:	4b68      	ldr	r3, [pc, #416]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a67      	ldr	r2, [pc, #412]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 8002252:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002256:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d013      	beq.n	8002288 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002260:	f7fe fe28 	bl	8000eb4 <HAL_GetTick>
 8002264:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002266:	e008      	b.n	800227a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002268:	f7fe fe24 	bl	8000eb4 <HAL_GetTick>
 800226c:	4602      	mov	r2, r0
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	2b64      	cmp	r3, #100	; 0x64
 8002274:	d901      	bls.n	800227a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002276:	2303      	movs	r3, #3
 8002278:	e1fa      	b.n	8002670 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800227a:	4b5d      	ldr	r3, [pc, #372]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002282:	2b00      	cmp	r3, #0
 8002284:	d0f0      	beq.n	8002268 <HAL_RCC_OscConfig+0xe4>
 8002286:	e014      	b.n	80022b2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002288:	f7fe fe14 	bl	8000eb4 <HAL_GetTick>
 800228c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800228e:	e008      	b.n	80022a2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002290:	f7fe fe10 	bl	8000eb4 <HAL_GetTick>
 8002294:	4602      	mov	r2, r0
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	2b64      	cmp	r3, #100	; 0x64
 800229c:	d901      	bls.n	80022a2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	e1e6      	b.n	8002670 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022a2:	4b53      	ldr	r3, [pc, #332]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d1f0      	bne.n	8002290 <HAL_RCC_OscConfig+0x10c>
 80022ae:	e000      	b.n	80022b2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 0302 	and.w	r3, r3, #2
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d063      	beq.n	8002386 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022be:	4b4c      	ldr	r3, [pc, #304]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	f003 030c 	and.w	r3, r3, #12
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d00b      	beq.n	80022e2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80022ca:	4b49      	ldr	r3, [pc, #292]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	f003 030c 	and.w	r3, r3, #12
 80022d2:	2b08      	cmp	r3, #8
 80022d4:	d11c      	bne.n	8002310 <HAL_RCC_OscConfig+0x18c>
 80022d6:	4b46      	ldr	r3, [pc, #280]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d116      	bne.n	8002310 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022e2:	4b43      	ldr	r3, [pc, #268]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0302 	and.w	r3, r3, #2
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d005      	beq.n	80022fa <HAL_RCC_OscConfig+0x176>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	691b      	ldr	r3, [r3, #16]
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d001      	beq.n	80022fa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e1ba      	b.n	8002670 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022fa:	4b3d      	ldr	r3, [pc, #244]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	695b      	ldr	r3, [r3, #20]
 8002306:	00db      	lsls	r3, r3, #3
 8002308:	4939      	ldr	r1, [pc, #228]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 800230a:	4313      	orrs	r3, r2
 800230c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800230e:	e03a      	b.n	8002386 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	691b      	ldr	r3, [r3, #16]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d020      	beq.n	800235a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002318:	4b36      	ldr	r3, [pc, #216]	; (80023f4 <HAL_RCC_OscConfig+0x270>)
 800231a:	2201      	movs	r2, #1
 800231c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800231e:	f7fe fdc9 	bl	8000eb4 <HAL_GetTick>
 8002322:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002324:	e008      	b.n	8002338 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002326:	f7fe fdc5 	bl	8000eb4 <HAL_GetTick>
 800232a:	4602      	mov	r2, r0
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	1ad3      	subs	r3, r2, r3
 8002330:	2b02      	cmp	r3, #2
 8002332:	d901      	bls.n	8002338 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002334:	2303      	movs	r3, #3
 8002336:	e19b      	b.n	8002670 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002338:	4b2d      	ldr	r3, [pc, #180]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 0302 	and.w	r3, r3, #2
 8002340:	2b00      	cmp	r3, #0
 8002342:	d0f0      	beq.n	8002326 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002344:	4b2a      	ldr	r3, [pc, #168]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	695b      	ldr	r3, [r3, #20]
 8002350:	00db      	lsls	r3, r3, #3
 8002352:	4927      	ldr	r1, [pc, #156]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 8002354:	4313      	orrs	r3, r2
 8002356:	600b      	str	r3, [r1, #0]
 8002358:	e015      	b.n	8002386 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800235a:	4b26      	ldr	r3, [pc, #152]	; (80023f4 <HAL_RCC_OscConfig+0x270>)
 800235c:	2200      	movs	r2, #0
 800235e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002360:	f7fe fda8 	bl	8000eb4 <HAL_GetTick>
 8002364:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002366:	e008      	b.n	800237a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002368:	f7fe fda4 	bl	8000eb4 <HAL_GetTick>
 800236c:	4602      	mov	r2, r0
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	2b02      	cmp	r3, #2
 8002374:	d901      	bls.n	800237a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002376:	2303      	movs	r3, #3
 8002378:	e17a      	b.n	8002670 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800237a:	4b1d      	ldr	r3, [pc, #116]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 0302 	and.w	r3, r3, #2
 8002382:	2b00      	cmp	r3, #0
 8002384:	d1f0      	bne.n	8002368 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 0308 	and.w	r3, r3, #8
 800238e:	2b00      	cmp	r3, #0
 8002390:	d03a      	beq.n	8002408 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	699b      	ldr	r3, [r3, #24]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d019      	beq.n	80023ce <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800239a:	4b17      	ldr	r3, [pc, #92]	; (80023f8 <HAL_RCC_OscConfig+0x274>)
 800239c:	2201      	movs	r2, #1
 800239e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023a0:	f7fe fd88 	bl	8000eb4 <HAL_GetTick>
 80023a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023a6:	e008      	b.n	80023ba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023a8:	f7fe fd84 	bl	8000eb4 <HAL_GetTick>
 80023ac:	4602      	mov	r2, r0
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	2b02      	cmp	r3, #2
 80023b4:	d901      	bls.n	80023ba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	e15a      	b.n	8002670 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023ba:	4b0d      	ldr	r3, [pc, #52]	; (80023f0 <HAL_RCC_OscConfig+0x26c>)
 80023bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023be:	f003 0302 	and.w	r3, r3, #2
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d0f0      	beq.n	80023a8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80023c6:	2001      	movs	r0, #1
 80023c8:	f000 fad8 	bl	800297c <RCC_Delay>
 80023cc:	e01c      	b.n	8002408 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023ce:	4b0a      	ldr	r3, [pc, #40]	; (80023f8 <HAL_RCC_OscConfig+0x274>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023d4:	f7fe fd6e 	bl	8000eb4 <HAL_GetTick>
 80023d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023da:	e00f      	b.n	80023fc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023dc:	f7fe fd6a 	bl	8000eb4 <HAL_GetTick>
 80023e0:	4602      	mov	r2, r0
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d908      	bls.n	80023fc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80023ea:	2303      	movs	r3, #3
 80023ec:	e140      	b.n	8002670 <HAL_RCC_OscConfig+0x4ec>
 80023ee:	bf00      	nop
 80023f0:	40021000 	.word	0x40021000
 80023f4:	42420000 	.word	0x42420000
 80023f8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023fc:	4b9e      	ldr	r3, [pc, #632]	; (8002678 <HAL_RCC_OscConfig+0x4f4>)
 80023fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002400:	f003 0302 	and.w	r3, r3, #2
 8002404:	2b00      	cmp	r3, #0
 8002406:	d1e9      	bne.n	80023dc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 0304 	and.w	r3, r3, #4
 8002410:	2b00      	cmp	r3, #0
 8002412:	f000 80a6 	beq.w	8002562 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002416:	2300      	movs	r3, #0
 8002418:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800241a:	4b97      	ldr	r3, [pc, #604]	; (8002678 <HAL_RCC_OscConfig+0x4f4>)
 800241c:	69db      	ldr	r3, [r3, #28]
 800241e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002422:	2b00      	cmp	r3, #0
 8002424:	d10d      	bne.n	8002442 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002426:	4b94      	ldr	r3, [pc, #592]	; (8002678 <HAL_RCC_OscConfig+0x4f4>)
 8002428:	69db      	ldr	r3, [r3, #28]
 800242a:	4a93      	ldr	r2, [pc, #588]	; (8002678 <HAL_RCC_OscConfig+0x4f4>)
 800242c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002430:	61d3      	str	r3, [r2, #28]
 8002432:	4b91      	ldr	r3, [pc, #580]	; (8002678 <HAL_RCC_OscConfig+0x4f4>)
 8002434:	69db      	ldr	r3, [r3, #28]
 8002436:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800243a:	60bb      	str	r3, [r7, #8]
 800243c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800243e:	2301      	movs	r3, #1
 8002440:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002442:	4b8e      	ldr	r3, [pc, #568]	; (800267c <HAL_RCC_OscConfig+0x4f8>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800244a:	2b00      	cmp	r3, #0
 800244c:	d118      	bne.n	8002480 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800244e:	4b8b      	ldr	r3, [pc, #556]	; (800267c <HAL_RCC_OscConfig+0x4f8>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a8a      	ldr	r2, [pc, #552]	; (800267c <HAL_RCC_OscConfig+0x4f8>)
 8002454:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002458:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800245a:	f7fe fd2b 	bl	8000eb4 <HAL_GetTick>
 800245e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002460:	e008      	b.n	8002474 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002462:	f7fe fd27 	bl	8000eb4 <HAL_GetTick>
 8002466:	4602      	mov	r2, r0
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	1ad3      	subs	r3, r2, r3
 800246c:	2b64      	cmp	r3, #100	; 0x64
 800246e:	d901      	bls.n	8002474 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002470:	2303      	movs	r3, #3
 8002472:	e0fd      	b.n	8002670 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002474:	4b81      	ldr	r3, [pc, #516]	; (800267c <HAL_RCC_OscConfig+0x4f8>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800247c:	2b00      	cmp	r3, #0
 800247e:	d0f0      	beq.n	8002462 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	2b01      	cmp	r3, #1
 8002486:	d106      	bne.n	8002496 <HAL_RCC_OscConfig+0x312>
 8002488:	4b7b      	ldr	r3, [pc, #492]	; (8002678 <HAL_RCC_OscConfig+0x4f4>)
 800248a:	6a1b      	ldr	r3, [r3, #32]
 800248c:	4a7a      	ldr	r2, [pc, #488]	; (8002678 <HAL_RCC_OscConfig+0x4f4>)
 800248e:	f043 0301 	orr.w	r3, r3, #1
 8002492:	6213      	str	r3, [r2, #32]
 8002494:	e02d      	b.n	80024f2 <HAL_RCC_OscConfig+0x36e>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	68db      	ldr	r3, [r3, #12]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d10c      	bne.n	80024b8 <HAL_RCC_OscConfig+0x334>
 800249e:	4b76      	ldr	r3, [pc, #472]	; (8002678 <HAL_RCC_OscConfig+0x4f4>)
 80024a0:	6a1b      	ldr	r3, [r3, #32]
 80024a2:	4a75      	ldr	r2, [pc, #468]	; (8002678 <HAL_RCC_OscConfig+0x4f4>)
 80024a4:	f023 0301 	bic.w	r3, r3, #1
 80024a8:	6213      	str	r3, [r2, #32]
 80024aa:	4b73      	ldr	r3, [pc, #460]	; (8002678 <HAL_RCC_OscConfig+0x4f4>)
 80024ac:	6a1b      	ldr	r3, [r3, #32]
 80024ae:	4a72      	ldr	r2, [pc, #456]	; (8002678 <HAL_RCC_OscConfig+0x4f4>)
 80024b0:	f023 0304 	bic.w	r3, r3, #4
 80024b4:	6213      	str	r3, [r2, #32]
 80024b6:	e01c      	b.n	80024f2 <HAL_RCC_OscConfig+0x36e>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	2b05      	cmp	r3, #5
 80024be:	d10c      	bne.n	80024da <HAL_RCC_OscConfig+0x356>
 80024c0:	4b6d      	ldr	r3, [pc, #436]	; (8002678 <HAL_RCC_OscConfig+0x4f4>)
 80024c2:	6a1b      	ldr	r3, [r3, #32]
 80024c4:	4a6c      	ldr	r2, [pc, #432]	; (8002678 <HAL_RCC_OscConfig+0x4f4>)
 80024c6:	f043 0304 	orr.w	r3, r3, #4
 80024ca:	6213      	str	r3, [r2, #32]
 80024cc:	4b6a      	ldr	r3, [pc, #424]	; (8002678 <HAL_RCC_OscConfig+0x4f4>)
 80024ce:	6a1b      	ldr	r3, [r3, #32]
 80024d0:	4a69      	ldr	r2, [pc, #420]	; (8002678 <HAL_RCC_OscConfig+0x4f4>)
 80024d2:	f043 0301 	orr.w	r3, r3, #1
 80024d6:	6213      	str	r3, [r2, #32]
 80024d8:	e00b      	b.n	80024f2 <HAL_RCC_OscConfig+0x36e>
 80024da:	4b67      	ldr	r3, [pc, #412]	; (8002678 <HAL_RCC_OscConfig+0x4f4>)
 80024dc:	6a1b      	ldr	r3, [r3, #32]
 80024de:	4a66      	ldr	r2, [pc, #408]	; (8002678 <HAL_RCC_OscConfig+0x4f4>)
 80024e0:	f023 0301 	bic.w	r3, r3, #1
 80024e4:	6213      	str	r3, [r2, #32]
 80024e6:	4b64      	ldr	r3, [pc, #400]	; (8002678 <HAL_RCC_OscConfig+0x4f4>)
 80024e8:	6a1b      	ldr	r3, [r3, #32]
 80024ea:	4a63      	ldr	r2, [pc, #396]	; (8002678 <HAL_RCC_OscConfig+0x4f4>)
 80024ec:	f023 0304 	bic.w	r3, r3, #4
 80024f0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	68db      	ldr	r3, [r3, #12]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d015      	beq.n	8002526 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024fa:	f7fe fcdb 	bl	8000eb4 <HAL_GetTick>
 80024fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002500:	e00a      	b.n	8002518 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002502:	f7fe fcd7 	bl	8000eb4 <HAL_GetTick>
 8002506:	4602      	mov	r2, r0
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	1ad3      	subs	r3, r2, r3
 800250c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002510:	4293      	cmp	r3, r2
 8002512:	d901      	bls.n	8002518 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002514:	2303      	movs	r3, #3
 8002516:	e0ab      	b.n	8002670 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002518:	4b57      	ldr	r3, [pc, #348]	; (8002678 <HAL_RCC_OscConfig+0x4f4>)
 800251a:	6a1b      	ldr	r3, [r3, #32]
 800251c:	f003 0302 	and.w	r3, r3, #2
 8002520:	2b00      	cmp	r3, #0
 8002522:	d0ee      	beq.n	8002502 <HAL_RCC_OscConfig+0x37e>
 8002524:	e014      	b.n	8002550 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002526:	f7fe fcc5 	bl	8000eb4 <HAL_GetTick>
 800252a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800252c:	e00a      	b.n	8002544 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800252e:	f7fe fcc1 	bl	8000eb4 <HAL_GetTick>
 8002532:	4602      	mov	r2, r0
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	f241 3288 	movw	r2, #5000	; 0x1388
 800253c:	4293      	cmp	r3, r2
 800253e:	d901      	bls.n	8002544 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002540:	2303      	movs	r3, #3
 8002542:	e095      	b.n	8002670 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002544:	4b4c      	ldr	r3, [pc, #304]	; (8002678 <HAL_RCC_OscConfig+0x4f4>)
 8002546:	6a1b      	ldr	r3, [r3, #32]
 8002548:	f003 0302 	and.w	r3, r3, #2
 800254c:	2b00      	cmp	r3, #0
 800254e:	d1ee      	bne.n	800252e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002550:	7dfb      	ldrb	r3, [r7, #23]
 8002552:	2b01      	cmp	r3, #1
 8002554:	d105      	bne.n	8002562 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002556:	4b48      	ldr	r3, [pc, #288]	; (8002678 <HAL_RCC_OscConfig+0x4f4>)
 8002558:	69db      	ldr	r3, [r3, #28]
 800255a:	4a47      	ldr	r2, [pc, #284]	; (8002678 <HAL_RCC_OscConfig+0x4f4>)
 800255c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002560:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	69db      	ldr	r3, [r3, #28]
 8002566:	2b00      	cmp	r3, #0
 8002568:	f000 8081 	beq.w	800266e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800256c:	4b42      	ldr	r3, [pc, #264]	; (8002678 <HAL_RCC_OscConfig+0x4f4>)
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f003 030c 	and.w	r3, r3, #12
 8002574:	2b08      	cmp	r3, #8
 8002576:	d061      	beq.n	800263c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	69db      	ldr	r3, [r3, #28]
 800257c:	2b02      	cmp	r3, #2
 800257e:	d146      	bne.n	800260e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002580:	4b3f      	ldr	r3, [pc, #252]	; (8002680 <HAL_RCC_OscConfig+0x4fc>)
 8002582:	2200      	movs	r2, #0
 8002584:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002586:	f7fe fc95 	bl	8000eb4 <HAL_GetTick>
 800258a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800258c:	e008      	b.n	80025a0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800258e:	f7fe fc91 	bl	8000eb4 <HAL_GetTick>
 8002592:	4602      	mov	r2, r0
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	1ad3      	subs	r3, r2, r3
 8002598:	2b02      	cmp	r3, #2
 800259a:	d901      	bls.n	80025a0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800259c:	2303      	movs	r3, #3
 800259e:	e067      	b.n	8002670 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025a0:	4b35      	ldr	r3, [pc, #212]	; (8002678 <HAL_RCC_OscConfig+0x4f4>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d1f0      	bne.n	800258e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6a1b      	ldr	r3, [r3, #32]
 80025b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025b4:	d108      	bne.n	80025c8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80025b6:	4b30      	ldr	r3, [pc, #192]	; (8002678 <HAL_RCC_OscConfig+0x4f4>)
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	492d      	ldr	r1, [pc, #180]	; (8002678 <HAL_RCC_OscConfig+0x4f4>)
 80025c4:	4313      	orrs	r3, r2
 80025c6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025c8:	4b2b      	ldr	r3, [pc, #172]	; (8002678 <HAL_RCC_OscConfig+0x4f4>)
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6a19      	ldr	r1, [r3, #32]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d8:	430b      	orrs	r3, r1
 80025da:	4927      	ldr	r1, [pc, #156]	; (8002678 <HAL_RCC_OscConfig+0x4f4>)
 80025dc:	4313      	orrs	r3, r2
 80025de:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025e0:	4b27      	ldr	r3, [pc, #156]	; (8002680 <HAL_RCC_OscConfig+0x4fc>)
 80025e2:	2201      	movs	r2, #1
 80025e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025e6:	f7fe fc65 	bl	8000eb4 <HAL_GetTick>
 80025ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025ec:	e008      	b.n	8002600 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025ee:	f7fe fc61 	bl	8000eb4 <HAL_GetTick>
 80025f2:	4602      	mov	r2, r0
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	1ad3      	subs	r3, r2, r3
 80025f8:	2b02      	cmp	r3, #2
 80025fa:	d901      	bls.n	8002600 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80025fc:	2303      	movs	r3, #3
 80025fe:	e037      	b.n	8002670 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002600:	4b1d      	ldr	r3, [pc, #116]	; (8002678 <HAL_RCC_OscConfig+0x4f4>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002608:	2b00      	cmp	r3, #0
 800260a:	d0f0      	beq.n	80025ee <HAL_RCC_OscConfig+0x46a>
 800260c:	e02f      	b.n	800266e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800260e:	4b1c      	ldr	r3, [pc, #112]	; (8002680 <HAL_RCC_OscConfig+0x4fc>)
 8002610:	2200      	movs	r2, #0
 8002612:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002614:	f7fe fc4e 	bl	8000eb4 <HAL_GetTick>
 8002618:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800261a:	e008      	b.n	800262e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800261c:	f7fe fc4a 	bl	8000eb4 <HAL_GetTick>
 8002620:	4602      	mov	r2, r0
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	2b02      	cmp	r3, #2
 8002628:	d901      	bls.n	800262e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800262a:	2303      	movs	r3, #3
 800262c:	e020      	b.n	8002670 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800262e:	4b12      	ldr	r3, [pc, #72]	; (8002678 <HAL_RCC_OscConfig+0x4f4>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002636:	2b00      	cmp	r3, #0
 8002638:	d1f0      	bne.n	800261c <HAL_RCC_OscConfig+0x498>
 800263a:	e018      	b.n	800266e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	69db      	ldr	r3, [r3, #28]
 8002640:	2b01      	cmp	r3, #1
 8002642:	d101      	bne.n	8002648 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	e013      	b.n	8002670 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002648:	4b0b      	ldr	r3, [pc, #44]	; (8002678 <HAL_RCC_OscConfig+0x4f4>)
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6a1b      	ldr	r3, [r3, #32]
 8002658:	429a      	cmp	r2, r3
 800265a:	d106      	bne.n	800266a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002666:	429a      	cmp	r2, r3
 8002668:	d001      	beq.n	800266e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e000      	b.n	8002670 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800266e:	2300      	movs	r3, #0
}
 8002670:	4618      	mov	r0, r3
 8002672:	3718      	adds	r7, #24
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}
 8002678:	40021000 	.word	0x40021000
 800267c:	40007000 	.word	0x40007000
 8002680:	42420060 	.word	0x42420060

08002684 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b084      	sub	sp, #16
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d101      	bne.n	8002698 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	e0d0      	b.n	800283a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002698:	4b6a      	ldr	r3, [pc, #424]	; (8002844 <HAL_RCC_ClockConfig+0x1c0>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 0307 	and.w	r3, r3, #7
 80026a0:	683a      	ldr	r2, [r7, #0]
 80026a2:	429a      	cmp	r2, r3
 80026a4:	d910      	bls.n	80026c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026a6:	4b67      	ldr	r3, [pc, #412]	; (8002844 <HAL_RCC_ClockConfig+0x1c0>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f023 0207 	bic.w	r2, r3, #7
 80026ae:	4965      	ldr	r1, [pc, #404]	; (8002844 <HAL_RCC_ClockConfig+0x1c0>)
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	4313      	orrs	r3, r2
 80026b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026b6:	4b63      	ldr	r3, [pc, #396]	; (8002844 <HAL_RCC_ClockConfig+0x1c0>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 0307 	and.w	r3, r3, #7
 80026be:	683a      	ldr	r2, [r7, #0]
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d001      	beq.n	80026c8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e0b8      	b.n	800283a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 0302 	and.w	r3, r3, #2
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d020      	beq.n	8002716 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 0304 	and.w	r3, r3, #4
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d005      	beq.n	80026ec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026e0:	4b59      	ldr	r3, [pc, #356]	; (8002848 <HAL_RCC_ClockConfig+0x1c4>)
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	4a58      	ldr	r2, [pc, #352]	; (8002848 <HAL_RCC_ClockConfig+0x1c4>)
 80026e6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80026ea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 0308 	and.w	r3, r3, #8
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d005      	beq.n	8002704 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026f8:	4b53      	ldr	r3, [pc, #332]	; (8002848 <HAL_RCC_ClockConfig+0x1c4>)
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	4a52      	ldr	r2, [pc, #328]	; (8002848 <HAL_RCC_ClockConfig+0x1c4>)
 80026fe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002702:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002704:	4b50      	ldr	r3, [pc, #320]	; (8002848 <HAL_RCC_ClockConfig+0x1c4>)
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	494d      	ldr	r1, [pc, #308]	; (8002848 <HAL_RCC_ClockConfig+0x1c4>)
 8002712:	4313      	orrs	r3, r2
 8002714:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 0301 	and.w	r3, r3, #1
 800271e:	2b00      	cmp	r3, #0
 8002720:	d040      	beq.n	80027a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	2b01      	cmp	r3, #1
 8002728:	d107      	bne.n	800273a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800272a:	4b47      	ldr	r3, [pc, #284]	; (8002848 <HAL_RCC_ClockConfig+0x1c4>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002732:	2b00      	cmp	r3, #0
 8002734:	d115      	bne.n	8002762 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e07f      	b.n	800283a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	2b02      	cmp	r3, #2
 8002740:	d107      	bne.n	8002752 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002742:	4b41      	ldr	r3, [pc, #260]	; (8002848 <HAL_RCC_ClockConfig+0x1c4>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d109      	bne.n	8002762 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e073      	b.n	800283a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002752:	4b3d      	ldr	r3, [pc, #244]	; (8002848 <HAL_RCC_ClockConfig+0x1c4>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0302 	and.w	r3, r3, #2
 800275a:	2b00      	cmp	r3, #0
 800275c:	d101      	bne.n	8002762 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e06b      	b.n	800283a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002762:	4b39      	ldr	r3, [pc, #228]	; (8002848 <HAL_RCC_ClockConfig+0x1c4>)
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	f023 0203 	bic.w	r2, r3, #3
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	4936      	ldr	r1, [pc, #216]	; (8002848 <HAL_RCC_ClockConfig+0x1c4>)
 8002770:	4313      	orrs	r3, r2
 8002772:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002774:	f7fe fb9e 	bl	8000eb4 <HAL_GetTick>
 8002778:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800277a:	e00a      	b.n	8002792 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800277c:	f7fe fb9a 	bl	8000eb4 <HAL_GetTick>
 8002780:	4602      	mov	r2, r0
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	f241 3288 	movw	r2, #5000	; 0x1388
 800278a:	4293      	cmp	r3, r2
 800278c:	d901      	bls.n	8002792 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	e053      	b.n	800283a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002792:	4b2d      	ldr	r3, [pc, #180]	; (8002848 <HAL_RCC_ClockConfig+0x1c4>)
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	f003 020c 	and.w	r2, r3, #12
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d1eb      	bne.n	800277c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027a4:	4b27      	ldr	r3, [pc, #156]	; (8002844 <HAL_RCC_ClockConfig+0x1c0>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f003 0307 	and.w	r3, r3, #7
 80027ac:	683a      	ldr	r2, [r7, #0]
 80027ae:	429a      	cmp	r2, r3
 80027b0:	d210      	bcs.n	80027d4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027b2:	4b24      	ldr	r3, [pc, #144]	; (8002844 <HAL_RCC_ClockConfig+0x1c0>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f023 0207 	bic.w	r2, r3, #7
 80027ba:	4922      	ldr	r1, [pc, #136]	; (8002844 <HAL_RCC_ClockConfig+0x1c0>)
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	4313      	orrs	r3, r2
 80027c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027c2:	4b20      	ldr	r3, [pc, #128]	; (8002844 <HAL_RCC_ClockConfig+0x1c0>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 0307 	and.w	r3, r3, #7
 80027ca:	683a      	ldr	r2, [r7, #0]
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d001      	beq.n	80027d4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e032      	b.n	800283a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 0304 	and.w	r3, r3, #4
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d008      	beq.n	80027f2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027e0:	4b19      	ldr	r3, [pc, #100]	; (8002848 <HAL_RCC_ClockConfig+0x1c4>)
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	4916      	ldr	r1, [pc, #88]	; (8002848 <HAL_RCC_ClockConfig+0x1c4>)
 80027ee:	4313      	orrs	r3, r2
 80027f0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0308 	and.w	r3, r3, #8
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d009      	beq.n	8002812 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80027fe:	4b12      	ldr	r3, [pc, #72]	; (8002848 <HAL_RCC_ClockConfig+0x1c4>)
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	691b      	ldr	r3, [r3, #16]
 800280a:	00db      	lsls	r3, r3, #3
 800280c:	490e      	ldr	r1, [pc, #56]	; (8002848 <HAL_RCC_ClockConfig+0x1c4>)
 800280e:	4313      	orrs	r3, r2
 8002810:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002812:	f000 f821 	bl	8002858 <HAL_RCC_GetSysClockFreq>
 8002816:	4602      	mov	r2, r0
 8002818:	4b0b      	ldr	r3, [pc, #44]	; (8002848 <HAL_RCC_ClockConfig+0x1c4>)
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	091b      	lsrs	r3, r3, #4
 800281e:	f003 030f 	and.w	r3, r3, #15
 8002822:	490a      	ldr	r1, [pc, #40]	; (800284c <HAL_RCC_ClockConfig+0x1c8>)
 8002824:	5ccb      	ldrb	r3, [r1, r3]
 8002826:	fa22 f303 	lsr.w	r3, r2, r3
 800282a:	4a09      	ldr	r2, [pc, #36]	; (8002850 <HAL_RCC_ClockConfig+0x1cc>)
 800282c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800282e:	4b09      	ldr	r3, [pc, #36]	; (8002854 <HAL_RCC_ClockConfig+0x1d0>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4618      	mov	r0, r3
 8002834:	f7fe fafc 	bl	8000e30 <HAL_InitTick>

  return HAL_OK;
 8002838:	2300      	movs	r3, #0
}
 800283a:	4618      	mov	r0, r3
 800283c:	3710      	adds	r7, #16
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	40022000 	.word	0x40022000
 8002848:	40021000 	.word	0x40021000
 800284c:	08004318 	.word	0x08004318
 8002850:	20000000 	.word	0x20000000
 8002854:	20000004 	.word	0x20000004

08002858 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002858:	b490      	push	{r4, r7}
 800285a:	b08a      	sub	sp, #40	; 0x28
 800285c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800285e:	4b2a      	ldr	r3, [pc, #168]	; (8002908 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002860:	1d3c      	adds	r4, r7, #4
 8002862:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002864:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002868:	f240 2301 	movw	r3, #513	; 0x201
 800286c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800286e:	2300      	movs	r3, #0
 8002870:	61fb      	str	r3, [r7, #28]
 8002872:	2300      	movs	r3, #0
 8002874:	61bb      	str	r3, [r7, #24]
 8002876:	2300      	movs	r3, #0
 8002878:	627b      	str	r3, [r7, #36]	; 0x24
 800287a:	2300      	movs	r3, #0
 800287c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800287e:	2300      	movs	r3, #0
 8002880:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002882:	4b22      	ldr	r3, [pc, #136]	; (800290c <HAL_RCC_GetSysClockFreq+0xb4>)
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002888:	69fb      	ldr	r3, [r7, #28]
 800288a:	f003 030c 	and.w	r3, r3, #12
 800288e:	2b04      	cmp	r3, #4
 8002890:	d002      	beq.n	8002898 <HAL_RCC_GetSysClockFreq+0x40>
 8002892:	2b08      	cmp	r3, #8
 8002894:	d003      	beq.n	800289e <HAL_RCC_GetSysClockFreq+0x46>
 8002896:	e02d      	b.n	80028f4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002898:	4b1d      	ldr	r3, [pc, #116]	; (8002910 <HAL_RCC_GetSysClockFreq+0xb8>)
 800289a:	623b      	str	r3, [r7, #32]
      break;
 800289c:	e02d      	b.n	80028fa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	0c9b      	lsrs	r3, r3, #18
 80028a2:	f003 030f 	and.w	r3, r3, #15
 80028a6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80028aa:	4413      	add	r3, r2
 80028ac:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80028b0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d013      	beq.n	80028e4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80028bc:	4b13      	ldr	r3, [pc, #76]	; (800290c <HAL_RCC_GetSysClockFreq+0xb4>)
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	0c5b      	lsrs	r3, r3, #17
 80028c2:	f003 0301 	and.w	r3, r3, #1
 80028c6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80028ca:	4413      	add	r3, r2
 80028cc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80028d0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	4a0e      	ldr	r2, [pc, #56]	; (8002910 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028d6:	fb02 f203 	mul.w	r2, r2, r3
 80028da:	69bb      	ldr	r3, [r7, #24]
 80028dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80028e0:	627b      	str	r3, [r7, #36]	; 0x24
 80028e2:	e004      	b.n	80028ee <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	4a0b      	ldr	r2, [pc, #44]	; (8002914 <HAL_RCC_GetSysClockFreq+0xbc>)
 80028e8:	fb02 f303 	mul.w	r3, r2, r3
 80028ec:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80028ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f0:	623b      	str	r3, [r7, #32]
      break;
 80028f2:	e002      	b.n	80028fa <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80028f4:	4b06      	ldr	r3, [pc, #24]	; (8002910 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028f6:	623b      	str	r3, [r7, #32]
      break;
 80028f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028fa:	6a3b      	ldr	r3, [r7, #32]
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	3728      	adds	r7, #40	; 0x28
 8002900:	46bd      	mov	sp, r7
 8002902:	bc90      	pop	{r4, r7}
 8002904:	4770      	bx	lr
 8002906:	bf00      	nop
 8002908:	08004308 	.word	0x08004308
 800290c:	40021000 	.word	0x40021000
 8002910:	007a1200 	.word	0x007a1200
 8002914:	003d0900 	.word	0x003d0900

08002918 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002918:	b480      	push	{r7}
 800291a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800291c:	4b02      	ldr	r3, [pc, #8]	; (8002928 <HAL_RCC_GetHCLKFreq+0x10>)
 800291e:	681b      	ldr	r3, [r3, #0]
}
 8002920:	4618      	mov	r0, r3
 8002922:	46bd      	mov	sp, r7
 8002924:	bc80      	pop	{r7}
 8002926:	4770      	bx	lr
 8002928:	20000000 	.word	0x20000000

0800292c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002930:	f7ff fff2 	bl	8002918 <HAL_RCC_GetHCLKFreq>
 8002934:	4602      	mov	r2, r0
 8002936:	4b05      	ldr	r3, [pc, #20]	; (800294c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	0a1b      	lsrs	r3, r3, #8
 800293c:	f003 0307 	and.w	r3, r3, #7
 8002940:	4903      	ldr	r1, [pc, #12]	; (8002950 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002942:	5ccb      	ldrb	r3, [r1, r3]
 8002944:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002948:	4618      	mov	r0, r3
 800294a:	bd80      	pop	{r7, pc}
 800294c:	40021000 	.word	0x40021000
 8002950:	08004328 	.word	0x08004328

08002954 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002958:	f7ff ffde 	bl	8002918 <HAL_RCC_GetHCLKFreq>
 800295c:	4602      	mov	r2, r0
 800295e:	4b05      	ldr	r3, [pc, #20]	; (8002974 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	0adb      	lsrs	r3, r3, #11
 8002964:	f003 0307 	and.w	r3, r3, #7
 8002968:	4903      	ldr	r1, [pc, #12]	; (8002978 <HAL_RCC_GetPCLK2Freq+0x24>)
 800296a:	5ccb      	ldrb	r3, [r1, r3]
 800296c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002970:	4618      	mov	r0, r3
 8002972:	bd80      	pop	{r7, pc}
 8002974:	40021000 	.word	0x40021000
 8002978:	08004328 	.word	0x08004328

0800297c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800297c:	b480      	push	{r7}
 800297e:	b085      	sub	sp, #20
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002984:	4b0a      	ldr	r3, [pc, #40]	; (80029b0 <RCC_Delay+0x34>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a0a      	ldr	r2, [pc, #40]	; (80029b4 <RCC_Delay+0x38>)
 800298a:	fba2 2303 	umull	r2, r3, r2, r3
 800298e:	0a5b      	lsrs	r3, r3, #9
 8002990:	687a      	ldr	r2, [r7, #4]
 8002992:	fb02 f303 	mul.w	r3, r2, r3
 8002996:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002998:	bf00      	nop
  }
  while (Delay --);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	1e5a      	subs	r2, r3, #1
 800299e:	60fa      	str	r2, [r7, #12]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d1f9      	bne.n	8002998 <RCC_Delay+0x1c>
}
 80029a4:	bf00      	nop
 80029a6:	bf00      	nop
 80029a8:	3714      	adds	r7, #20
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bc80      	pop	{r7}
 80029ae:	4770      	bx	lr
 80029b0:	20000000 	.word	0x20000000
 80029b4:	10624dd3 	.word	0x10624dd3

080029b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b086      	sub	sp, #24
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80029c0:	2300      	movs	r3, #0
 80029c2:	613b      	str	r3, [r7, #16]
 80029c4:	2300      	movs	r3, #0
 80029c6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 0301 	and.w	r3, r3, #1
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d07d      	beq.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80029d4:	2300      	movs	r3, #0
 80029d6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029d8:	4b4f      	ldr	r3, [pc, #316]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029da:	69db      	ldr	r3, [r3, #28]
 80029dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d10d      	bne.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029e4:	4b4c      	ldr	r3, [pc, #304]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029e6:	69db      	ldr	r3, [r3, #28]
 80029e8:	4a4b      	ldr	r2, [pc, #300]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029ee:	61d3      	str	r3, [r2, #28]
 80029f0:	4b49      	ldr	r3, [pc, #292]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029f2:	69db      	ldr	r3, [r3, #28]
 80029f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029f8:	60bb      	str	r3, [r7, #8]
 80029fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029fc:	2301      	movs	r3, #1
 80029fe:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a00:	4b46      	ldr	r3, [pc, #280]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d118      	bne.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a0c:	4b43      	ldr	r3, [pc, #268]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a42      	ldr	r2, [pc, #264]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a16:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a18:	f7fe fa4c 	bl	8000eb4 <HAL_GetTick>
 8002a1c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a1e:	e008      	b.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a20:	f7fe fa48 	bl	8000eb4 <HAL_GetTick>
 8002a24:	4602      	mov	r2, r0
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	2b64      	cmp	r3, #100	; 0x64
 8002a2c:	d901      	bls.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	e06d      	b.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a32:	4b3a      	ldr	r3, [pc, #232]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d0f0      	beq.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002a3e:	4b36      	ldr	r3, [pc, #216]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a40:	6a1b      	ldr	r3, [r3, #32]
 8002a42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a46:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d02e      	beq.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a56:	68fa      	ldr	r2, [r7, #12]
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d027      	beq.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002a5c:	4b2e      	ldr	r3, [pc, #184]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a5e:	6a1b      	ldr	r3, [r3, #32]
 8002a60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a64:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002a66:	4b2e      	ldr	r3, [pc, #184]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002a68:	2201      	movs	r2, #1
 8002a6a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002a6c:	4b2c      	ldr	r3, [pc, #176]	; (8002b20 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002a6e:	2200      	movs	r2, #0
 8002a70:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002a72:	4a29      	ldr	r2, [pc, #164]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	f003 0301 	and.w	r3, r3, #1
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d014      	beq.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a82:	f7fe fa17 	bl	8000eb4 <HAL_GetTick>
 8002a86:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a88:	e00a      	b.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a8a:	f7fe fa13 	bl	8000eb4 <HAL_GetTick>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	693b      	ldr	r3, [r7, #16]
 8002a92:	1ad3      	subs	r3, r2, r3
 8002a94:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d901      	bls.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	e036      	b.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aa0:	4b1d      	ldr	r3, [pc, #116]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002aa2:	6a1b      	ldr	r3, [r3, #32]
 8002aa4:	f003 0302 	and.w	r3, r3, #2
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d0ee      	beq.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002aac:	4b1a      	ldr	r3, [pc, #104]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002aae:	6a1b      	ldr	r3, [r3, #32]
 8002ab0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	4917      	ldr	r1, [pc, #92]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002aba:	4313      	orrs	r3, r2
 8002abc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002abe:	7dfb      	ldrb	r3, [r7, #23]
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d105      	bne.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ac4:	4b14      	ldr	r3, [pc, #80]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ac6:	69db      	ldr	r3, [r3, #28]
 8002ac8:	4a13      	ldr	r2, [pc, #76]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002aca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ace:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 0302 	and.w	r3, r3, #2
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d008      	beq.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002adc:	4b0e      	ldr	r3, [pc, #56]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	490b      	ldr	r1, [pc, #44]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002aea:	4313      	orrs	r3, r2
 8002aec:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 0310 	and.w	r3, r3, #16
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d008      	beq.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002afa:	4b07      	ldr	r3, [pc, #28]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	68db      	ldr	r3, [r3, #12]
 8002b06:	4904      	ldr	r1, [pc, #16]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002b0c:	2300      	movs	r3, #0
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3718      	adds	r7, #24
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	40021000 	.word	0x40021000
 8002b1c:	40007000 	.word	0x40007000
 8002b20:	42420440 	.word	0x42420440

08002b24 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b082      	sub	sp, #8
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d101      	bne.n	8002b36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e03f      	b.n	8002bb6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d106      	bne.n	8002b50 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2200      	movs	r2, #0
 8002b46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f7fe f8be 	bl	8000ccc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2224      	movs	r2, #36	; 0x24
 8002b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	68da      	ldr	r2, [r3, #12]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b66:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	f000 fd9b 	bl	80036a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	691a      	ldr	r2, [r3, #16]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002b7c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	695a      	ldr	r2, [r3, #20]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002b8c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	68da      	ldr	r2, [r3, #12]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b9c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2220      	movs	r2, #32
 8002ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2220      	movs	r2, #32
 8002bb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002bb4:	2300      	movs	r3, #0
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3708      	adds	r7, #8
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}

08002bbe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bbe:	b580      	push	{r7, lr}
 8002bc0:	b08a      	sub	sp, #40	; 0x28
 8002bc2:	af02      	add	r7, sp, #8
 8002bc4:	60f8      	str	r0, [r7, #12]
 8002bc6:	60b9      	str	r1, [r7, #8]
 8002bc8:	603b      	str	r3, [r7, #0]
 8002bca:	4613      	mov	r3, r2
 8002bcc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	2b20      	cmp	r3, #32
 8002bdc:	d17c      	bne.n	8002cd8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d002      	beq.n	8002bea <HAL_UART_Transmit+0x2c>
 8002be4:	88fb      	ldrh	r3, [r7, #6]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d101      	bne.n	8002bee <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e075      	b.n	8002cda <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d101      	bne.n	8002bfc <HAL_UART_Transmit+0x3e>
 8002bf8:	2302      	movs	r3, #2
 8002bfa:	e06e      	b.n	8002cda <HAL_UART_Transmit+0x11c>
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2201      	movs	r2, #1
 8002c00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2200      	movs	r2, #0
 8002c08:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2221      	movs	r2, #33	; 0x21
 8002c0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c12:	f7fe f94f 	bl	8000eb4 <HAL_GetTick>
 8002c16:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	88fa      	ldrh	r2, [r7, #6]
 8002c1c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	88fa      	ldrh	r2, [r7, #6]
 8002c22:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c2c:	d108      	bne.n	8002c40 <HAL_UART_Transmit+0x82>
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	691b      	ldr	r3, [r3, #16]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d104      	bne.n	8002c40 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002c36:	2300      	movs	r3, #0
 8002c38:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	61bb      	str	r3, [r7, #24]
 8002c3e:	e003      	b.n	8002c48 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c44:	2300      	movs	r3, #0
 8002c46:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002c50:	e02a      	b.n	8002ca8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	9300      	str	r3, [sp, #0]
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	2180      	movs	r1, #128	; 0x80
 8002c5c:	68f8      	ldr	r0, [r7, #12]
 8002c5e:	f000 fb0d 	bl	800327c <UART_WaitOnFlagUntilTimeout>
 8002c62:	4603      	mov	r3, r0
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d001      	beq.n	8002c6c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002c68:	2303      	movs	r3, #3
 8002c6a:	e036      	b.n	8002cda <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002c6c:	69fb      	ldr	r3, [r7, #28]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d10b      	bne.n	8002c8a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002c72:	69bb      	ldr	r3, [r7, #24]
 8002c74:	881b      	ldrh	r3, [r3, #0]
 8002c76:	461a      	mov	r2, r3
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c80:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002c82:	69bb      	ldr	r3, [r7, #24]
 8002c84:	3302      	adds	r3, #2
 8002c86:	61bb      	str	r3, [r7, #24]
 8002c88:	e007      	b.n	8002c9a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002c8a:	69fb      	ldr	r3, [r7, #28]
 8002c8c:	781a      	ldrb	r2, [r3, #0]
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	3301      	adds	r3, #1
 8002c98:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002c9e:	b29b      	uxth	r3, r3
 8002ca0:	3b01      	subs	r3, #1
 8002ca2:	b29a      	uxth	r2, r3
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002cac:	b29b      	uxth	r3, r3
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d1cf      	bne.n	8002c52 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	9300      	str	r3, [sp, #0]
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	2140      	movs	r1, #64	; 0x40
 8002cbc:	68f8      	ldr	r0, [r7, #12]
 8002cbe:	f000 fadd 	bl	800327c <UART_WaitOnFlagUntilTimeout>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d001      	beq.n	8002ccc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002cc8:	2303      	movs	r3, #3
 8002cca:	e006      	b.n	8002cda <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2220      	movs	r2, #32
 8002cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	e000      	b.n	8002cda <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002cd8:	2302      	movs	r3, #2
  }
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3720      	adds	r7, #32
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}

08002ce2 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002ce2:	b580      	push	{r7, lr}
 8002ce4:	b086      	sub	sp, #24
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	60f8      	str	r0, [r7, #12]
 8002cea:	60b9      	str	r1, [r7, #8]
 8002cec:	4613      	mov	r3, r2
 8002cee:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	2b20      	cmp	r3, #32
 8002cfa:	d13c      	bne.n	8002d76 <HAL_UARTEx_ReceiveToIdle_DMA+0x94>
  {
    if ((pData == NULL) || (Size == 0U))
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d002      	beq.n	8002d08 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8002d02:	88fb      	ldrh	r3, [r7, #6]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d101      	bne.n	8002d0c <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e035      	b.n	8002d78 <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
    }

    __HAL_LOCK(huart);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d101      	bne.n	8002d1a <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8002d16:	2302      	movs	r3, #2
 8002d18:	e02e      	b.n	8002d78 <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2201      	movs	r2, #1
 8002d26:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8002d28:	88fb      	ldrh	r3, [r7, #6]
 8002d2a:	461a      	mov	r2, r3
 8002d2c:	68b9      	ldr	r1, [r7, #8]
 8002d2e:	68f8      	ldr	r0, [r7, #12]
 8002d30:	f000 faee 	bl	8003310 <UART_Start_Receive_DMA>
 8002d34:	4603      	mov	r3, r0
 8002d36:	75fb      	strb	r3, [r7, #23]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8002d38:	7dfb      	ldrb	r3, [r7, #23]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d119      	bne.n	8002d72 <HAL_UARTEx_ReceiveToIdle_DMA+0x90>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d113      	bne.n	8002d6e <HAL_UARTEx_ReceiveToIdle_DMA+0x8c>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002d46:	2300      	movs	r3, #0
 8002d48:	613b      	str	r3, [r7, #16]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	613b      	str	r3, [r7, #16]
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	613b      	str	r3, [r7, #16]
 8002d5a:	693b      	ldr	r3, [r7, #16]
        SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	68da      	ldr	r2, [r3, #12]
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f042 0210 	orr.w	r2, r2, #16
 8002d6a:	60da      	str	r2, [r3, #12]
 8002d6c:	e001      	b.n	8002d72 <HAL_UARTEx_ReceiveToIdle_DMA+0x90>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	75fb      	strb	r3, [r7, #23]
      }
    }

    return status;
 8002d72:	7dfb      	ldrb	r3, [r7, #23]
 8002d74:	e000      	b.n	8002d78 <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
  }
  else
  {
    return HAL_BUSY;
 8002d76:	2302      	movs	r3, #2
  }
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3718      	adds	r7, #24
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}

08002d80 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b08a      	sub	sp, #40	; 0x28
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	68db      	ldr	r3, [r3, #12]
 8002d96:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	695b      	ldr	r3, [r3, #20]
 8002d9e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8002da0:	2300      	movs	r3, #0
 8002da2:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8002da4:	2300      	movs	r3, #0
 8002da6:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002daa:	f003 030f 	and.w	r3, r3, #15
 8002dae:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8002db0:	69bb      	ldr	r3, [r7, #24]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d10d      	bne.n	8002dd2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db8:	f003 0320 	and.w	r3, r3, #32
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d008      	beq.n	8002dd2 <HAL_UART_IRQHandler+0x52>
 8002dc0:	6a3b      	ldr	r3, [r7, #32]
 8002dc2:	f003 0320 	and.w	r3, r3, #32
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d003      	beq.n	8002dd2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f000 fbc0 	bl	8003550 <UART_Receive_IT>
      return;
 8002dd0:	e17b      	b.n	80030ca <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002dd2:	69bb      	ldr	r3, [r7, #24]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	f000 80b1 	beq.w	8002f3c <HAL_UART_IRQHandler+0x1bc>
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	f003 0301 	and.w	r3, r3, #1
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d105      	bne.n	8002df0 <HAL_UART_IRQHandler+0x70>
 8002de4:	6a3b      	ldr	r3, [r7, #32]
 8002de6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	f000 80a6 	beq.w	8002f3c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df2:	f003 0301 	and.w	r3, r3, #1
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d00a      	beq.n	8002e10 <HAL_UART_IRQHandler+0x90>
 8002dfa:	6a3b      	ldr	r3, [r7, #32]
 8002dfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d005      	beq.n	8002e10 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e08:	f043 0201 	orr.w	r2, r3, #1
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e12:	f003 0304 	and.w	r3, r3, #4
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d00a      	beq.n	8002e30 <HAL_UART_IRQHandler+0xb0>
 8002e1a:	69fb      	ldr	r3, [r7, #28]
 8002e1c:	f003 0301 	and.w	r3, r3, #1
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d005      	beq.n	8002e30 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e28:	f043 0202 	orr.w	r2, r3, #2
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e32:	f003 0302 	and.w	r3, r3, #2
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d00a      	beq.n	8002e50 <HAL_UART_IRQHandler+0xd0>
 8002e3a:	69fb      	ldr	r3, [r7, #28]
 8002e3c:	f003 0301 	and.w	r3, r3, #1
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d005      	beq.n	8002e50 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e48:	f043 0204 	orr.w	r2, r3, #4
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e52:	f003 0308 	and.w	r3, r3, #8
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d00f      	beq.n	8002e7a <HAL_UART_IRQHandler+0xfa>
 8002e5a:	6a3b      	ldr	r3, [r7, #32]
 8002e5c:	f003 0320 	and.w	r3, r3, #32
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d104      	bne.n	8002e6e <HAL_UART_IRQHandler+0xee>
 8002e64:	69fb      	ldr	r3, [r7, #28]
 8002e66:	f003 0301 	and.w	r3, r3, #1
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d005      	beq.n	8002e7a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e72:	f043 0208 	orr.w	r2, r3, #8
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	f000 811e 	beq.w	80030c0 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e86:	f003 0320 	and.w	r3, r3, #32
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d007      	beq.n	8002e9e <HAL_UART_IRQHandler+0x11e>
 8002e8e:	6a3b      	ldr	r3, [r7, #32]
 8002e90:	f003 0320 	and.w	r3, r3, #32
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d002      	beq.n	8002e9e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8002e98:	6878      	ldr	r0, [r7, #4]
 8002e9a:	f000 fb59 	bl	8003550 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	695b      	ldr	r3, [r3, #20]
 8002ea4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	bf14      	ite	ne
 8002eac:	2301      	movne	r3, #1
 8002eae:	2300      	moveq	r3, #0
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb8:	f003 0308 	and.w	r3, r3, #8
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d102      	bne.n	8002ec6 <HAL_UART_IRQHandler+0x146>
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d031      	beq.n	8002f2a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f000 fa9b 	bl	8003402 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	695b      	ldr	r3, [r3, #20]
 8002ed2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d023      	beq.n	8002f22 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	695a      	ldr	r2, [r3, #20]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ee8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d013      	beq.n	8002f1a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ef6:	4a76      	ldr	r2, [pc, #472]	; (80030d0 <HAL_UART_IRQHandler+0x350>)
 8002ef8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002efe:	4618      	mov	r0, r3
 8002f00:	f7fe fdd4 	bl	8001aac <HAL_DMA_Abort_IT>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d016      	beq.n	8002f38 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f10:	687a      	ldr	r2, [r7, #4]
 8002f12:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002f14:	4610      	mov	r0, r2
 8002f16:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f18:	e00e      	b.n	8002f38 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f000 f8f5 	bl	800310a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f20:	e00a      	b.n	8002f38 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f000 f8f1 	bl	800310a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f28:	e006      	b.n	8002f38 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f000 f8ed 	bl	800310a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2200      	movs	r2, #0
 8002f34:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002f36:	e0c3      	b.n	80030c0 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f38:	bf00      	nop
    return;
 8002f3a:	e0c1      	b.n	80030c0 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	f040 80a1 	bne.w	8003088 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8002f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f48:	f003 0310 	and.w	r3, r3, #16
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	f000 809b 	beq.w	8003088 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8002f52:	6a3b      	ldr	r3, [r7, #32]
 8002f54:	f003 0310 	and.w	r3, r3, #16
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	f000 8095 	beq.w	8003088 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002f5e:	2300      	movs	r3, #0
 8002f60:	60fb      	str	r3, [r7, #12]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	60fb      	str	r3, [r7, #12]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	60fb      	str	r3, [r7, #12]
 8002f72:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	695b      	ldr	r3, [r3, #20]
 8002f7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d04e      	beq.n	8003020 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8002f8c:	8a3b      	ldrh	r3, [r7, #16]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	f000 8098 	beq.w	80030c4 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002f98:	8a3a      	ldrh	r2, [r7, #16]
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	f080 8092 	bcs.w	80030c4 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	8a3a      	ldrh	r2, [r7, #16]
 8002fa4:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002faa:	699b      	ldr	r3, [r3, #24]
 8002fac:	2b20      	cmp	r3, #32
 8002fae:	d02b      	beq.n	8003008 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	68da      	ldr	r2, [r3, #12]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002fbe:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	695a      	ldr	r2, [r3, #20]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f022 0201 	bic.w	r2, r2, #1
 8002fce:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	695a      	ldr	r2, [r3, #20]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002fde:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2220      	movs	r2, #32
 8002fe4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2200      	movs	r2, #0
 8002fec:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	68da      	ldr	r2, [r3, #12]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f022 0210 	bic.w	r2, r2, #16
 8002ffc:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003002:	4618      	mov	r0, r3
 8003004:	f7fe fd17 	bl	8001a36 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003010:	b29b      	uxth	r3, r3
 8003012:	1ad3      	subs	r3, r2, r3
 8003014:	b29b      	uxth	r3, r3
 8003016:	4619      	mov	r1, r3
 8003018:	6878      	ldr	r0, [r7, #4]
 800301a:	f7fd fcb1 	bl	8000980 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800301e:	e051      	b.n	80030c4 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003028:	b29b      	uxth	r3, r3
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003032:	b29b      	uxth	r3, r3
 8003034:	2b00      	cmp	r3, #0
 8003036:	d047      	beq.n	80030c8 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8003038:	8a7b      	ldrh	r3, [r7, #18]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d044      	beq.n	80030c8 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	68da      	ldr	r2, [r3, #12]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800304c:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	695a      	ldr	r2, [r3, #20]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f022 0201 	bic.w	r2, r2, #1
 800305c:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2220      	movs	r2, #32
 8003062:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2200      	movs	r2, #0
 800306a:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	68da      	ldr	r2, [r3, #12]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f022 0210 	bic.w	r2, r2, #16
 800307a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800307c:	8a7b      	ldrh	r3, [r7, #18]
 800307e:	4619      	mov	r1, r3
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	f7fd fc7d 	bl	8000980 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003086:	e01f      	b.n	80030c8 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800308a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800308e:	2b00      	cmp	r3, #0
 8003090:	d008      	beq.n	80030a4 <HAL_UART_IRQHandler+0x324>
 8003092:	6a3b      	ldr	r3, [r7, #32]
 8003094:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003098:	2b00      	cmp	r3, #0
 800309a:	d003      	beq.n	80030a4 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	f000 f9f0 	bl	8003482 <UART_Transmit_IT>
    return;
 80030a2:	e012      	b.n	80030ca <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80030a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d00d      	beq.n	80030ca <HAL_UART_IRQHandler+0x34a>
 80030ae:	6a3b      	ldr	r3, [r7, #32]
 80030b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d008      	beq.n	80030ca <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	f000 fa31 	bl	8003520 <UART_EndTransmit_IT>
    return;
 80030be:	e004      	b.n	80030ca <HAL_UART_IRQHandler+0x34a>
    return;
 80030c0:	bf00      	nop
 80030c2:	e002      	b.n	80030ca <HAL_UART_IRQHandler+0x34a>
      return;
 80030c4:	bf00      	nop
 80030c6:	e000      	b.n	80030ca <HAL_UART_IRQHandler+0x34a>
      return;
 80030c8:	bf00      	nop
  }
}
 80030ca:	3728      	adds	r7, #40	; 0x28
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}
 80030d0:	0800345b 	.word	0x0800345b

080030d4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b083      	sub	sp, #12
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80030dc:	bf00      	nop
 80030de:	370c      	adds	r7, #12
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bc80      	pop	{r7}
 80030e4:	4770      	bx	lr

080030e6 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80030e6:	b480      	push	{r7}
 80030e8:	b083      	sub	sp, #12
 80030ea:	af00      	add	r7, sp, #0
 80030ec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80030ee:	bf00      	nop
 80030f0:	370c      	adds	r7, #12
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bc80      	pop	{r7}
 80030f6:	4770      	bx	lr

080030f8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b083      	sub	sp, #12
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003100:	bf00      	nop
 8003102:	370c      	adds	r7, #12
 8003104:	46bd      	mov	sp, r7
 8003106:	bc80      	pop	{r7}
 8003108:	4770      	bx	lr

0800310a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800310a:	b480      	push	{r7}
 800310c:	b083      	sub	sp, #12
 800310e:	af00      	add	r7, sp, #0
 8003110:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003112:	bf00      	nop
 8003114:	370c      	adds	r7, #12
 8003116:	46bd      	mov	sp, r7
 8003118:	bc80      	pop	{r7}
 800311a:	4770      	bx	lr

0800311c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b084      	sub	sp, #16
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003128:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 0320 	and.w	r3, r3, #32
 8003134:	2b00      	cmp	r3, #0
 8003136:	d12a      	bne.n	800318e <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2200      	movs	r2, #0
 800313c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	68da      	ldr	r2, [r3, #12]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800314c:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	695a      	ldr	r2, [r3, #20]
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f022 0201 	bic.w	r2, r2, #1
 800315c:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	695a      	ldr	r2, [r3, #20]
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800316c:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2220      	movs	r2, #32
 8003172:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800317a:	2b01      	cmp	r3, #1
 800317c:	d107      	bne.n	800318e <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	68da      	ldr	r2, [r3, #12]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f022 0210 	bic.w	r2, r2, #16
 800318c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003192:	2b01      	cmp	r3, #1
 8003194:	d106      	bne.n	80031a4 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800319a:	4619      	mov	r1, r3
 800319c:	68f8      	ldr	r0, [r7, #12]
 800319e:	f7fd fbef 	bl	8000980 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80031a2:	e002      	b.n	80031aa <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 80031a4:	68f8      	ldr	r0, [r7, #12]
 80031a6:	f7ff ff9e 	bl	80030e6 <HAL_UART_RxCpltCallback>
}
 80031aa:	bf00      	nop
 80031ac:	3710      	adds	r7, #16
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}

080031b2 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80031b2:	b580      	push	{r7, lr}
 80031b4:	b084      	sub	sp, #16
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031be:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d108      	bne.n	80031da <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80031cc:	085b      	lsrs	r3, r3, #1
 80031ce:	b29b      	uxth	r3, r3
 80031d0:	4619      	mov	r1, r3
 80031d2:	68f8      	ldr	r0, [r7, #12]
 80031d4:	f7fd fbd4 	bl	8000980 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80031d8:	e002      	b.n	80031e0 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80031da:	68f8      	ldr	r0, [r7, #12]
 80031dc:	f7ff ff8c 	bl	80030f8 <HAL_UART_RxHalfCpltCallback>
}
 80031e0:	bf00      	nop
 80031e2:	3710      	adds	r7, #16
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}

080031e8 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b084      	sub	sp, #16
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80031f0:	2300      	movs	r3, #0
 80031f2:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f8:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	695b      	ldr	r3, [r3, #20]
 8003200:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003204:	2b00      	cmp	r3, #0
 8003206:	bf14      	ite	ne
 8003208:	2301      	movne	r3, #1
 800320a:	2300      	moveq	r3, #0
 800320c:	b2db      	uxtb	r3, r3
 800320e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003216:	b2db      	uxtb	r3, r3
 8003218:	2b21      	cmp	r3, #33	; 0x21
 800321a:	d108      	bne.n	800322e <UART_DMAError+0x46>
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d005      	beq.n	800322e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	2200      	movs	r2, #0
 8003226:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003228:	68b8      	ldr	r0, [r7, #8]
 800322a:	f000 f8d5 	bl	80033d8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	695b      	ldr	r3, [r3, #20]
 8003234:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003238:	2b00      	cmp	r3, #0
 800323a:	bf14      	ite	ne
 800323c:	2301      	movne	r3, #1
 800323e:	2300      	moveq	r3, #0
 8003240:	b2db      	uxtb	r3, r3
 8003242:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800324a:	b2db      	uxtb	r3, r3
 800324c:	2b22      	cmp	r3, #34	; 0x22
 800324e:	d108      	bne.n	8003262 <UART_DMAError+0x7a>
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d005      	beq.n	8003262 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	2200      	movs	r2, #0
 800325a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800325c:	68b8      	ldr	r0, [r7, #8]
 800325e:	f000 f8d0 	bl	8003402 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003266:	f043 0210 	orr.w	r2, r3, #16
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800326e:	68b8      	ldr	r0, [r7, #8]
 8003270:	f7ff ff4b 	bl	800310a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003274:	bf00      	nop
 8003276:	3710      	adds	r7, #16
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}

0800327c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b084      	sub	sp, #16
 8003280:	af00      	add	r7, sp, #0
 8003282:	60f8      	str	r0, [r7, #12]
 8003284:	60b9      	str	r1, [r7, #8]
 8003286:	603b      	str	r3, [r7, #0]
 8003288:	4613      	mov	r3, r2
 800328a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800328c:	e02c      	b.n	80032e8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800328e:	69bb      	ldr	r3, [r7, #24]
 8003290:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003294:	d028      	beq.n	80032e8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003296:	69bb      	ldr	r3, [r7, #24]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d007      	beq.n	80032ac <UART_WaitOnFlagUntilTimeout+0x30>
 800329c:	f7fd fe0a 	bl	8000eb4 <HAL_GetTick>
 80032a0:	4602      	mov	r2, r0
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	69ba      	ldr	r2, [r7, #24]
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d21d      	bcs.n	80032e8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	68da      	ldr	r2, [r3, #12]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80032ba:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	695a      	ldr	r2, [r3, #20]
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f022 0201 	bic.w	r2, r2, #1
 80032ca:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2220      	movs	r2, #32
 80032d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	2220      	movs	r2, #32
 80032d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2200      	movs	r2, #0
 80032e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80032e4:	2303      	movs	r3, #3
 80032e6:	e00f      	b.n	8003308 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	4013      	ands	r3, r2
 80032f2:	68ba      	ldr	r2, [r7, #8]
 80032f4:	429a      	cmp	r2, r3
 80032f6:	bf0c      	ite	eq
 80032f8:	2301      	moveq	r3, #1
 80032fa:	2300      	movne	r3, #0
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	461a      	mov	r2, r3
 8003300:	79fb      	ldrb	r3, [r7, #7]
 8003302:	429a      	cmp	r2, r3
 8003304:	d0c3      	beq.n	800328e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003306:	2300      	movs	r3, #0
}
 8003308:	4618      	mov	r0, r3
 800330a:	3710      	adds	r7, #16
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}

08003310 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b086      	sub	sp, #24
 8003314:	af00      	add	r7, sp, #0
 8003316:	60f8      	str	r0, [r7, #12]
 8003318:	60b9      	str	r1, [r7, #8]
 800331a:	4613      	mov	r3, r2
 800331c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800331e:	68ba      	ldr	r2, [r7, #8]
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	88fa      	ldrh	r2, [r7, #6]
 8003328:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2200      	movs	r2, #0
 800332e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2222      	movs	r2, #34	; 0x22
 8003334:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800333c:	4a23      	ldr	r2, [pc, #140]	; (80033cc <UART_Start_Receive_DMA+0xbc>)
 800333e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003344:	4a22      	ldr	r2, [pc, #136]	; (80033d0 <UART_Start_Receive_DMA+0xc0>)
 8003346:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800334c:	4a21      	ldr	r2, [pc, #132]	; (80033d4 <UART_Start_Receive_DMA+0xc4>)
 800334e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003354:	2200      	movs	r2, #0
 8003356:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8003358:	f107 0308 	add.w	r3, r7, #8
 800335c:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	3304      	adds	r3, #4
 8003368:	4619      	mov	r1, r3
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	88fb      	ldrh	r3, [r7, #6]
 8003370:	f7fe fb02 	bl	8001978 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003374:	2300      	movs	r3, #0
 8003376:	613b      	str	r3, [r7, #16]
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	613b      	str	r3, [r7, #16]
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	613b      	str	r3, [r7, #16]
 8003388:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2200      	movs	r2, #0
 800338e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	68da      	ldr	r2, [r3, #12]
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033a0:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	695a      	ldr	r2, [r3, #20]
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f042 0201 	orr.w	r2, r2, #1
 80033b0:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	695a      	ldr	r2, [r3, #20]
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80033c0:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 80033c2:	2300      	movs	r3, #0
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	3718      	adds	r7, #24
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}
 80033cc:	0800311d 	.word	0x0800311d
 80033d0:	080031b3 	.word	0x080031b3
 80033d4:	080031e9 	.word	0x080031e9

080033d8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80033d8:	b480      	push	{r7}
 80033da:	b083      	sub	sp, #12
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	68da      	ldr	r2, [r3, #12]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80033ee:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2220      	movs	r2, #32
 80033f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80033f8:	bf00      	nop
 80033fa:	370c      	adds	r7, #12
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bc80      	pop	{r7}
 8003400:	4770      	bx	lr

08003402 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003402:	b480      	push	{r7}
 8003404:	b083      	sub	sp, #12
 8003406:	af00      	add	r7, sp, #0
 8003408:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	68da      	ldr	r2, [r3, #12]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003418:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	695a      	ldr	r2, [r3, #20]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f022 0201 	bic.w	r2, r2, #1
 8003428:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800342e:	2b01      	cmp	r3, #1
 8003430:	d107      	bne.n	8003442 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	68da      	ldr	r2, [r3, #12]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f022 0210 	bic.w	r2, r2, #16
 8003440:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2220      	movs	r2, #32
 8003446:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2200      	movs	r2, #0
 800344e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003450:	bf00      	nop
 8003452:	370c      	adds	r7, #12
 8003454:	46bd      	mov	sp, r7
 8003456:	bc80      	pop	{r7}
 8003458:	4770      	bx	lr

0800345a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800345a:	b580      	push	{r7, lr}
 800345c:	b084      	sub	sp, #16
 800345e:	af00      	add	r7, sp, #0
 8003460:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003466:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2200      	movs	r2, #0
 800346c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2200      	movs	r2, #0
 8003472:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003474:	68f8      	ldr	r0, [r7, #12]
 8003476:	f7ff fe48 	bl	800310a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800347a:	bf00      	nop
 800347c:	3710      	adds	r7, #16
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}

08003482 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003482:	b480      	push	{r7}
 8003484:	b085      	sub	sp, #20
 8003486:	af00      	add	r7, sp, #0
 8003488:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003490:	b2db      	uxtb	r3, r3
 8003492:	2b21      	cmp	r3, #33	; 0x21
 8003494:	d13e      	bne.n	8003514 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800349e:	d114      	bne.n	80034ca <UART_Transmit_IT+0x48>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	691b      	ldr	r3, [r3, #16]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d110      	bne.n	80034ca <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6a1b      	ldr	r3, [r3, #32]
 80034ac:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	881b      	ldrh	r3, [r3, #0]
 80034b2:	461a      	mov	r2, r3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80034bc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6a1b      	ldr	r3, [r3, #32]
 80034c2:	1c9a      	adds	r2, r3, #2
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	621a      	str	r2, [r3, #32]
 80034c8:	e008      	b.n	80034dc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6a1b      	ldr	r3, [r3, #32]
 80034ce:	1c59      	adds	r1, r3, #1
 80034d0:	687a      	ldr	r2, [r7, #4]
 80034d2:	6211      	str	r1, [r2, #32]
 80034d4:	781a      	ldrb	r2, [r3, #0]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80034e0:	b29b      	uxth	r3, r3
 80034e2:	3b01      	subs	r3, #1
 80034e4:	b29b      	uxth	r3, r3
 80034e6:	687a      	ldr	r2, [r7, #4]
 80034e8:	4619      	mov	r1, r3
 80034ea:	84d1      	strh	r1, [r2, #38]	; 0x26
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d10f      	bne.n	8003510 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	68da      	ldr	r2, [r3, #12]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80034fe:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	68da      	ldr	r2, [r3, #12]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800350e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003510:	2300      	movs	r3, #0
 8003512:	e000      	b.n	8003516 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003514:	2302      	movs	r3, #2
  }
}
 8003516:	4618      	mov	r0, r3
 8003518:	3714      	adds	r7, #20
 800351a:	46bd      	mov	sp, r7
 800351c:	bc80      	pop	{r7}
 800351e:	4770      	bx	lr

08003520 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b082      	sub	sp, #8
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	68da      	ldr	r2, [r3, #12]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003536:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2220      	movs	r2, #32
 800353c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	f7ff fdc7 	bl	80030d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003546:	2300      	movs	r3, #0
}
 8003548:	4618      	mov	r0, r3
 800354a:	3708      	adds	r7, #8
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}

08003550 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b086      	sub	sp, #24
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800355e:	b2db      	uxtb	r3, r3
 8003560:	2b22      	cmp	r3, #34	; 0x22
 8003562:	f040 8099 	bne.w	8003698 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800356e:	d117      	bne.n	80035a0 <UART_Receive_IT+0x50>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	691b      	ldr	r3, [r3, #16]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d113      	bne.n	80035a0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003578:	2300      	movs	r3, #0
 800357a:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003580:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	b29b      	uxth	r3, r3
 800358a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800358e:	b29a      	uxth	r2, r3
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003598:	1c9a      	adds	r2, r3, #2
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	629a      	str	r2, [r3, #40]	; 0x28
 800359e:	e026      	b.n	80035ee <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035a4:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80035a6:	2300      	movs	r3, #0
 80035a8:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035b2:	d007      	beq.n	80035c4 <UART_Receive_IT+0x74>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d10a      	bne.n	80035d2 <UART_Receive_IT+0x82>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	691b      	ldr	r3, [r3, #16]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d106      	bne.n	80035d2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	b2da      	uxtb	r2, r3
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	701a      	strb	r2, [r3, #0]
 80035d0:	e008      	b.n	80035e4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80035de:	b2da      	uxtb	r2, r3
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035e8:	1c5a      	adds	r2, r3, #1
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80035f2:	b29b      	uxth	r3, r3
 80035f4:	3b01      	subs	r3, #1
 80035f6:	b29b      	uxth	r3, r3
 80035f8:	687a      	ldr	r2, [r7, #4]
 80035fa:	4619      	mov	r1, r3
 80035fc:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d148      	bne.n	8003694 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	68da      	ldr	r2, [r3, #12]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f022 0220 	bic.w	r2, r2, #32
 8003610:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	68da      	ldr	r2, [r3, #12]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003620:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	695a      	ldr	r2, [r3, #20]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f022 0201 	bic.w	r2, r2, #1
 8003630:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2220      	movs	r2, #32
 8003636:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800363e:	2b01      	cmp	r3, #1
 8003640:	d123      	bne.n	800368a <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2200      	movs	r2, #0
 8003646:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	68da      	ldr	r2, [r3, #12]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f022 0210 	bic.w	r2, r2, #16
 8003656:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 0310 	and.w	r3, r3, #16
 8003662:	2b10      	cmp	r3, #16
 8003664:	d10a      	bne.n	800367c <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003666:	2300      	movs	r3, #0
 8003668:	60fb      	str	r3, [r7, #12]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	60fb      	str	r3, [r7, #12]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	60fb      	str	r3, [r7, #12]
 800367a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003680:	4619      	mov	r1, r3
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f7fd f97c 	bl	8000980 <HAL_UARTEx_RxEventCallback>
 8003688:	e002      	b.n	8003690 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f7ff fd2b 	bl	80030e6 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003690:	2300      	movs	r3, #0
 8003692:	e002      	b.n	800369a <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003694:	2300      	movs	r3, #0
 8003696:	e000      	b.n	800369a <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003698:	2302      	movs	r3, #2
  }
}
 800369a:	4618      	mov	r0, r3
 800369c:	3718      	adds	r7, #24
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}
	...

080036a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b084      	sub	sp, #16
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	691b      	ldr	r3, [r3, #16]
 80036b2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	68da      	ldr	r2, [r3, #12]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	430a      	orrs	r2, r1
 80036c0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	689a      	ldr	r2, [r3, #8]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	691b      	ldr	r3, [r3, #16]
 80036ca:	431a      	orrs	r2, r3
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	695b      	ldr	r3, [r3, #20]
 80036d0:	4313      	orrs	r3, r2
 80036d2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	68db      	ldr	r3, [r3, #12]
 80036da:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80036de:	f023 030c 	bic.w	r3, r3, #12
 80036e2:	687a      	ldr	r2, [r7, #4]
 80036e4:	6812      	ldr	r2, [r2, #0]
 80036e6:	68b9      	ldr	r1, [r7, #8]
 80036e8:	430b      	orrs	r3, r1
 80036ea:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	695b      	ldr	r3, [r3, #20]
 80036f2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	699a      	ldr	r2, [r3, #24]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	430a      	orrs	r2, r1
 8003700:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a2c      	ldr	r2, [pc, #176]	; (80037b8 <UART_SetConfig+0x114>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d103      	bne.n	8003714 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800370c:	f7ff f922 	bl	8002954 <HAL_RCC_GetPCLK2Freq>
 8003710:	60f8      	str	r0, [r7, #12]
 8003712:	e002      	b.n	800371a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003714:	f7ff f90a 	bl	800292c <HAL_RCC_GetPCLK1Freq>
 8003718:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800371a:	68fa      	ldr	r2, [r7, #12]
 800371c:	4613      	mov	r3, r2
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	4413      	add	r3, r2
 8003722:	009a      	lsls	r2, r3, #2
 8003724:	441a      	add	r2, r3
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003730:	4a22      	ldr	r2, [pc, #136]	; (80037bc <UART_SetConfig+0x118>)
 8003732:	fba2 2303 	umull	r2, r3, r2, r3
 8003736:	095b      	lsrs	r3, r3, #5
 8003738:	0119      	lsls	r1, r3, #4
 800373a:	68fa      	ldr	r2, [r7, #12]
 800373c:	4613      	mov	r3, r2
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	4413      	add	r3, r2
 8003742:	009a      	lsls	r2, r3, #2
 8003744:	441a      	add	r2, r3
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003750:	4b1a      	ldr	r3, [pc, #104]	; (80037bc <UART_SetConfig+0x118>)
 8003752:	fba3 0302 	umull	r0, r3, r3, r2
 8003756:	095b      	lsrs	r3, r3, #5
 8003758:	2064      	movs	r0, #100	; 0x64
 800375a:	fb00 f303 	mul.w	r3, r0, r3
 800375e:	1ad3      	subs	r3, r2, r3
 8003760:	011b      	lsls	r3, r3, #4
 8003762:	3332      	adds	r3, #50	; 0x32
 8003764:	4a15      	ldr	r2, [pc, #84]	; (80037bc <UART_SetConfig+0x118>)
 8003766:	fba2 2303 	umull	r2, r3, r2, r3
 800376a:	095b      	lsrs	r3, r3, #5
 800376c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003770:	4419      	add	r1, r3
 8003772:	68fa      	ldr	r2, [r7, #12]
 8003774:	4613      	mov	r3, r2
 8003776:	009b      	lsls	r3, r3, #2
 8003778:	4413      	add	r3, r2
 800377a:	009a      	lsls	r2, r3, #2
 800377c:	441a      	add	r2, r3
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	fbb2 f2f3 	udiv	r2, r2, r3
 8003788:	4b0c      	ldr	r3, [pc, #48]	; (80037bc <UART_SetConfig+0x118>)
 800378a:	fba3 0302 	umull	r0, r3, r3, r2
 800378e:	095b      	lsrs	r3, r3, #5
 8003790:	2064      	movs	r0, #100	; 0x64
 8003792:	fb00 f303 	mul.w	r3, r0, r3
 8003796:	1ad3      	subs	r3, r2, r3
 8003798:	011b      	lsls	r3, r3, #4
 800379a:	3332      	adds	r3, #50	; 0x32
 800379c:	4a07      	ldr	r2, [pc, #28]	; (80037bc <UART_SetConfig+0x118>)
 800379e:	fba2 2303 	umull	r2, r3, r2, r3
 80037a2:	095b      	lsrs	r3, r3, #5
 80037a4:	f003 020f 	and.w	r2, r3, #15
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	440a      	add	r2, r1
 80037ae:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80037b0:	bf00      	nop
 80037b2:	3710      	adds	r7, #16
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}
 80037b8:	40013800 	.word	0x40013800
 80037bc:	51eb851f 	.word	0x51eb851f

080037c0 <__errno>:
 80037c0:	4b01      	ldr	r3, [pc, #4]	; (80037c8 <__errno+0x8>)
 80037c2:	6818      	ldr	r0, [r3, #0]
 80037c4:	4770      	bx	lr
 80037c6:	bf00      	nop
 80037c8:	2000000c 	.word	0x2000000c

080037cc <__libc_init_array>:
 80037cc:	b570      	push	{r4, r5, r6, lr}
 80037ce:	2600      	movs	r6, #0
 80037d0:	4d0c      	ldr	r5, [pc, #48]	; (8003804 <__libc_init_array+0x38>)
 80037d2:	4c0d      	ldr	r4, [pc, #52]	; (8003808 <__libc_init_array+0x3c>)
 80037d4:	1b64      	subs	r4, r4, r5
 80037d6:	10a4      	asrs	r4, r4, #2
 80037d8:	42a6      	cmp	r6, r4
 80037da:	d109      	bne.n	80037f0 <__libc_init_array+0x24>
 80037dc:	f000 fc5c 	bl	8004098 <_init>
 80037e0:	2600      	movs	r6, #0
 80037e2:	4d0a      	ldr	r5, [pc, #40]	; (800380c <__libc_init_array+0x40>)
 80037e4:	4c0a      	ldr	r4, [pc, #40]	; (8003810 <__libc_init_array+0x44>)
 80037e6:	1b64      	subs	r4, r4, r5
 80037e8:	10a4      	asrs	r4, r4, #2
 80037ea:	42a6      	cmp	r6, r4
 80037ec:	d105      	bne.n	80037fa <__libc_init_array+0x2e>
 80037ee:	bd70      	pop	{r4, r5, r6, pc}
 80037f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80037f4:	4798      	blx	r3
 80037f6:	3601      	adds	r6, #1
 80037f8:	e7ee      	b.n	80037d8 <__libc_init_array+0xc>
 80037fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80037fe:	4798      	blx	r3
 8003800:	3601      	adds	r6, #1
 8003802:	e7f2      	b.n	80037ea <__libc_init_array+0x1e>
 8003804:	08004364 	.word	0x08004364
 8003808:	08004364 	.word	0x08004364
 800380c:	08004364 	.word	0x08004364
 8003810:	08004368 	.word	0x08004368

08003814 <memset>:
 8003814:	4603      	mov	r3, r0
 8003816:	4402      	add	r2, r0
 8003818:	4293      	cmp	r3, r2
 800381a:	d100      	bne.n	800381e <memset+0xa>
 800381c:	4770      	bx	lr
 800381e:	f803 1b01 	strb.w	r1, [r3], #1
 8003822:	e7f9      	b.n	8003818 <memset+0x4>

08003824 <siprintf>:
 8003824:	b40e      	push	{r1, r2, r3}
 8003826:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800382a:	b500      	push	{lr}
 800382c:	b09c      	sub	sp, #112	; 0x70
 800382e:	ab1d      	add	r3, sp, #116	; 0x74
 8003830:	9002      	str	r0, [sp, #8]
 8003832:	9006      	str	r0, [sp, #24]
 8003834:	9107      	str	r1, [sp, #28]
 8003836:	9104      	str	r1, [sp, #16]
 8003838:	4808      	ldr	r0, [pc, #32]	; (800385c <siprintf+0x38>)
 800383a:	4909      	ldr	r1, [pc, #36]	; (8003860 <siprintf+0x3c>)
 800383c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003840:	9105      	str	r1, [sp, #20]
 8003842:	6800      	ldr	r0, [r0, #0]
 8003844:	a902      	add	r1, sp, #8
 8003846:	9301      	str	r3, [sp, #4]
 8003848:	f000 f868 	bl	800391c <_svfiprintf_r>
 800384c:	2200      	movs	r2, #0
 800384e:	9b02      	ldr	r3, [sp, #8]
 8003850:	701a      	strb	r2, [r3, #0]
 8003852:	b01c      	add	sp, #112	; 0x70
 8003854:	f85d eb04 	ldr.w	lr, [sp], #4
 8003858:	b003      	add	sp, #12
 800385a:	4770      	bx	lr
 800385c:	2000000c 	.word	0x2000000c
 8003860:	ffff0208 	.word	0xffff0208

08003864 <__ssputs_r>:
 8003864:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003868:	688e      	ldr	r6, [r1, #8]
 800386a:	4682      	mov	sl, r0
 800386c:	429e      	cmp	r6, r3
 800386e:	460c      	mov	r4, r1
 8003870:	4690      	mov	r8, r2
 8003872:	461f      	mov	r7, r3
 8003874:	d838      	bhi.n	80038e8 <__ssputs_r+0x84>
 8003876:	898a      	ldrh	r2, [r1, #12]
 8003878:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800387c:	d032      	beq.n	80038e4 <__ssputs_r+0x80>
 800387e:	6825      	ldr	r5, [r4, #0]
 8003880:	6909      	ldr	r1, [r1, #16]
 8003882:	3301      	adds	r3, #1
 8003884:	eba5 0901 	sub.w	r9, r5, r1
 8003888:	6965      	ldr	r5, [r4, #20]
 800388a:	444b      	add	r3, r9
 800388c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003890:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003894:	106d      	asrs	r5, r5, #1
 8003896:	429d      	cmp	r5, r3
 8003898:	bf38      	it	cc
 800389a:	461d      	movcc	r5, r3
 800389c:	0553      	lsls	r3, r2, #21
 800389e:	d531      	bpl.n	8003904 <__ssputs_r+0xa0>
 80038a0:	4629      	mov	r1, r5
 80038a2:	f000 fb53 	bl	8003f4c <_malloc_r>
 80038a6:	4606      	mov	r6, r0
 80038a8:	b950      	cbnz	r0, 80038c0 <__ssputs_r+0x5c>
 80038aa:	230c      	movs	r3, #12
 80038ac:	f04f 30ff 	mov.w	r0, #4294967295
 80038b0:	f8ca 3000 	str.w	r3, [sl]
 80038b4:	89a3      	ldrh	r3, [r4, #12]
 80038b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038ba:	81a3      	strh	r3, [r4, #12]
 80038bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038c0:	464a      	mov	r2, r9
 80038c2:	6921      	ldr	r1, [r4, #16]
 80038c4:	f000 face 	bl	8003e64 <memcpy>
 80038c8:	89a3      	ldrh	r3, [r4, #12]
 80038ca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80038ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038d2:	81a3      	strh	r3, [r4, #12]
 80038d4:	6126      	str	r6, [r4, #16]
 80038d6:	444e      	add	r6, r9
 80038d8:	6026      	str	r6, [r4, #0]
 80038da:	463e      	mov	r6, r7
 80038dc:	6165      	str	r5, [r4, #20]
 80038de:	eba5 0509 	sub.w	r5, r5, r9
 80038e2:	60a5      	str	r5, [r4, #8]
 80038e4:	42be      	cmp	r6, r7
 80038e6:	d900      	bls.n	80038ea <__ssputs_r+0x86>
 80038e8:	463e      	mov	r6, r7
 80038ea:	4632      	mov	r2, r6
 80038ec:	4641      	mov	r1, r8
 80038ee:	6820      	ldr	r0, [r4, #0]
 80038f0:	f000 fac6 	bl	8003e80 <memmove>
 80038f4:	68a3      	ldr	r3, [r4, #8]
 80038f6:	6822      	ldr	r2, [r4, #0]
 80038f8:	1b9b      	subs	r3, r3, r6
 80038fa:	4432      	add	r2, r6
 80038fc:	2000      	movs	r0, #0
 80038fe:	60a3      	str	r3, [r4, #8]
 8003900:	6022      	str	r2, [r4, #0]
 8003902:	e7db      	b.n	80038bc <__ssputs_r+0x58>
 8003904:	462a      	mov	r2, r5
 8003906:	f000 fb7b 	bl	8004000 <_realloc_r>
 800390a:	4606      	mov	r6, r0
 800390c:	2800      	cmp	r0, #0
 800390e:	d1e1      	bne.n	80038d4 <__ssputs_r+0x70>
 8003910:	4650      	mov	r0, sl
 8003912:	6921      	ldr	r1, [r4, #16]
 8003914:	f000 face 	bl	8003eb4 <_free_r>
 8003918:	e7c7      	b.n	80038aa <__ssputs_r+0x46>
	...

0800391c <_svfiprintf_r>:
 800391c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003920:	4698      	mov	r8, r3
 8003922:	898b      	ldrh	r3, [r1, #12]
 8003924:	4607      	mov	r7, r0
 8003926:	061b      	lsls	r3, r3, #24
 8003928:	460d      	mov	r5, r1
 800392a:	4614      	mov	r4, r2
 800392c:	b09d      	sub	sp, #116	; 0x74
 800392e:	d50e      	bpl.n	800394e <_svfiprintf_r+0x32>
 8003930:	690b      	ldr	r3, [r1, #16]
 8003932:	b963      	cbnz	r3, 800394e <_svfiprintf_r+0x32>
 8003934:	2140      	movs	r1, #64	; 0x40
 8003936:	f000 fb09 	bl	8003f4c <_malloc_r>
 800393a:	6028      	str	r0, [r5, #0]
 800393c:	6128      	str	r0, [r5, #16]
 800393e:	b920      	cbnz	r0, 800394a <_svfiprintf_r+0x2e>
 8003940:	230c      	movs	r3, #12
 8003942:	603b      	str	r3, [r7, #0]
 8003944:	f04f 30ff 	mov.w	r0, #4294967295
 8003948:	e0d1      	b.n	8003aee <_svfiprintf_r+0x1d2>
 800394a:	2340      	movs	r3, #64	; 0x40
 800394c:	616b      	str	r3, [r5, #20]
 800394e:	2300      	movs	r3, #0
 8003950:	9309      	str	r3, [sp, #36]	; 0x24
 8003952:	2320      	movs	r3, #32
 8003954:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003958:	2330      	movs	r3, #48	; 0x30
 800395a:	f04f 0901 	mov.w	r9, #1
 800395e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003962:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003b08 <_svfiprintf_r+0x1ec>
 8003966:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800396a:	4623      	mov	r3, r4
 800396c:	469a      	mov	sl, r3
 800396e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003972:	b10a      	cbz	r2, 8003978 <_svfiprintf_r+0x5c>
 8003974:	2a25      	cmp	r2, #37	; 0x25
 8003976:	d1f9      	bne.n	800396c <_svfiprintf_r+0x50>
 8003978:	ebba 0b04 	subs.w	fp, sl, r4
 800397c:	d00b      	beq.n	8003996 <_svfiprintf_r+0x7a>
 800397e:	465b      	mov	r3, fp
 8003980:	4622      	mov	r2, r4
 8003982:	4629      	mov	r1, r5
 8003984:	4638      	mov	r0, r7
 8003986:	f7ff ff6d 	bl	8003864 <__ssputs_r>
 800398a:	3001      	adds	r0, #1
 800398c:	f000 80aa 	beq.w	8003ae4 <_svfiprintf_r+0x1c8>
 8003990:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003992:	445a      	add	r2, fp
 8003994:	9209      	str	r2, [sp, #36]	; 0x24
 8003996:	f89a 3000 	ldrb.w	r3, [sl]
 800399a:	2b00      	cmp	r3, #0
 800399c:	f000 80a2 	beq.w	8003ae4 <_svfiprintf_r+0x1c8>
 80039a0:	2300      	movs	r3, #0
 80039a2:	f04f 32ff 	mov.w	r2, #4294967295
 80039a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80039aa:	f10a 0a01 	add.w	sl, sl, #1
 80039ae:	9304      	str	r3, [sp, #16]
 80039b0:	9307      	str	r3, [sp, #28]
 80039b2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80039b6:	931a      	str	r3, [sp, #104]	; 0x68
 80039b8:	4654      	mov	r4, sl
 80039ba:	2205      	movs	r2, #5
 80039bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80039c0:	4851      	ldr	r0, [pc, #324]	; (8003b08 <_svfiprintf_r+0x1ec>)
 80039c2:	f000 fa41 	bl	8003e48 <memchr>
 80039c6:	9a04      	ldr	r2, [sp, #16]
 80039c8:	b9d8      	cbnz	r0, 8003a02 <_svfiprintf_r+0xe6>
 80039ca:	06d0      	lsls	r0, r2, #27
 80039cc:	bf44      	itt	mi
 80039ce:	2320      	movmi	r3, #32
 80039d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80039d4:	0711      	lsls	r1, r2, #28
 80039d6:	bf44      	itt	mi
 80039d8:	232b      	movmi	r3, #43	; 0x2b
 80039da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80039de:	f89a 3000 	ldrb.w	r3, [sl]
 80039e2:	2b2a      	cmp	r3, #42	; 0x2a
 80039e4:	d015      	beq.n	8003a12 <_svfiprintf_r+0xf6>
 80039e6:	4654      	mov	r4, sl
 80039e8:	2000      	movs	r0, #0
 80039ea:	f04f 0c0a 	mov.w	ip, #10
 80039ee:	9a07      	ldr	r2, [sp, #28]
 80039f0:	4621      	mov	r1, r4
 80039f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80039f6:	3b30      	subs	r3, #48	; 0x30
 80039f8:	2b09      	cmp	r3, #9
 80039fa:	d94e      	bls.n	8003a9a <_svfiprintf_r+0x17e>
 80039fc:	b1b0      	cbz	r0, 8003a2c <_svfiprintf_r+0x110>
 80039fe:	9207      	str	r2, [sp, #28]
 8003a00:	e014      	b.n	8003a2c <_svfiprintf_r+0x110>
 8003a02:	eba0 0308 	sub.w	r3, r0, r8
 8003a06:	fa09 f303 	lsl.w	r3, r9, r3
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	46a2      	mov	sl, r4
 8003a0e:	9304      	str	r3, [sp, #16]
 8003a10:	e7d2      	b.n	80039b8 <_svfiprintf_r+0x9c>
 8003a12:	9b03      	ldr	r3, [sp, #12]
 8003a14:	1d19      	adds	r1, r3, #4
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	9103      	str	r1, [sp, #12]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	bfbb      	ittet	lt
 8003a1e:	425b      	neglt	r3, r3
 8003a20:	f042 0202 	orrlt.w	r2, r2, #2
 8003a24:	9307      	strge	r3, [sp, #28]
 8003a26:	9307      	strlt	r3, [sp, #28]
 8003a28:	bfb8      	it	lt
 8003a2a:	9204      	strlt	r2, [sp, #16]
 8003a2c:	7823      	ldrb	r3, [r4, #0]
 8003a2e:	2b2e      	cmp	r3, #46	; 0x2e
 8003a30:	d10c      	bne.n	8003a4c <_svfiprintf_r+0x130>
 8003a32:	7863      	ldrb	r3, [r4, #1]
 8003a34:	2b2a      	cmp	r3, #42	; 0x2a
 8003a36:	d135      	bne.n	8003aa4 <_svfiprintf_r+0x188>
 8003a38:	9b03      	ldr	r3, [sp, #12]
 8003a3a:	3402      	adds	r4, #2
 8003a3c:	1d1a      	adds	r2, r3, #4
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	9203      	str	r2, [sp, #12]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	bfb8      	it	lt
 8003a46:	f04f 33ff 	movlt.w	r3, #4294967295
 8003a4a:	9305      	str	r3, [sp, #20]
 8003a4c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003b18 <_svfiprintf_r+0x1fc>
 8003a50:	2203      	movs	r2, #3
 8003a52:	4650      	mov	r0, sl
 8003a54:	7821      	ldrb	r1, [r4, #0]
 8003a56:	f000 f9f7 	bl	8003e48 <memchr>
 8003a5a:	b140      	cbz	r0, 8003a6e <_svfiprintf_r+0x152>
 8003a5c:	2340      	movs	r3, #64	; 0x40
 8003a5e:	eba0 000a 	sub.w	r0, r0, sl
 8003a62:	fa03 f000 	lsl.w	r0, r3, r0
 8003a66:	9b04      	ldr	r3, [sp, #16]
 8003a68:	3401      	adds	r4, #1
 8003a6a:	4303      	orrs	r3, r0
 8003a6c:	9304      	str	r3, [sp, #16]
 8003a6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a72:	2206      	movs	r2, #6
 8003a74:	4825      	ldr	r0, [pc, #148]	; (8003b0c <_svfiprintf_r+0x1f0>)
 8003a76:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003a7a:	f000 f9e5 	bl	8003e48 <memchr>
 8003a7e:	2800      	cmp	r0, #0
 8003a80:	d038      	beq.n	8003af4 <_svfiprintf_r+0x1d8>
 8003a82:	4b23      	ldr	r3, [pc, #140]	; (8003b10 <_svfiprintf_r+0x1f4>)
 8003a84:	bb1b      	cbnz	r3, 8003ace <_svfiprintf_r+0x1b2>
 8003a86:	9b03      	ldr	r3, [sp, #12]
 8003a88:	3307      	adds	r3, #7
 8003a8a:	f023 0307 	bic.w	r3, r3, #7
 8003a8e:	3308      	adds	r3, #8
 8003a90:	9303      	str	r3, [sp, #12]
 8003a92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a94:	4433      	add	r3, r6
 8003a96:	9309      	str	r3, [sp, #36]	; 0x24
 8003a98:	e767      	b.n	800396a <_svfiprintf_r+0x4e>
 8003a9a:	460c      	mov	r4, r1
 8003a9c:	2001      	movs	r0, #1
 8003a9e:	fb0c 3202 	mla	r2, ip, r2, r3
 8003aa2:	e7a5      	b.n	80039f0 <_svfiprintf_r+0xd4>
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	f04f 0c0a 	mov.w	ip, #10
 8003aaa:	4619      	mov	r1, r3
 8003aac:	3401      	adds	r4, #1
 8003aae:	9305      	str	r3, [sp, #20]
 8003ab0:	4620      	mov	r0, r4
 8003ab2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003ab6:	3a30      	subs	r2, #48	; 0x30
 8003ab8:	2a09      	cmp	r2, #9
 8003aba:	d903      	bls.n	8003ac4 <_svfiprintf_r+0x1a8>
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d0c5      	beq.n	8003a4c <_svfiprintf_r+0x130>
 8003ac0:	9105      	str	r1, [sp, #20]
 8003ac2:	e7c3      	b.n	8003a4c <_svfiprintf_r+0x130>
 8003ac4:	4604      	mov	r4, r0
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	fb0c 2101 	mla	r1, ip, r1, r2
 8003acc:	e7f0      	b.n	8003ab0 <_svfiprintf_r+0x194>
 8003ace:	ab03      	add	r3, sp, #12
 8003ad0:	9300      	str	r3, [sp, #0]
 8003ad2:	462a      	mov	r2, r5
 8003ad4:	4638      	mov	r0, r7
 8003ad6:	4b0f      	ldr	r3, [pc, #60]	; (8003b14 <_svfiprintf_r+0x1f8>)
 8003ad8:	a904      	add	r1, sp, #16
 8003ada:	f3af 8000 	nop.w
 8003ade:	1c42      	adds	r2, r0, #1
 8003ae0:	4606      	mov	r6, r0
 8003ae2:	d1d6      	bne.n	8003a92 <_svfiprintf_r+0x176>
 8003ae4:	89ab      	ldrh	r3, [r5, #12]
 8003ae6:	065b      	lsls	r3, r3, #25
 8003ae8:	f53f af2c 	bmi.w	8003944 <_svfiprintf_r+0x28>
 8003aec:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003aee:	b01d      	add	sp, #116	; 0x74
 8003af0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003af4:	ab03      	add	r3, sp, #12
 8003af6:	9300      	str	r3, [sp, #0]
 8003af8:	462a      	mov	r2, r5
 8003afa:	4638      	mov	r0, r7
 8003afc:	4b05      	ldr	r3, [pc, #20]	; (8003b14 <_svfiprintf_r+0x1f8>)
 8003afe:	a904      	add	r1, sp, #16
 8003b00:	f000 f87c 	bl	8003bfc <_printf_i>
 8003b04:	e7eb      	b.n	8003ade <_svfiprintf_r+0x1c2>
 8003b06:	bf00      	nop
 8003b08:	08004330 	.word	0x08004330
 8003b0c:	0800433a 	.word	0x0800433a
 8003b10:	00000000 	.word	0x00000000
 8003b14:	08003865 	.word	0x08003865
 8003b18:	08004336 	.word	0x08004336

08003b1c <_printf_common>:
 8003b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b20:	4616      	mov	r6, r2
 8003b22:	4699      	mov	r9, r3
 8003b24:	688a      	ldr	r2, [r1, #8]
 8003b26:	690b      	ldr	r3, [r1, #16]
 8003b28:	4607      	mov	r7, r0
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	bfb8      	it	lt
 8003b2e:	4613      	movlt	r3, r2
 8003b30:	6033      	str	r3, [r6, #0]
 8003b32:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003b36:	460c      	mov	r4, r1
 8003b38:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003b3c:	b10a      	cbz	r2, 8003b42 <_printf_common+0x26>
 8003b3e:	3301      	adds	r3, #1
 8003b40:	6033      	str	r3, [r6, #0]
 8003b42:	6823      	ldr	r3, [r4, #0]
 8003b44:	0699      	lsls	r1, r3, #26
 8003b46:	bf42      	ittt	mi
 8003b48:	6833      	ldrmi	r3, [r6, #0]
 8003b4a:	3302      	addmi	r3, #2
 8003b4c:	6033      	strmi	r3, [r6, #0]
 8003b4e:	6825      	ldr	r5, [r4, #0]
 8003b50:	f015 0506 	ands.w	r5, r5, #6
 8003b54:	d106      	bne.n	8003b64 <_printf_common+0x48>
 8003b56:	f104 0a19 	add.w	sl, r4, #25
 8003b5a:	68e3      	ldr	r3, [r4, #12]
 8003b5c:	6832      	ldr	r2, [r6, #0]
 8003b5e:	1a9b      	subs	r3, r3, r2
 8003b60:	42ab      	cmp	r3, r5
 8003b62:	dc28      	bgt.n	8003bb6 <_printf_common+0x9a>
 8003b64:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003b68:	1e13      	subs	r3, r2, #0
 8003b6a:	6822      	ldr	r2, [r4, #0]
 8003b6c:	bf18      	it	ne
 8003b6e:	2301      	movne	r3, #1
 8003b70:	0692      	lsls	r2, r2, #26
 8003b72:	d42d      	bmi.n	8003bd0 <_printf_common+0xb4>
 8003b74:	4649      	mov	r1, r9
 8003b76:	4638      	mov	r0, r7
 8003b78:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003b7c:	47c0      	blx	r8
 8003b7e:	3001      	adds	r0, #1
 8003b80:	d020      	beq.n	8003bc4 <_printf_common+0xa8>
 8003b82:	6823      	ldr	r3, [r4, #0]
 8003b84:	68e5      	ldr	r5, [r4, #12]
 8003b86:	f003 0306 	and.w	r3, r3, #6
 8003b8a:	2b04      	cmp	r3, #4
 8003b8c:	bf18      	it	ne
 8003b8e:	2500      	movne	r5, #0
 8003b90:	6832      	ldr	r2, [r6, #0]
 8003b92:	f04f 0600 	mov.w	r6, #0
 8003b96:	68a3      	ldr	r3, [r4, #8]
 8003b98:	bf08      	it	eq
 8003b9a:	1aad      	subeq	r5, r5, r2
 8003b9c:	6922      	ldr	r2, [r4, #16]
 8003b9e:	bf08      	it	eq
 8003ba0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	bfc4      	itt	gt
 8003ba8:	1a9b      	subgt	r3, r3, r2
 8003baa:	18ed      	addgt	r5, r5, r3
 8003bac:	341a      	adds	r4, #26
 8003bae:	42b5      	cmp	r5, r6
 8003bb0:	d11a      	bne.n	8003be8 <_printf_common+0xcc>
 8003bb2:	2000      	movs	r0, #0
 8003bb4:	e008      	b.n	8003bc8 <_printf_common+0xac>
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	4652      	mov	r2, sl
 8003bba:	4649      	mov	r1, r9
 8003bbc:	4638      	mov	r0, r7
 8003bbe:	47c0      	blx	r8
 8003bc0:	3001      	adds	r0, #1
 8003bc2:	d103      	bne.n	8003bcc <_printf_common+0xb0>
 8003bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8003bc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003bcc:	3501      	adds	r5, #1
 8003bce:	e7c4      	b.n	8003b5a <_printf_common+0x3e>
 8003bd0:	2030      	movs	r0, #48	; 0x30
 8003bd2:	18e1      	adds	r1, r4, r3
 8003bd4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003bd8:	1c5a      	adds	r2, r3, #1
 8003bda:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003bde:	4422      	add	r2, r4
 8003be0:	3302      	adds	r3, #2
 8003be2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003be6:	e7c5      	b.n	8003b74 <_printf_common+0x58>
 8003be8:	2301      	movs	r3, #1
 8003bea:	4622      	mov	r2, r4
 8003bec:	4649      	mov	r1, r9
 8003bee:	4638      	mov	r0, r7
 8003bf0:	47c0      	blx	r8
 8003bf2:	3001      	adds	r0, #1
 8003bf4:	d0e6      	beq.n	8003bc4 <_printf_common+0xa8>
 8003bf6:	3601      	adds	r6, #1
 8003bf8:	e7d9      	b.n	8003bae <_printf_common+0x92>
	...

08003bfc <_printf_i>:
 8003bfc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003c00:	460c      	mov	r4, r1
 8003c02:	7e27      	ldrb	r7, [r4, #24]
 8003c04:	4691      	mov	r9, r2
 8003c06:	2f78      	cmp	r7, #120	; 0x78
 8003c08:	4680      	mov	r8, r0
 8003c0a:	469a      	mov	sl, r3
 8003c0c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8003c0e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003c12:	d807      	bhi.n	8003c24 <_printf_i+0x28>
 8003c14:	2f62      	cmp	r7, #98	; 0x62
 8003c16:	d80a      	bhi.n	8003c2e <_printf_i+0x32>
 8003c18:	2f00      	cmp	r7, #0
 8003c1a:	f000 80d9 	beq.w	8003dd0 <_printf_i+0x1d4>
 8003c1e:	2f58      	cmp	r7, #88	; 0x58
 8003c20:	f000 80a4 	beq.w	8003d6c <_printf_i+0x170>
 8003c24:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003c28:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003c2c:	e03a      	b.n	8003ca4 <_printf_i+0xa8>
 8003c2e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003c32:	2b15      	cmp	r3, #21
 8003c34:	d8f6      	bhi.n	8003c24 <_printf_i+0x28>
 8003c36:	a001      	add	r0, pc, #4	; (adr r0, 8003c3c <_printf_i+0x40>)
 8003c38:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8003c3c:	08003c95 	.word	0x08003c95
 8003c40:	08003ca9 	.word	0x08003ca9
 8003c44:	08003c25 	.word	0x08003c25
 8003c48:	08003c25 	.word	0x08003c25
 8003c4c:	08003c25 	.word	0x08003c25
 8003c50:	08003c25 	.word	0x08003c25
 8003c54:	08003ca9 	.word	0x08003ca9
 8003c58:	08003c25 	.word	0x08003c25
 8003c5c:	08003c25 	.word	0x08003c25
 8003c60:	08003c25 	.word	0x08003c25
 8003c64:	08003c25 	.word	0x08003c25
 8003c68:	08003db7 	.word	0x08003db7
 8003c6c:	08003cd9 	.word	0x08003cd9
 8003c70:	08003d99 	.word	0x08003d99
 8003c74:	08003c25 	.word	0x08003c25
 8003c78:	08003c25 	.word	0x08003c25
 8003c7c:	08003dd9 	.word	0x08003dd9
 8003c80:	08003c25 	.word	0x08003c25
 8003c84:	08003cd9 	.word	0x08003cd9
 8003c88:	08003c25 	.word	0x08003c25
 8003c8c:	08003c25 	.word	0x08003c25
 8003c90:	08003da1 	.word	0x08003da1
 8003c94:	680b      	ldr	r3, [r1, #0]
 8003c96:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8003c9a:	1d1a      	adds	r2, r3, #4
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	600a      	str	r2, [r1, #0]
 8003ca0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	e0a4      	b.n	8003df2 <_printf_i+0x1f6>
 8003ca8:	6825      	ldr	r5, [r4, #0]
 8003caa:	6808      	ldr	r0, [r1, #0]
 8003cac:	062e      	lsls	r6, r5, #24
 8003cae:	f100 0304 	add.w	r3, r0, #4
 8003cb2:	d50a      	bpl.n	8003cca <_printf_i+0xce>
 8003cb4:	6805      	ldr	r5, [r0, #0]
 8003cb6:	600b      	str	r3, [r1, #0]
 8003cb8:	2d00      	cmp	r5, #0
 8003cba:	da03      	bge.n	8003cc4 <_printf_i+0xc8>
 8003cbc:	232d      	movs	r3, #45	; 0x2d
 8003cbe:	426d      	negs	r5, r5
 8003cc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003cc4:	230a      	movs	r3, #10
 8003cc6:	485e      	ldr	r0, [pc, #376]	; (8003e40 <_printf_i+0x244>)
 8003cc8:	e019      	b.n	8003cfe <_printf_i+0x102>
 8003cca:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003cce:	6805      	ldr	r5, [r0, #0]
 8003cd0:	600b      	str	r3, [r1, #0]
 8003cd2:	bf18      	it	ne
 8003cd4:	b22d      	sxthne	r5, r5
 8003cd6:	e7ef      	b.n	8003cb8 <_printf_i+0xbc>
 8003cd8:	680b      	ldr	r3, [r1, #0]
 8003cda:	6825      	ldr	r5, [r4, #0]
 8003cdc:	1d18      	adds	r0, r3, #4
 8003cde:	6008      	str	r0, [r1, #0]
 8003ce0:	0628      	lsls	r0, r5, #24
 8003ce2:	d501      	bpl.n	8003ce8 <_printf_i+0xec>
 8003ce4:	681d      	ldr	r5, [r3, #0]
 8003ce6:	e002      	b.n	8003cee <_printf_i+0xf2>
 8003ce8:	0669      	lsls	r1, r5, #25
 8003cea:	d5fb      	bpl.n	8003ce4 <_printf_i+0xe8>
 8003cec:	881d      	ldrh	r5, [r3, #0]
 8003cee:	2f6f      	cmp	r7, #111	; 0x6f
 8003cf0:	bf0c      	ite	eq
 8003cf2:	2308      	moveq	r3, #8
 8003cf4:	230a      	movne	r3, #10
 8003cf6:	4852      	ldr	r0, [pc, #328]	; (8003e40 <_printf_i+0x244>)
 8003cf8:	2100      	movs	r1, #0
 8003cfa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003cfe:	6866      	ldr	r6, [r4, #4]
 8003d00:	2e00      	cmp	r6, #0
 8003d02:	bfa8      	it	ge
 8003d04:	6821      	ldrge	r1, [r4, #0]
 8003d06:	60a6      	str	r6, [r4, #8]
 8003d08:	bfa4      	itt	ge
 8003d0a:	f021 0104 	bicge.w	r1, r1, #4
 8003d0e:	6021      	strge	r1, [r4, #0]
 8003d10:	b90d      	cbnz	r5, 8003d16 <_printf_i+0x11a>
 8003d12:	2e00      	cmp	r6, #0
 8003d14:	d04d      	beq.n	8003db2 <_printf_i+0x1b6>
 8003d16:	4616      	mov	r6, r2
 8003d18:	fbb5 f1f3 	udiv	r1, r5, r3
 8003d1c:	fb03 5711 	mls	r7, r3, r1, r5
 8003d20:	5dc7      	ldrb	r7, [r0, r7]
 8003d22:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003d26:	462f      	mov	r7, r5
 8003d28:	42bb      	cmp	r3, r7
 8003d2a:	460d      	mov	r5, r1
 8003d2c:	d9f4      	bls.n	8003d18 <_printf_i+0x11c>
 8003d2e:	2b08      	cmp	r3, #8
 8003d30:	d10b      	bne.n	8003d4a <_printf_i+0x14e>
 8003d32:	6823      	ldr	r3, [r4, #0]
 8003d34:	07df      	lsls	r7, r3, #31
 8003d36:	d508      	bpl.n	8003d4a <_printf_i+0x14e>
 8003d38:	6923      	ldr	r3, [r4, #16]
 8003d3a:	6861      	ldr	r1, [r4, #4]
 8003d3c:	4299      	cmp	r1, r3
 8003d3e:	bfde      	ittt	le
 8003d40:	2330      	movle	r3, #48	; 0x30
 8003d42:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003d46:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003d4a:	1b92      	subs	r2, r2, r6
 8003d4c:	6122      	str	r2, [r4, #16]
 8003d4e:	464b      	mov	r3, r9
 8003d50:	4621      	mov	r1, r4
 8003d52:	4640      	mov	r0, r8
 8003d54:	f8cd a000 	str.w	sl, [sp]
 8003d58:	aa03      	add	r2, sp, #12
 8003d5a:	f7ff fedf 	bl	8003b1c <_printf_common>
 8003d5e:	3001      	adds	r0, #1
 8003d60:	d14c      	bne.n	8003dfc <_printf_i+0x200>
 8003d62:	f04f 30ff 	mov.w	r0, #4294967295
 8003d66:	b004      	add	sp, #16
 8003d68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d6c:	4834      	ldr	r0, [pc, #208]	; (8003e40 <_printf_i+0x244>)
 8003d6e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003d72:	680e      	ldr	r6, [r1, #0]
 8003d74:	6823      	ldr	r3, [r4, #0]
 8003d76:	f856 5b04 	ldr.w	r5, [r6], #4
 8003d7a:	061f      	lsls	r7, r3, #24
 8003d7c:	600e      	str	r6, [r1, #0]
 8003d7e:	d514      	bpl.n	8003daa <_printf_i+0x1ae>
 8003d80:	07d9      	lsls	r1, r3, #31
 8003d82:	bf44      	itt	mi
 8003d84:	f043 0320 	orrmi.w	r3, r3, #32
 8003d88:	6023      	strmi	r3, [r4, #0]
 8003d8a:	b91d      	cbnz	r5, 8003d94 <_printf_i+0x198>
 8003d8c:	6823      	ldr	r3, [r4, #0]
 8003d8e:	f023 0320 	bic.w	r3, r3, #32
 8003d92:	6023      	str	r3, [r4, #0]
 8003d94:	2310      	movs	r3, #16
 8003d96:	e7af      	b.n	8003cf8 <_printf_i+0xfc>
 8003d98:	6823      	ldr	r3, [r4, #0]
 8003d9a:	f043 0320 	orr.w	r3, r3, #32
 8003d9e:	6023      	str	r3, [r4, #0]
 8003da0:	2378      	movs	r3, #120	; 0x78
 8003da2:	4828      	ldr	r0, [pc, #160]	; (8003e44 <_printf_i+0x248>)
 8003da4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003da8:	e7e3      	b.n	8003d72 <_printf_i+0x176>
 8003daa:	065e      	lsls	r6, r3, #25
 8003dac:	bf48      	it	mi
 8003dae:	b2ad      	uxthmi	r5, r5
 8003db0:	e7e6      	b.n	8003d80 <_printf_i+0x184>
 8003db2:	4616      	mov	r6, r2
 8003db4:	e7bb      	b.n	8003d2e <_printf_i+0x132>
 8003db6:	680b      	ldr	r3, [r1, #0]
 8003db8:	6826      	ldr	r6, [r4, #0]
 8003dba:	1d1d      	adds	r5, r3, #4
 8003dbc:	6960      	ldr	r0, [r4, #20]
 8003dbe:	600d      	str	r5, [r1, #0]
 8003dc0:	0635      	lsls	r5, r6, #24
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	d501      	bpl.n	8003dca <_printf_i+0x1ce>
 8003dc6:	6018      	str	r0, [r3, #0]
 8003dc8:	e002      	b.n	8003dd0 <_printf_i+0x1d4>
 8003dca:	0671      	lsls	r1, r6, #25
 8003dcc:	d5fb      	bpl.n	8003dc6 <_printf_i+0x1ca>
 8003dce:	8018      	strh	r0, [r3, #0]
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	4616      	mov	r6, r2
 8003dd4:	6123      	str	r3, [r4, #16]
 8003dd6:	e7ba      	b.n	8003d4e <_printf_i+0x152>
 8003dd8:	680b      	ldr	r3, [r1, #0]
 8003dda:	1d1a      	adds	r2, r3, #4
 8003ddc:	600a      	str	r2, [r1, #0]
 8003dde:	681e      	ldr	r6, [r3, #0]
 8003de0:	2100      	movs	r1, #0
 8003de2:	4630      	mov	r0, r6
 8003de4:	6862      	ldr	r2, [r4, #4]
 8003de6:	f000 f82f 	bl	8003e48 <memchr>
 8003dea:	b108      	cbz	r0, 8003df0 <_printf_i+0x1f4>
 8003dec:	1b80      	subs	r0, r0, r6
 8003dee:	6060      	str	r0, [r4, #4]
 8003df0:	6863      	ldr	r3, [r4, #4]
 8003df2:	6123      	str	r3, [r4, #16]
 8003df4:	2300      	movs	r3, #0
 8003df6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003dfa:	e7a8      	b.n	8003d4e <_printf_i+0x152>
 8003dfc:	4632      	mov	r2, r6
 8003dfe:	4649      	mov	r1, r9
 8003e00:	4640      	mov	r0, r8
 8003e02:	6923      	ldr	r3, [r4, #16]
 8003e04:	47d0      	blx	sl
 8003e06:	3001      	adds	r0, #1
 8003e08:	d0ab      	beq.n	8003d62 <_printf_i+0x166>
 8003e0a:	6823      	ldr	r3, [r4, #0]
 8003e0c:	079b      	lsls	r3, r3, #30
 8003e0e:	d413      	bmi.n	8003e38 <_printf_i+0x23c>
 8003e10:	68e0      	ldr	r0, [r4, #12]
 8003e12:	9b03      	ldr	r3, [sp, #12]
 8003e14:	4298      	cmp	r0, r3
 8003e16:	bfb8      	it	lt
 8003e18:	4618      	movlt	r0, r3
 8003e1a:	e7a4      	b.n	8003d66 <_printf_i+0x16a>
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	4632      	mov	r2, r6
 8003e20:	4649      	mov	r1, r9
 8003e22:	4640      	mov	r0, r8
 8003e24:	47d0      	blx	sl
 8003e26:	3001      	adds	r0, #1
 8003e28:	d09b      	beq.n	8003d62 <_printf_i+0x166>
 8003e2a:	3501      	adds	r5, #1
 8003e2c:	68e3      	ldr	r3, [r4, #12]
 8003e2e:	9903      	ldr	r1, [sp, #12]
 8003e30:	1a5b      	subs	r3, r3, r1
 8003e32:	42ab      	cmp	r3, r5
 8003e34:	dcf2      	bgt.n	8003e1c <_printf_i+0x220>
 8003e36:	e7eb      	b.n	8003e10 <_printf_i+0x214>
 8003e38:	2500      	movs	r5, #0
 8003e3a:	f104 0619 	add.w	r6, r4, #25
 8003e3e:	e7f5      	b.n	8003e2c <_printf_i+0x230>
 8003e40:	08004341 	.word	0x08004341
 8003e44:	08004352 	.word	0x08004352

08003e48 <memchr>:
 8003e48:	4603      	mov	r3, r0
 8003e4a:	b510      	push	{r4, lr}
 8003e4c:	b2c9      	uxtb	r1, r1
 8003e4e:	4402      	add	r2, r0
 8003e50:	4293      	cmp	r3, r2
 8003e52:	4618      	mov	r0, r3
 8003e54:	d101      	bne.n	8003e5a <memchr+0x12>
 8003e56:	2000      	movs	r0, #0
 8003e58:	e003      	b.n	8003e62 <memchr+0x1a>
 8003e5a:	7804      	ldrb	r4, [r0, #0]
 8003e5c:	3301      	adds	r3, #1
 8003e5e:	428c      	cmp	r4, r1
 8003e60:	d1f6      	bne.n	8003e50 <memchr+0x8>
 8003e62:	bd10      	pop	{r4, pc}

08003e64 <memcpy>:
 8003e64:	440a      	add	r2, r1
 8003e66:	4291      	cmp	r1, r2
 8003e68:	f100 33ff 	add.w	r3, r0, #4294967295
 8003e6c:	d100      	bne.n	8003e70 <memcpy+0xc>
 8003e6e:	4770      	bx	lr
 8003e70:	b510      	push	{r4, lr}
 8003e72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003e76:	4291      	cmp	r1, r2
 8003e78:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003e7c:	d1f9      	bne.n	8003e72 <memcpy+0xe>
 8003e7e:	bd10      	pop	{r4, pc}

08003e80 <memmove>:
 8003e80:	4288      	cmp	r0, r1
 8003e82:	b510      	push	{r4, lr}
 8003e84:	eb01 0402 	add.w	r4, r1, r2
 8003e88:	d902      	bls.n	8003e90 <memmove+0x10>
 8003e8a:	4284      	cmp	r4, r0
 8003e8c:	4623      	mov	r3, r4
 8003e8e:	d807      	bhi.n	8003ea0 <memmove+0x20>
 8003e90:	1e43      	subs	r3, r0, #1
 8003e92:	42a1      	cmp	r1, r4
 8003e94:	d008      	beq.n	8003ea8 <memmove+0x28>
 8003e96:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003e9a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003e9e:	e7f8      	b.n	8003e92 <memmove+0x12>
 8003ea0:	4601      	mov	r1, r0
 8003ea2:	4402      	add	r2, r0
 8003ea4:	428a      	cmp	r2, r1
 8003ea6:	d100      	bne.n	8003eaa <memmove+0x2a>
 8003ea8:	bd10      	pop	{r4, pc}
 8003eaa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003eae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003eb2:	e7f7      	b.n	8003ea4 <memmove+0x24>

08003eb4 <_free_r>:
 8003eb4:	b538      	push	{r3, r4, r5, lr}
 8003eb6:	4605      	mov	r5, r0
 8003eb8:	2900      	cmp	r1, #0
 8003eba:	d043      	beq.n	8003f44 <_free_r+0x90>
 8003ebc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ec0:	1f0c      	subs	r4, r1, #4
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	bfb8      	it	lt
 8003ec6:	18e4      	addlt	r4, r4, r3
 8003ec8:	f000 f8d0 	bl	800406c <__malloc_lock>
 8003ecc:	4a1e      	ldr	r2, [pc, #120]	; (8003f48 <_free_r+0x94>)
 8003ece:	6813      	ldr	r3, [r2, #0]
 8003ed0:	4610      	mov	r0, r2
 8003ed2:	b933      	cbnz	r3, 8003ee2 <_free_r+0x2e>
 8003ed4:	6063      	str	r3, [r4, #4]
 8003ed6:	6014      	str	r4, [r2, #0]
 8003ed8:	4628      	mov	r0, r5
 8003eda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003ede:	f000 b8cb 	b.w	8004078 <__malloc_unlock>
 8003ee2:	42a3      	cmp	r3, r4
 8003ee4:	d90a      	bls.n	8003efc <_free_r+0x48>
 8003ee6:	6821      	ldr	r1, [r4, #0]
 8003ee8:	1862      	adds	r2, r4, r1
 8003eea:	4293      	cmp	r3, r2
 8003eec:	bf01      	itttt	eq
 8003eee:	681a      	ldreq	r2, [r3, #0]
 8003ef0:	685b      	ldreq	r3, [r3, #4]
 8003ef2:	1852      	addeq	r2, r2, r1
 8003ef4:	6022      	streq	r2, [r4, #0]
 8003ef6:	6063      	str	r3, [r4, #4]
 8003ef8:	6004      	str	r4, [r0, #0]
 8003efa:	e7ed      	b.n	8003ed8 <_free_r+0x24>
 8003efc:	461a      	mov	r2, r3
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	b10b      	cbz	r3, 8003f06 <_free_r+0x52>
 8003f02:	42a3      	cmp	r3, r4
 8003f04:	d9fa      	bls.n	8003efc <_free_r+0x48>
 8003f06:	6811      	ldr	r1, [r2, #0]
 8003f08:	1850      	adds	r0, r2, r1
 8003f0a:	42a0      	cmp	r0, r4
 8003f0c:	d10b      	bne.n	8003f26 <_free_r+0x72>
 8003f0e:	6820      	ldr	r0, [r4, #0]
 8003f10:	4401      	add	r1, r0
 8003f12:	1850      	adds	r0, r2, r1
 8003f14:	4283      	cmp	r3, r0
 8003f16:	6011      	str	r1, [r2, #0]
 8003f18:	d1de      	bne.n	8003ed8 <_free_r+0x24>
 8003f1a:	6818      	ldr	r0, [r3, #0]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	4401      	add	r1, r0
 8003f20:	6011      	str	r1, [r2, #0]
 8003f22:	6053      	str	r3, [r2, #4]
 8003f24:	e7d8      	b.n	8003ed8 <_free_r+0x24>
 8003f26:	d902      	bls.n	8003f2e <_free_r+0x7a>
 8003f28:	230c      	movs	r3, #12
 8003f2a:	602b      	str	r3, [r5, #0]
 8003f2c:	e7d4      	b.n	8003ed8 <_free_r+0x24>
 8003f2e:	6820      	ldr	r0, [r4, #0]
 8003f30:	1821      	adds	r1, r4, r0
 8003f32:	428b      	cmp	r3, r1
 8003f34:	bf01      	itttt	eq
 8003f36:	6819      	ldreq	r1, [r3, #0]
 8003f38:	685b      	ldreq	r3, [r3, #4]
 8003f3a:	1809      	addeq	r1, r1, r0
 8003f3c:	6021      	streq	r1, [r4, #0]
 8003f3e:	6063      	str	r3, [r4, #4]
 8003f40:	6054      	str	r4, [r2, #4]
 8003f42:	e7c9      	b.n	8003ed8 <_free_r+0x24>
 8003f44:	bd38      	pop	{r3, r4, r5, pc}
 8003f46:	bf00      	nop
 8003f48:	20000094 	.word	0x20000094

08003f4c <_malloc_r>:
 8003f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f4e:	1ccd      	adds	r5, r1, #3
 8003f50:	f025 0503 	bic.w	r5, r5, #3
 8003f54:	3508      	adds	r5, #8
 8003f56:	2d0c      	cmp	r5, #12
 8003f58:	bf38      	it	cc
 8003f5a:	250c      	movcc	r5, #12
 8003f5c:	2d00      	cmp	r5, #0
 8003f5e:	4606      	mov	r6, r0
 8003f60:	db01      	blt.n	8003f66 <_malloc_r+0x1a>
 8003f62:	42a9      	cmp	r1, r5
 8003f64:	d903      	bls.n	8003f6e <_malloc_r+0x22>
 8003f66:	230c      	movs	r3, #12
 8003f68:	6033      	str	r3, [r6, #0]
 8003f6a:	2000      	movs	r0, #0
 8003f6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f6e:	f000 f87d 	bl	800406c <__malloc_lock>
 8003f72:	4921      	ldr	r1, [pc, #132]	; (8003ff8 <_malloc_r+0xac>)
 8003f74:	680a      	ldr	r2, [r1, #0]
 8003f76:	4614      	mov	r4, r2
 8003f78:	b99c      	cbnz	r4, 8003fa2 <_malloc_r+0x56>
 8003f7a:	4f20      	ldr	r7, [pc, #128]	; (8003ffc <_malloc_r+0xb0>)
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	b923      	cbnz	r3, 8003f8a <_malloc_r+0x3e>
 8003f80:	4621      	mov	r1, r4
 8003f82:	4630      	mov	r0, r6
 8003f84:	f000 f862 	bl	800404c <_sbrk_r>
 8003f88:	6038      	str	r0, [r7, #0]
 8003f8a:	4629      	mov	r1, r5
 8003f8c:	4630      	mov	r0, r6
 8003f8e:	f000 f85d 	bl	800404c <_sbrk_r>
 8003f92:	1c43      	adds	r3, r0, #1
 8003f94:	d123      	bne.n	8003fde <_malloc_r+0x92>
 8003f96:	230c      	movs	r3, #12
 8003f98:	4630      	mov	r0, r6
 8003f9a:	6033      	str	r3, [r6, #0]
 8003f9c:	f000 f86c 	bl	8004078 <__malloc_unlock>
 8003fa0:	e7e3      	b.n	8003f6a <_malloc_r+0x1e>
 8003fa2:	6823      	ldr	r3, [r4, #0]
 8003fa4:	1b5b      	subs	r3, r3, r5
 8003fa6:	d417      	bmi.n	8003fd8 <_malloc_r+0x8c>
 8003fa8:	2b0b      	cmp	r3, #11
 8003faa:	d903      	bls.n	8003fb4 <_malloc_r+0x68>
 8003fac:	6023      	str	r3, [r4, #0]
 8003fae:	441c      	add	r4, r3
 8003fb0:	6025      	str	r5, [r4, #0]
 8003fb2:	e004      	b.n	8003fbe <_malloc_r+0x72>
 8003fb4:	6863      	ldr	r3, [r4, #4]
 8003fb6:	42a2      	cmp	r2, r4
 8003fb8:	bf0c      	ite	eq
 8003fba:	600b      	streq	r3, [r1, #0]
 8003fbc:	6053      	strne	r3, [r2, #4]
 8003fbe:	4630      	mov	r0, r6
 8003fc0:	f000 f85a 	bl	8004078 <__malloc_unlock>
 8003fc4:	f104 000b 	add.w	r0, r4, #11
 8003fc8:	1d23      	adds	r3, r4, #4
 8003fca:	f020 0007 	bic.w	r0, r0, #7
 8003fce:	1ac2      	subs	r2, r0, r3
 8003fd0:	d0cc      	beq.n	8003f6c <_malloc_r+0x20>
 8003fd2:	1a1b      	subs	r3, r3, r0
 8003fd4:	50a3      	str	r3, [r4, r2]
 8003fd6:	e7c9      	b.n	8003f6c <_malloc_r+0x20>
 8003fd8:	4622      	mov	r2, r4
 8003fda:	6864      	ldr	r4, [r4, #4]
 8003fdc:	e7cc      	b.n	8003f78 <_malloc_r+0x2c>
 8003fde:	1cc4      	adds	r4, r0, #3
 8003fe0:	f024 0403 	bic.w	r4, r4, #3
 8003fe4:	42a0      	cmp	r0, r4
 8003fe6:	d0e3      	beq.n	8003fb0 <_malloc_r+0x64>
 8003fe8:	1a21      	subs	r1, r4, r0
 8003fea:	4630      	mov	r0, r6
 8003fec:	f000 f82e 	bl	800404c <_sbrk_r>
 8003ff0:	3001      	adds	r0, #1
 8003ff2:	d1dd      	bne.n	8003fb0 <_malloc_r+0x64>
 8003ff4:	e7cf      	b.n	8003f96 <_malloc_r+0x4a>
 8003ff6:	bf00      	nop
 8003ff8:	20000094 	.word	0x20000094
 8003ffc:	20000098 	.word	0x20000098

08004000 <_realloc_r>:
 8004000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004002:	4607      	mov	r7, r0
 8004004:	4614      	mov	r4, r2
 8004006:	460e      	mov	r6, r1
 8004008:	b921      	cbnz	r1, 8004014 <_realloc_r+0x14>
 800400a:	4611      	mov	r1, r2
 800400c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004010:	f7ff bf9c 	b.w	8003f4c <_malloc_r>
 8004014:	b922      	cbnz	r2, 8004020 <_realloc_r+0x20>
 8004016:	f7ff ff4d 	bl	8003eb4 <_free_r>
 800401a:	4625      	mov	r5, r4
 800401c:	4628      	mov	r0, r5
 800401e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004020:	f000 f830 	bl	8004084 <_malloc_usable_size_r>
 8004024:	42a0      	cmp	r0, r4
 8004026:	d20f      	bcs.n	8004048 <_realloc_r+0x48>
 8004028:	4621      	mov	r1, r4
 800402a:	4638      	mov	r0, r7
 800402c:	f7ff ff8e 	bl	8003f4c <_malloc_r>
 8004030:	4605      	mov	r5, r0
 8004032:	2800      	cmp	r0, #0
 8004034:	d0f2      	beq.n	800401c <_realloc_r+0x1c>
 8004036:	4631      	mov	r1, r6
 8004038:	4622      	mov	r2, r4
 800403a:	f7ff ff13 	bl	8003e64 <memcpy>
 800403e:	4631      	mov	r1, r6
 8004040:	4638      	mov	r0, r7
 8004042:	f7ff ff37 	bl	8003eb4 <_free_r>
 8004046:	e7e9      	b.n	800401c <_realloc_r+0x1c>
 8004048:	4635      	mov	r5, r6
 800404a:	e7e7      	b.n	800401c <_realloc_r+0x1c>

0800404c <_sbrk_r>:
 800404c:	b538      	push	{r3, r4, r5, lr}
 800404e:	2300      	movs	r3, #0
 8004050:	4d05      	ldr	r5, [pc, #20]	; (8004068 <_sbrk_r+0x1c>)
 8004052:	4604      	mov	r4, r0
 8004054:	4608      	mov	r0, r1
 8004056:	602b      	str	r3, [r5, #0]
 8004058:	f7fc fdd2 	bl	8000c00 <_sbrk>
 800405c:	1c43      	adds	r3, r0, #1
 800405e:	d102      	bne.n	8004066 <_sbrk_r+0x1a>
 8004060:	682b      	ldr	r3, [r5, #0]
 8004062:	b103      	cbz	r3, 8004066 <_sbrk_r+0x1a>
 8004064:	6023      	str	r3, [r4, #0]
 8004066:	bd38      	pop	{r3, r4, r5, pc}
 8004068:	200002e0 	.word	0x200002e0

0800406c <__malloc_lock>:
 800406c:	4801      	ldr	r0, [pc, #4]	; (8004074 <__malloc_lock+0x8>)
 800406e:	f000 b811 	b.w	8004094 <__retarget_lock_acquire_recursive>
 8004072:	bf00      	nop
 8004074:	200002e8 	.word	0x200002e8

08004078 <__malloc_unlock>:
 8004078:	4801      	ldr	r0, [pc, #4]	; (8004080 <__malloc_unlock+0x8>)
 800407a:	f000 b80c 	b.w	8004096 <__retarget_lock_release_recursive>
 800407e:	bf00      	nop
 8004080:	200002e8 	.word	0x200002e8

08004084 <_malloc_usable_size_r>:
 8004084:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004088:	1f18      	subs	r0, r3, #4
 800408a:	2b00      	cmp	r3, #0
 800408c:	bfbc      	itt	lt
 800408e:	580b      	ldrlt	r3, [r1, r0]
 8004090:	18c0      	addlt	r0, r0, r3
 8004092:	4770      	bx	lr

08004094 <__retarget_lock_acquire_recursive>:
 8004094:	4770      	bx	lr

08004096 <__retarget_lock_release_recursive>:
 8004096:	4770      	bx	lr

08004098 <_init>:
 8004098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800409a:	bf00      	nop
 800409c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800409e:	bc08      	pop	{r3}
 80040a0:	469e      	mov	lr, r3
 80040a2:	4770      	bx	lr

080040a4 <_fini>:
 80040a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040a6:	bf00      	nop
 80040a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040aa:	bc08      	pop	{r3}
 80040ac:	469e      	mov	lr, r3
 80040ae:	4770      	bx	lr
